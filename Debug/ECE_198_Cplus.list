
ECE_198_Cplus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005df8  08005df8  00015df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec4  08005ec4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ecc  08005ecc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005ed4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000007c  08005f50  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005f50  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1e2  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002121  00000000  00000000  0002e2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000add  00000000  00000000  000311e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185f6  00000000  00000000  00031cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb95  00000000  00000000  0004a2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b317  00000000  00000000  00059e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004738  00000000  00000000  000f5160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f9898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005de0 	.word	0x08005de0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08005de0 	.word	0x08005de0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000efc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d013      	beq.n	8000f34 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00b      	beq.n	8000f34 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f1c:	e000      	b.n	8000f20 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f1e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f9      	beq.n	8000f1e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f2a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <ADC_Select_CH0.0>:
  MX_TIM2_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  void ADC_Select_CH0 (void)
  {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	f8c7 c004 	str.w	ip, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <ADC_Select_CH0.0+0x44>)
 8000f70:	f000 ff18 	bl	8001da4 <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <ADC_Select_CH0.0+0x3a>
  	  {
  	    Error_Handler();
 8000f7a:	f000 fab5 	bl	80014e8 <Error_Handler>
  	  }
  }
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000098 	.word	0x20000098
 8000f8c:	00000000 	.word	0x00000000

08000f90 <main>:
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af02      	add	r7, sp, #8
int main(void)
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8000f9c:	f000 fca8 	bl	80018f0 <HAL_Init>
  SystemClock_Config();
 8000fa0:	f000 f8fa 	bl	8001198 <SystemClock_Config>
  MX_GPIO_Init();
 8000fa4:	f000 fa6a 	bl	800147c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa8:	f000 fa48 	bl	800143c <MX_DMA_Init>
  MX_TIM2_Init();
 8000fac:	f000 f9d0 	bl	8001350 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000fb0:	f000 f95c 	bl	800126c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000fb4:	f000 fa18 	bl	80013e8 <MX_USART2_UART_Init>
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  	  {
  	    Error_Handler();
  	  }
  }
  printf("Sensors warming up! \n");
 8000fb8:	484d      	ldr	r0, [pc, #308]	; (80010f0 <main+0x160>)
 8000fba:	f004 f8a9 	bl	8005110 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  const int R_0 = 945;
 8000fbe:	f240 33b1 	movw	r3, #945	; 0x3b1
 8000fc2:	61fb      	str	r3, [r7, #28]
	  ADC_Select_CH0();
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	f7ff ffbc 	bl	8000f44 <ADC_Select_CH0.0>
	  HAL_ADC_Start(&hadc1);
 8000fcc:	4849      	ldr	r0, [pc, #292]	; (80010f4 <main+0x164>)
 8000fce:	f000 fd69 	bl	8001aa4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000fd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fd6:	4847      	ldr	r0, [pc, #284]	; (80010f4 <main+0x164>)
 8000fd8:	f000 fe4b 	bl	8001c72 <HAL_ADC_PollForConversion>
	  int x = HAL_ADC_GetValue(&hadc1);
 8000fdc:	4845      	ldr	r0, [pc, #276]	; (80010f4 <main+0x164>)
 8000fde:	f000 fed3 	bl	8001d88 <HAL_ADC_GetValue>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	61bb      	str	r3, [r7, #24]
	  HAL_ADC_Stop(&hadc1);
 8000fe6:	4843      	ldr	r0, [pc, #268]	; (80010f4 <main+0x164>)
 8000fe8:	f000 fe10 	bl	8001c0c <HAL_ADC_Stop>
	  float volt4 = (x*5)/1023;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <main+0x168>)
 8000ff6:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffa:	441a      	add	r2, r3
 8000ffc:	1252      	asrs	r2, r2, #9
 8000ffe:	17db      	asrs	r3, r3, #31
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100a:	edc7 7a05 	vstr	s15, [r7, #20]
	  float R_S = (5-volt4)*1000/volt4;
 800100e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001012:	edd7 7a05 	vldr	s15, [r7, #20]
 8001016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80010fc <main+0x16c>
 800101e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001022:	ed97 7a05 	vldr	s14, [r7, #20]
 8001026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102a:	edc7 7a04 	vstr	s15, [r7, #16]
	  float mq4 = pow(R_S/R_0, -2.95) * 1000;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001038:	ed97 7a04 	vldr	s14, [r7, #16]
 800103c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001040:	ee16 0a90 	vmov	r0, s13
 8001044:	f7ff fa80 	bl	8000548 <__aeabi_f2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80010e8 <main+0x158>
 8001050:	ec43 2b10 	vmov	d0, r2, r3
 8001054:	f002 fffc 	bl	8004050 <pow>
 8001058:	ec51 0b10 	vmov	r0, r1, d0
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <main+0x170>)
 8001062:	f7ff fac9 	bl	80005f8 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fd73 	bl	8000b58 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	60fb      	str	r3, [r7, #12]

	  ADC_Select_CH1();//MQ136
 8001076:	463b      	mov	r3, r7
 8001078:	469c      	mov	ip, r3
 800107a:	f000 f845 	bl	8001108 <ADC_Select_CH1.1>
	  HAL_ADC_Start(&hadc1);
 800107e:	481d      	ldr	r0, [pc, #116]	; (80010f4 <main+0x164>)
 8001080:	f000 fd10 	bl	8001aa4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001088:	481a      	ldr	r0, [pc, #104]	; (80010f4 <main+0x164>)
 800108a:	f000 fdf2 	bl	8001c72 <HAL_ADC_PollForConversion>
	  int y = HAL_ADC_GetValue(&hadc1);
 800108e:	4819      	ldr	r0, [pc, #100]	; (80010f4 <main+0x164>)
 8001090:	f000 fe7a 	bl	8001d88 <HAL_ADC_GetValue>
 8001094:	4603      	mov	r3, r0
 8001096:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop(&hadc1);
 8001098:	4816      	ldr	r0, [pc, #88]	; (80010f4 <main+0x164>)
 800109a:	f000 fdb7 	bl	8001c0c <HAL_ADC_Stop>

	  ADC_Select_CH4();//MQ135
 800109e:	463b      	mov	r3, r7
 80010a0:	469c      	mov	ip, r3
 80010a2:	f000 f855 	bl	8001150 <ADC_Select_CH4.2>
	  HAL_ADC_Start(&hadc1);
 80010a6:	4813      	ldr	r0, [pc, #76]	; (80010f4 <main+0x164>)
 80010a8:	f000 fcfc 	bl	8001aa4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80010ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <main+0x164>)
 80010b2:	f000 fdde 	bl	8001c72 <HAL_ADC_PollForConversion>
	  int z = HAL_ADC_GetValue(&hadc1);
 80010b6:	480f      	ldr	r0, [pc, #60]	; (80010f4 <main+0x164>)
 80010b8:	f000 fe66 	bl	8001d88 <HAL_ADC_GetValue>
 80010bc:	4603      	mov	r3, r0
 80010be:	607b      	str	r3, [r7, #4]
	  HAL_ADC_Stop(&hadc1);
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <main+0x164>)
 80010c2:	f000 fda3 	bl	8001c0c <HAL_ADC_Stop>

	  HAL_Delay (1000);
 80010c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ca:	f000 fc83 	bl	80019d4 <HAL_Delay>
	  printf("MQ4: %d PPM MQ 136: %d PPM MQ135: %d PPM \n", mq4, y, z);
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fa3a 	bl	8000548 <__aeabi_f2d>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	9101      	str	r1, [sp, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	9100      	str	r1, [sp, #0]
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <main+0x174>)
 80010e2:	f003 ffaf 	bl	8005044 <iprintf>
  {
 80010e6:	e76a      	b.n	8000fbe <main+0x2e>
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	c0079999 	.word	0xc0079999
 80010f0:	08005df8 	.word	0x08005df8
 80010f4:	20000098 	.word	0x20000098
 80010f8:	80200803 	.word	0x80200803
 80010fc:	447a0000 	.word	0x447a0000
 8001100:	408f4000 	.word	0x408f4000
 8001104:	08005e10 	.word	0x08005e10

08001108 <ADC_Select_CH1.1>:
  {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	f8c7 c004 	str.w	ip, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  	  sConfig.Channel = ADC_CHANNEL_1;
 8001120:	2301      	movs	r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001128:	2304      	movs	r3, #4
 800112a:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <ADC_Select_CH1.1+0x44>)
 8001134:	f000 fe36 	bl	8001da4 <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <ADC_Select_CH1.1+0x3a>
  	    Error_Handler();
 800113e:	f000 f9d3 	bl	80014e8 <Error_Handler>
  }
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000098 	.word	0x20000098

08001150 <ADC_Select_CH4.2>:
  {
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	f8c7 c004 	str.w	ip, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  	  sConfig.Channel = ADC_CHANNEL_1;
 8001168:	2301      	movs	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001170:	2305      	movs	r3, #5
 8001172:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <ADC_Select_CH4.2+0x44>)
 800117c:	f000 fe12 	bl	8001da4 <HAL_ADC_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <ADC_Select_CH4.2+0x3a>
  	    Error_Handler();
 8001186:	f000 f9af 	bl	80014e8 <Error_Handler>
  }
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000098 	.word	0x20000098

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2230      	movs	r2, #48	; 0x30
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 ffba 	bl	8005120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <SystemClock_Config+0xcc>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <SystemClock_Config+0xcc>)
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <SystemClock_Config+0xcc>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <SystemClock_Config+0xd0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011e4:	4a20      	ldr	r2, [pc, #128]	; (8001268 <SystemClock_Config+0xd0>)
 80011e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <SystemClock_Config+0xd0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001200:	2310      	movs	r3, #16
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001204:	2302      	movs	r3, #2
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800120c:	2308      	movs	r3, #8
 800120e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001210:	2354      	movs	r3, #84	; 0x54
 8001212:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001214:	2302      	movs	r3, #2
 8001216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001218:	2304      	movs	r3, #4
 800121a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 0320 	add.w	r3, r7, #32
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fd5d 	bl	8002ce0 <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800122c:	f000 f95c 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001234:	2302      	movs	r3, #2
 8001236:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f001 ffbf 	bl	80031d0 <HAL_RCC_ClockConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001258:	f000 f946 	bl	80014e8 <Error_Handler>
  }
}
 800125c:	bf00      	nop
 800125e:	3750      	adds	r7, #80	; 0x50
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800127e:	4b31      	ldr	r3, [pc, #196]	; (8001344 <MX_ADC1_Init+0xd8>)
 8001280:	4a31      	ldr	r2, [pc, #196]	; (8001348 <MX_ADC1_Init+0xdc>)
 8001282:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <MX_ADC1_Init+0xd8>)
 8001286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800128a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <MX_ADC1_Init+0xd8>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_ADC1_Init+0xd8>)
 8001294:	2201      	movs	r2, #1
 8001296:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_ADC1_Init+0xd8>)
 800129a:	2201      	movs	r2, #1
 800129c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_ADC1_Init+0xd8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_ADC1_Init+0xd8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_ADC1_Init+0xd8>)
 80012ae:	4a27      	ldr	r2, [pc, #156]	; (800134c <MX_ADC1_Init+0xe0>)
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <MX_ADC1_Init+0xd8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_ADC1_Init+0xd8>)
 80012ba:	2203      	movs	r2, #3
 80012bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_ADC1_Init+0xd8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_ADC1_Init+0xd8>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <MX_ADC1_Init+0xd8>)
 80012ce:	f000 fba5 	bl	8001a1c <HAL_ADC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 f906 	bl	80014e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80012e4:	2302      	movs	r3, #2
 80012e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_ADC1_Init+0xd8>)
 80012ee:	f000 fd59 	bl	8001da4 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012f8:	f000 f8f6 	bl	80014e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001304:	2304      	movs	r3, #4
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_ADC1_Init+0xd8>)
 800130e:	f000 fd49 	bl	8001da4 <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001318:	f000 f8e6 	bl	80014e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800131c:	2300      	movs	r3, #0
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001320:	2303      	movs	r3, #3
 8001322:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_ADC1_Init+0xd8>)
 800132e:	f000 fd39 	bl	8001da4 <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001338:	f000 f8d6 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000098 	.word	0x20000098
 8001348:	40012000 	.word	0x40012000
 800134c:	0f000001 	.word	0x0f000001

08001350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_TIM2_Init+0x94>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_TIM2_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001386:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_TIM2_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001396:	f002 f8fb 	bl	8003590 <HAL_TIM_Base_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013a0:	f000 f8a2 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_TIM2_Init+0x94>)
 80013b2:	f002 f93c 	bl	800362e <HAL_TIM_ConfigClockSource>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013bc:	f000 f894 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_TIM2_Init+0x94>)
 80013ce:	f002 fb0f 	bl	80039f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013d8:	f000 f886 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000140 	.word	0x20000140

080013e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_USART2_UART_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001420:	f002 fb54 	bl	8003acc <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142a:	f000 f85d 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000188 	.word	0x20000188
 8001438:	40004400 	.word	0x40004400

0800143c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_DMA_Init+0x3c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <MX_DMA_Init+0x3c>)
 800144c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_DMA_Init+0x3c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2038      	movs	r0, #56	; 0x38
 8001464:	f000 ff97 	bl	8002396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001468:	2038      	movs	r0, #56	; 0x38
 800146a:	f000 ffb0 	bl	80023ce <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_GPIO_Init+0x30>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <MX_GPIO_Init+0x30>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_GPIO_Init+0x30>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e009      	b.n	80014d6 <_write+0x26>
  {
	ITM_SendChar(*ptr++);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	60ba      	str	r2, [r7, #8]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fd12 	bl	8000ef4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbf1      	blt.n	80014c2 <_write+0x12>
  }
  return len;
 80014de:	687b      	ldr	r3, [r7, #4]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_MspInit+0x4c>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_MspInit+0x4c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a2e      	ldr	r2, [pc, #184]	; (800161c <HAL_ADC_MspInit+0xd8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d156      	bne.n	8001614 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_ADC_MspInit+0xdc>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a2c      	ldr	r2, [pc, #176]	; (8001620 <HAL_ADC_MspInit+0xdc>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_ADC_MspInit+0xdc>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_ADC_MspInit+0xdc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a25      	ldr	r2, [pc, #148]	; (8001620 <HAL_ADC_MspInit+0xdc>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <HAL_ADC_MspInit+0xdc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = sensor136_Pin|GPIO_PIN_1|GPIO_PIN_4|sensor4_Pin;
 800159e:	2333      	movs	r3, #51	; 0x33
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	481c      	ldr	r0, [pc, #112]	; (8001624 <HAL_ADC_MspInit+0xe0>)
 80015b2:	f001 fa11 	bl	80029d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015b8:	4a1c      	ldr	r2, [pc, #112]	; (800162c <HAL_ADC_MspInit+0xe8>)
 80015ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 80015fa:	f000 ff03 	bl	8002404 <HAL_DMA_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001604:	f7ff ff70 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 800160c:	639a      	str	r2, [r3, #56]	; 0x38
 800160e:	4a06      	ldr	r2, [pc, #24]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40012000 	.word	0x40012000
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000
 8001628:	200000e0 	.word	0x200000e0
 800162c:	40026410 	.word	0x40026410

08001630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001640:	d10d      	bne.n	800165e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_TIM_Base_MspInit+0x3c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_TIM_Base_MspInit+0x3c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_TIM_Base_MspInit+0x3c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_UART_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12b      	bne.n	80016ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_UART_MspInit+0x88>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_UART_MspInit+0x88>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ca:	230c      	movs	r3, #12
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016da:	2307      	movs	r3, #7
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016e6:	f001 f977 	bl	80029d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40004400 	.word	0x40004400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f922 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <DMA2_Stream0_IRQHandler+0x10>)
 800175a:	f000 ff01 	bl	8002560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200000e0 	.word	0x200000e0

08001768 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e00a      	b.n	8001790 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800177a:	f3af 8000 	nop.w
 800177e:	4601      	mov	r1, r0
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	60ba      	str	r2, [r7, #8]
 8001786:	b2ca      	uxtb	r2, r1
 8001788:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf0      	blt.n	800177a <_read+0x12>
  }

  return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ca:	605a      	str	r2, [r3, #4]
  return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_isatty>:

int _isatty(int file)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f003 fc78 	bl	8005130 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20018000 	.word	0x20018000
 800186c:	00000400 	.word	0x00000400
 8001870:	200001cc 	.word	0x200001cc
 8001874:	20000320 	.word	0x20000320

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a2:	490e      	ldr	r1, [pc, #56]	; (80018dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b8:	4c0b      	ldr	r4, [pc, #44]	; (80018e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c6:	f7ff ffd7 	bl	8001878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f003 fc37 	bl	800513c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff fb5f 	bl	8000f90 <main>
  bx  lr    
 80018d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018e0:	08005ed4 	.word	0x08005ed4
  ldr r2, =_sbss
 80018e4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80018e8:	20000320 	.word	0x20000320

080018ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_Init+0x40>)
 80018fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_Init+0x40>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_Init+0x40>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 fd31 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	200f      	movs	r0, #15
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fde6 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fd49 	bl	80023ea <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001970:	f000 fd11 	bl	8002396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000000 	.word	0x20000000
 800198c:	20000008 	.word	0x20000008
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008
 80019b8:	200001d0 	.word	0x200001d0

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	200001d0 	.word	0x200001d0

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008

08001a1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e033      	b.n	8001a9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fd82 	bl	8001544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d118      	bne.n	8001a8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a62:	f023 0302 	bic.w	r3, r3, #2
 8001a66:	f043 0202 	orr.w	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 faba 	bl	8001fe8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f023 0303 	bic.w	r3, r3, #3
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8a:	e001      	b.n	8001a90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Start+0x1a>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e097      	b.n	8001bee <HAL_ADC_Start+0x14a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d018      	beq.n	8001b06 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ae4:	4b45      	ldr	r3, [pc, #276]	; (8001bfc <HAL_ADC_Start+0x158>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a45      	ldr	r2, [pc, #276]	; (8001c00 <HAL_ADC_Start+0x15c>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0c9a      	lsrs	r2, r3, #18
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001af8:	e002      	b.n	8001b00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f9      	bne.n	8001afa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d15f      	bne.n	8001bd4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b52:	d106      	bne.n	8001b62 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f023 0206 	bic.w	r2, r3, #6
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b60:	e002      	b.n	8001b68 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_ADC_Start+0x160>)
 8001b72:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b7c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10f      	bne.n	8001baa <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d129      	bne.n	8001bec <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	e020      	b.n	8001bec <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_ADC_Start+0x164>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d11b      	bne.n	8001bec <HAL_ADC_Start+0x148>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d114      	bne.n	8001bec <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	e00b      	b.n	8001bec <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f043 0210 	orr.w	r2, r3, #16
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	431bde83 	.word	0x431bde83
 8001c04:	40012300 	.word	0x40012300
 8001c08:	40012000 	.word	0x40012000

08001c0c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_Stop+0x16>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e021      	b.n	8001c66 <HAL_ADC_Stop+0x5a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8e:	d113      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f043 0220 	orr.w	r2, r3, #32
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e063      	b.n	8001d80 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cb8:	f7ff fe80 	bl	80019bc <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cbe:	e021      	b.n	8001d04 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cc6:	d01d      	beq.n	8001d04 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_ADC_PollForConversion+0x6c>
 8001cce:	f7ff fe75 	bl	80019bc <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d212      	bcs.n	8001d04 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d00b      	beq.n	8001d04 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f043 0204 	orr.w	r2, r3, #4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e03d      	b.n	8001d80 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d1d6      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f06f 0212 	mvn.w	r2, #18
 8001d1a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d123      	bne.n	8001d7e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d11f      	bne.n	8001d7e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d111      	bne.n	8001d7e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1c>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e105      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x228>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b09      	cmp	r3, #9
 8001dce:	d925      	bls.n	8001e1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68d9      	ldr	r1, [r3, #12]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	3b1e      	subs	r3, #30
 8001de6:	2207      	movs	r2, #7
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43da      	mvns	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	400a      	ands	r2, r1
 8001df4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68d9      	ldr	r1, [r3, #12]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	4603      	mov	r3, r0
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4403      	add	r3, r0
 8001e0e:	3b1e      	subs	r3, #30
 8001e10:	409a      	lsls	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	e022      	b.n	8001e62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	2207      	movs	r2, #7
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6919      	ldr	r1, [r3, #16]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4403      	add	r3, r0
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d824      	bhi.n	8001eb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b05      	subs	r3, #5
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	400a      	ands	r2, r1
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b05      	subs	r3, #5
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb2:	e04c      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	d824      	bhi.n	8001f06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b23      	subs	r3, #35	; 0x23
 8001ece:	221f      	movs	r2, #31
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	400a      	ands	r2, r1
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b23      	subs	r3, #35	; 0x23
 8001ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
 8001f04:	e023      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3b41      	subs	r3, #65	; 0x41
 8001f18:	221f      	movs	r2, #31
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	400a      	ands	r2, r1
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b41      	subs	r3, #65	; 0x41
 8001f42:	fa00 f203 	lsl.w	r2, r0, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_ADC_ConfigChannel+0x234>)
 8001f50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a21      	ldr	r2, [pc, #132]	; (8001fdc <HAL_ADC_ConfigChannel+0x238>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d109      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1cc>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b12      	cmp	r3, #18
 8001f62:	d105      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_ADC_ConfigChannel+0x238>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d123      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x21e>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b10      	cmp	r3, #16
 8001f80:	d003      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0x1e6>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b11      	cmp	r3, #17
 8001f88:	d11b      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d111      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_ADC_ConfigChannel+0x23c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_ADC_ConfigChannel+0x240>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	0c9a      	lsrs	r2, r3, #18
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb4:	e002      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f9      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40012300 	.word	0x40012300
 8001fdc:	40012000 	.word	0x40012000
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	431bde83 	.word	0x431bde83

08001fe8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff0:	4b79      	ldr	r3, [pc, #484]	; (80021d8 <ADC_Init+0x1f0>)
 8001ff2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	431a      	orrs	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800201c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	021a      	lsls	r2, r3, #8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002062:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6899      	ldr	r1, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	4a58      	ldr	r2, [pc, #352]	; (80021dc <ADC_Init+0x1f4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800208e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6899      	ldr	r1, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	e00f      	b.n	80020e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0202 	bic.w	r2, r2, #2
 80020f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e1b      	ldrb	r3, [r3, #24]
 8002100:	005a      	lsls	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002122:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002132:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	3b01      	subs	r3, #1
 8002140:	035a      	lsls	r2, r3, #13
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	e007      	b.n	800215c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	3b01      	subs	r3, #1
 8002178:	051a      	lsls	r2, r3, #20
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800219e:	025a      	lsls	r2, r3, #9
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	029a      	lsls	r2, r3, #10
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	609a      	str	r2, [r3, #8]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40012300 	.word	0x40012300
 80021dc:	0f000001 	.word	0x0f000001

080021e0 <__NVIC_SetPriorityGrouping>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <SysTick_Config>:
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002360:	f7ff ff8e 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff29 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a8:	f7ff ff3e 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff8e 	bl	80022d4 <NVIC_EncodePriority>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff5d 	bl	8002280 <__NVIC_SetPriority>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff31 	bl	8002244 <__NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffa2 	bl	800233c <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff fad4 	bl	80019bc <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e099      	b.n	8002554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002440:	e00f      	b.n	8002462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002442:	f7ff fabb 	bl	80019bc <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b05      	cmp	r3, #5
 800244e:	d908      	bls.n	8002462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2203      	movs	r2, #3
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e078      	b.n	8002554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e8      	bne.n	8002442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <HAL_DMA_Init+0x158>)
 800247c:	4013      	ands	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800248e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d107      	bne.n	80024cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	4313      	orrs	r3, r2
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f023 0307 	bic.w	r3, r3, #7
 80024e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d117      	bne.n	8002526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00e      	beq.n	8002526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f9e9 	bl	80028e0 <DMA_CheckFifoParam>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002522:	2301      	movs	r3, #1
 8002524:	e016      	b.n	8002554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f9a0 	bl	8002874 <DMA_CalcBaseAndBitshift>
 8002534:	4603      	mov	r3, r0
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	223f      	movs	r2, #63	; 0x3f
 800253e:	409a      	lsls	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	f010803f 	.word	0xf010803f

08002560 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800256c:	4b8e      	ldr	r3, [pc, #568]	; (80027a8 <HAL_DMA_IRQHandler+0x248>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a8e      	ldr	r2, [pc, #568]	; (80027ac <HAL_DMA_IRQHandler+0x24c>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	2208      	movs	r2, #8
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01a      	beq.n	80025cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2208      	movs	r2, #8
 80025ba:	409a      	lsls	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	2201      	movs	r2, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2201      	movs	r2, #1
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2204      	movs	r2, #4
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d012      	beq.n	8002638 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00b      	beq.n	8002638 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2204      	movs	r2, #4
 8002626:	409a      	lsls	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f043 0204 	orr.w	r2, r3, #4
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	2210      	movs	r2, #16
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d043      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d03c      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	2210      	movs	r2, #16
 800265c:	409a      	lsls	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d024      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
 800268e:	e01f      	b.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e016      	b.n	80026d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d107      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0208 	bic.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2220      	movs	r2, #32
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 808f 	beq.w	8002800 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8087 	beq.w	8002800 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2220      	movs	r2, #32
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b05      	cmp	r3, #5
 8002708:	d136      	bne.n	8002778 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0216 	bic.w	r2, r2, #22
 8002718:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002728:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_DMA_IRQHandler+0x1da>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0208 	bic.w	r2, r2, #8
 8002748:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	223f      	movs	r2, #63	; 0x3f
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276a:	2b00      	cmp	r3, #0
 800276c:	d07e      	beq.n	800286c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
        }
        return;
 8002776:	e079      	b.n	800286c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01d      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	2b00      	cmp	r3, #0
 800279a:	d031      	beq.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
 80027a4:	e02c      	b.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
 80027a6:	bf00      	nop
 80027a8:	20000000 	.word	0x20000000
 80027ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
 80027c0:	e01e      	b.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10f      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0210 	bic.w	r2, r2, #16
 80027de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	2b00      	cmp	r3, #0
 8002806:	d032      	beq.n	800286e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d022      	beq.n	800285a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2205      	movs	r2, #5
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3301      	adds	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	d307      	bcc.n	8002848 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f2      	bne.n	800282c <HAL_DMA_IRQHandler+0x2cc>
 8002846:	e000      	b.n	800284a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002848:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
 800286a:	e000      	b.n	800286e <HAL_DMA_IRQHandler+0x30e>
        return;
 800286c:	bf00      	nop
    }
  }
}
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3b10      	subs	r3, #16
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800288e:	4a13      	ldr	r2, [pc, #76]	; (80028dc <DMA_CalcBaseAndBitshift+0x68>)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d909      	bls.n	80028b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028aa:	f023 0303 	bic.w	r3, r3, #3
 80028ae:	1d1a      	adds	r2, r3, #4
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	659a      	str	r2, [r3, #88]	; 0x58
 80028b4:	e007      	b.n	80028c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	aaaaaaab 	.word	0xaaaaaaab
 80028dc:	08005e54 	.word	0x08005e54

080028e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d11f      	bne.n	800293a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d856      	bhi.n	80029ae <DMA_CheckFifoParam+0xce>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <DMA_CheckFifoParam+0x28>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	08002919 	.word	0x08002919
 800290c:	0800292b 	.word	0x0800292b
 8002910:	08002919 	.word	0x08002919
 8002914:	080029af 	.word	0x080029af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d046      	beq.n	80029b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002928:	e043      	b.n	80029b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002932:	d140      	bne.n	80029b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002938:	e03d      	b.n	80029b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002942:	d121      	bne.n	8002988 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d837      	bhi.n	80029ba <DMA_CheckFifoParam+0xda>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <DMA_CheckFifoParam+0x70>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002961 	.word	0x08002961
 8002954:	08002967 	.word	0x08002967
 8002958:	08002961 	.word	0x08002961
 800295c:	08002979 	.word	0x08002979
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e030      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d025      	beq.n	80029be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002976:	e022      	b.n	80029be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002980:	d11f      	bne.n	80029c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002986:	e01c      	b.n	80029c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d903      	bls.n	8002996 <DMA_CheckFifoParam+0xb6>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d003      	beq.n	800299c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002994:	e018      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
      break;
 800299a:	e015      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00e      	beq.n	80029c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      break;
 80029ac:	e00b      	b.n	80029c6 <DMA_CheckFifoParam+0xe6>
      break;
 80029ae:	bf00      	nop
 80029b0:	e00a      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029b2:	bf00      	nop
 80029b4:	e008      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029b6:	bf00      	nop
 80029b8:	e006      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029ba:	bf00      	nop
 80029bc:	e004      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029c6:	bf00      	nop
    }
  } 
  
  return status; 
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	e159      	b.n	8002ca8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029f4:	2201      	movs	r2, #1
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	f040 8148 	bne.w	8002ca2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d005      	beq.n	8002a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d130      	bne.n	8002a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	2203      	movs	r2, #3
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 0201 	and.w	r2, r3, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d017      	beq.n	8002ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d123      	bne.n	8002b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	69b9      	ldr	r1, [r7, #24]
 8002b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a2 	beq.w	8002ca2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b57      	ldr	r3, [pc, #348]	; (8002cc0 <HAL_GPIO_Init+0x2e8>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a56      	ldr	r2, [pc, #344]	; (8002cc0 <HAL_GPIO_Init+0x2e8>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b54      	ldr	r3, [pc, #336]	; (8002cc0 <HAL_GPIO_Init+0x2e8>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b7a:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_GPIO_Init+0x2ec>)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a49      	ldr	r2, [pc, #292]	; (8002cc8 <HAL_GPIO_Init+0x2f0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d019      	beq.n	8002bda <HAL_GPIO_Init+0x202>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a48      	ldr	r2, [pc, #288]	; (8002ccc <HAL_GPIO_Init+0x2f4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_GPIO_Init+0x1fe>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a47      	ldr	r2, [pc, #284]	; (8002cd0 <HAL_GPIO_Init+0x2f8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_GPIO_Init+0x1fa>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a46      	ldr	r2, [pc, #280]	; (8002cd4 <HAL_GPIO_Init+0x2fc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <HAL_GPIO_Init+0x1f6>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a45      	ldr	r2, [pc, #276]	; (8002cd8 <HAL_GPIO_Init+0x300>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_GPIO_Init+0x1f2>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e008      	b.n	8002bdc <HAL_GPIO_Init+0x204>
 8002bca:	2307      	movs	r3, #7
 8002bcc:	e006      	b.n	8002bdc <HAL_GPIO_Init+0x204>
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e004      	b.n	8002bdc <HAL_GPIO_Init+0x204>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e002      	b.n	8002bdc <HAL_GPIO_Init+0x204>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_GPIO_Init+0x204>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	f002 0203 	and.w	r2, r2, #3
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	4093      	lsls	r3, r2
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bec:	4935      	ldr	r1, [pc, #212]	; (8002cc4 <HAL_GPIO_Init+0x2ec>)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <HAL_GPIO_Init+0x304>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c1e:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <HAL_GPIO_Init+0x304>)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_GPIO_Init+0x304>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c48:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <HAL_GPIO_Init+0x304>)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_GPIO_Init+0x304>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c72:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <HAL_GPIO_Init+0x304>)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <HAL_GPIO_Init+0x304>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c9c:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <HAL_GPIO_Init+0x304>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	f67f aea2 	bls.w	80029f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40013800 	.word	0x40013800
 8002cc8:	40020000 	.word	0x40020000
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020c00 	.word	0x40020c00
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40013c00 	.word	0x40013c00

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e267      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d075      	beq.n	8002dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cfe:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d00c      	beq.n	8002d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0a:	4b85      	ldr	r3, [pc, #532]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d112      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d16:	4b82      	ldr	r3, [pc, #520]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d22:	d10b      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	4b7e      	ldr	r3, [pc, #504]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d05b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x108>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d157      	bne.n	8002de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e242      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d106      	bne.n	8002d54 <HAL_RCC_OscConfig+0x74>
 8002d46:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a75      	ldr	r2, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xb0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x98>
 8002d5e:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6f      	ldr	r2, [pc, #444]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6c      	ldr	r2, [pc, #432]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xb0>
 8002d78:	4b69      	ldr	r3, [pc, #420]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a68      	ldr	r2, [pc, #416]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a65      	ldr	r2, [pc, #404]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe fe10 	bl	80019bc <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fe fe0c 	bl	80019bc <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e207      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xc0>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fdfc 	bl	80019bc <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fdf8 	bl	80019bc <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1f3      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xe8>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df6:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0e:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x152>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1c7      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e03a      	b.n	8002ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d020      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <HAL_RCC_OscConfig+0x244>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7fe fdb1 	bl	80019bc <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7fe fdad 	bl	80019bc <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e1a8      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4925      	ldr	r1, [pc, #148]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCC_OscConfig+0x244>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fd90 	bl	80019bc <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fd8c 	bl	80019bc <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e187      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d036      	beq.n	8002f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_RCC_OscConfig+0x248>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fd70 	bl	80019bc <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fd6c 	bl	80019bc <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e167      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x200>
 8002efe:	e01b      	b.n	8002f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_OscConfig+0x248>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f06:	f7fe fd59 	bl	80019bc <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	e00e      	b.n	8002f2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0e:	f7fe fd55 	bl	80019bc <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d907      	bls.n	8002f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e150      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
 8002f20:	40023800 	.word	0x40023800
 8002f24:	42470000 	.word	0x42470000
 8002f28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	4b88      	ldr	r3, [pc, #544]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ea      	bne.n	8002f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8097 	beq.w	8003074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4a:	4b81      	ldr	r3, [pc, #516]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a7c      	ldr	r2, [pc, #496]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	4b77      	ldr	r3, [pc, #476]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d118      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f82:	4b74      	ldr	r3, [pc, #464]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a73      	ldr	r2, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fd15 	bl	80019bc <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f96:	f7fe fd11 	bl	80019bc <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e10c      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x2ea>
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a63      	ldr	r2, [pc, #396]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	e01c      	b.n	8003004 <HAL_RCC_OscConfig+0x324>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x30c>
 8002fd2:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a5e      	ldr	r2, [pc, #376]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	4b5c      	ldr	r3, [pc, #368]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a5b      	ldr	r2, [pc, #364]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0x324>
 8002fec:	4b58      	ldr	r3, [pc, #352]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a57      	ldr	r2, [pc, #348]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a54      	ldr	r2, [pc, #336]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f023 0304 	bic.w	r3, r3, #4
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7fe fcd6 	bl	80019bc <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003012:	e00a      	b.n	800302a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7fe fcd2 	bl	80019bc <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0cb      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0ee      	beq.n	8003014 <HAL_RCC_OscConfig+0x334>
 8003036:	e014      	b.n	8003062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7fe fcc0 	bl	80019bc <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303e:	e00a      	b.n	8003056 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003040:	f7fe fcbc 	bl	80019bc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e0b5      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ee      	bne.n	8003040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	4a38      	ldr	r2, [pc, #224]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003072:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a1 	beq.w	80031c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800307e:	4b34      	ldr	r3, [pc, #208]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b08      	cmp	r3, #8
 8003088:	d05c      	beq.n	8003144 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d141      	bne.n	8003116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b31      	ldr	r3, [pc, #196]	; (8003158 <HAL_RCC_OscConfig+0x478>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe fc90 	bl	80019bc <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe fc8c 	bl	80019bc <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e087      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	019b      	lsls	r3, r3, #6
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	3b01      	subs	r3, #1
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	491b      	ldr	r1, [pc, #108]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCC_OscConfig+0x478>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fe fc65 	bl	80019bc <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fe fc61 	bl	80019bc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e05c      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x416>
 8003114:	e054      	b.n	80031c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_RCC_OscConfig+0x478>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe fc4e 	bl	80019bc <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe fc4a 	bl	80019bc <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e045      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x444>
 8003142:	e03d      	b.n	80031c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e038      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
 8003150:	40023800 	.word	0x40023800
 8003154:	40007000 	.word	0x40007000
 8003158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x4ec>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d028      	beq.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d121      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d11a      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	4293      	cmp	r3, r2
 8003196:	d111      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	3b01      	subs	r3, #1
 80031a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0cc      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d90c      	bls.n	800320c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b65      	ldr	r3, [pc, #404]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0b8      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003224:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4a52      	ldr	r2, [pc, #328]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	494d      	ldr	r1, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d044      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d119      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d003      	beq.n	800328e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	2b03      	cmp	r3, #3
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e067      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4b37      	ldr	r3, [pc, #220]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4934      	ldr	r1, [pc, #208]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fb7c 	bl	80019bc <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	e00a      	b.n	80032de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fe fb78 	bl	80019bc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e04f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b2b      	ldr	r3, [pc, #172]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 020c 	and.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1eb      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d20c      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b22      	ldr	r3, [pc, #136]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e032      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4916      	ldr	r1, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003356:	f000 f821 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800335a:	4602      	mov	r2, r0
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	490a      	ldr	r1, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	5ccb      	ldrb	r3, [r1, r3]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fadc 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023c00 	.word	0x40023c00
 800338c:	40023800 	.word	0x40023800
 8003390:	08005e3c 	.word	0x08005e3c
 8003394:	20000000 	.word	0x20000000
 8003398:	20000004 	.word	0x20000004

0800339c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b090      	sub	sp, #64	; 0x40
 80033a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
 80033a8:	2300      	movs	r3, #0
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ac:	2300      	movs	r3, #0
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_GetSysClockFreq+0x180>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d00d      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x40>
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	f200 80a1 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x16c>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ce:	e09b      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_GetSysClockFreq+0x184>)
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033d4:	e09b      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033d6:	4b53      	ldr	r3, [pc, #332]	; (8003524 <HAL_RCC_GetSysClockFreq+0x188>)
 80033d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033da:	e098      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033dc:	4b4f      	ldr	r3, [pc, #316]	; (800351c <HAL_RCC_GetSysClockFreq+0x180>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e6:	4b4d      	ldr	r3, [pc, #308]	; (800351c <HAL_RCC_GetSysClockFreq+0x180>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d028      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f2:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_RCC_GetSysClockFreq+0x180>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	2200      	movs	r2, #0
 80033fa:	623b      	str	r3, [r7, #32]
 80033fc:	627a      	str	r2, [r7, #36]	; 0x24
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003404:	2100      	movs	r1, #0
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_RCC_GetSysClockFreq+0x188>)
 8003408:	fb03 f201 	mul.w	r2, r3, r1
 800340c:	2300      	movs	r3, #0
 800340e:	fb00 f303 	mul.w	r3, r0, r3
 8003412:	4413      	add	r3, r2
 8003414:	4a43      	ldr	r2, [pc, #268]	; (8003524 <HAL_RCC_GetSysClockFreq+0x188>)
 8003416:	fba0 1202 	umull	r1, r2, r0, r2
 800341a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800341c:	460a      	mov	r2, r1
 800341e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003422:	4413      	add	r3, r2
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	2200      	movs	r2, #0
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	61fa      	str	r2, [r7, #28]
 800342e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003432:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003436:	f7fd fbdf 	bl	8000bf8 <__aeabi_uldivmod>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4613      	mov	r3, r2
 8003440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003442:	e053      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003444:	4b35      	ldr	r3, [pc, #212]	; (800351c <HAL_RCC_GetSysClockFreq+0x180>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	2200      	movs	r2, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	617a      	str	r2, [r7, #20]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003456:	f04f 0b00 	mov.w	fp, #0
 800345a:	4652      	mov	r2, sl
 800345c:	465b      	mov	r3, fp
 800345e:	f04f 0000 	mov.w	r0, #0
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	0159      	lsls	r1, r3, #5
 8003468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346c:	0150      	lsls	r0, r2, #5
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	ebb2 080a 	subs.w	r8, r2, sl
 8003476:	eb63 090b 	sbc.w	r9, r3, fp
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003486:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800348a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800348e:	ebb2 0408 	subs.w	r4, r2, r8
 8003492:	eb63 0509 	sbc.w	r5, r3, r9
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	00eb      	lsls	r3, r5, #3
 80034a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a4:	00e2      	lsls	r2, r4, #3
 80034a6:	4614      	mov	r4, r2
 80034a8:	461d      	mov	r5, r3
 80034aa:	eb14 030a 	adds.w	r3, r4, sl
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	eb45 030b 	adc.w	r3, r5, fp
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034c2:	4629      	mov	r1, r5
 80034c4:	028b      	lsls	r3, r1, #10
 80034c6:	4621      	mov	r1, r4
 80034c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034cc:	4621      	mov	r1, r4
 80034ce:	028a      	lsls	r2, r1, #10
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d6:	2200      	movs	r2, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	60fa      	str	r2, [r7, #12]
 80034dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034e0:	f7fd fb8a 	bl	8000bf8 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4613      	mov	r3, r2
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_GetSysClockFreq+0x180>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	3301      	adds	r3, #1
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003506:	e002      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetSysClockFreq+0x184>)
 800350a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800350c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003510:	4618      	mov	r0, r3
 8003512:	3740      	adds	r7, #64	; 0x40
 8003514:	46bd      	mov	sp, r7
 8003516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	00f42400 	.word	0x00f42400
 8003524:	017d7840 	.word	0x017d7840

08003528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCC_GetHCLKFreq+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000000 	.word	0x20000000

08003540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003544:	f7ff fff0 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0a9b      	lsrs	r3, r3, #10
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4903      	ldr	r1, [pc, #12]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	08005e4c 	.word	0x08005e4c

08003568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800356c:	f7ff ffdc 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0b5b      	lsrs	r3, r3, #13
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4903      	ldr	r1, [pc, #12]	; (800358c <HAL_RCC_GetPCLK2Freq+0x24>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	08005e4c 	.word	0x08005e4c

08003590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e041      	b.n	8003626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fe f83a 	bl	8001630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 f8f4 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_TIM_ConfigClockSource+0x1c>
 8003646:	2302      	movs	r3, #2
 8003648:	e0b4      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x186>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003668:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003670:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003682:	d03e      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0xd4>
 8003684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003688:	f200 8087 	bhi.w	800379a <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003690:	f000 8086 	beq.w	80037a0 <HAL_TIM_ConfigClockSource+0x172>
 8003694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003698:	d87f      	bhi.n	800379a <HAL_TIM_ConfigClockSource+0x16c>
 800369a:	2b70      	cmp	r3, #112	; 0x70
 800369c:	d01a      	beq.n	80036d4 <HAL_TIM_ConfigClockSource+0xa6>
 800369e:	2b70      	cmp	r3, #112	; 0x70
 80036a0:	d87b      	bhi.n	800379a <HAL_TIM_ConfigClockSource+0x16c>
 80036a2:	2b60      	cmp	r3, #96	; 0x60
 80036a4:	d050      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0x11a>
 80036a6:	2b60      	cmp	r3, #96	; 0x60
 80036a8:	d877      	bhi.n	800379a <HAL_TIM_ConfigClockSource+0x16c>
 80036aa:	2b50      	cmp	r3, #80	; 0x50
 80036ac:	d03c      	beq.n	8003728 <HAL_TIM_ConfigClockSource+0xfa>
 80036ae:	2b50      	cmp	r3, #80	; 0x50
 80036b0:	d873      	bhi.n	800379a <HAL_TIM_ConfigClockSource+0x16c>
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d058      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0x13a>
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d86f      	bhi.n	800379a <HAL_TIM_ConfigClockSource+0x16c>
 80036ba:	2b30      	cmp	r3, #48	; 0x30
 80036bc:	d064      	beq.n	8003788 <HAL_TIM_ConfigClockSource+0x15a>
 80036be:	2b30      	cmp	r3, #48	; 0x30
 80036c0:	d86b      	bhi.n	800379a <HAL_TIM_ConfigClockSource+0x16c>
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d060      	beq.n	8003788 <HAL_TIM_ConfigClockSource+0x15a>
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d867      	bhi.n	800379a <HAL_TIM_ConfigClockSource+0x16c>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d05c      	beq.n	8003788 <HAL_TIM_ConfigClockSource+0x15a>
 80036ce:	2b10      	cmp	r3, #16
 80036d0:	d05a      	beq.n	8003788 <HAL_TIM_ConfigClockSource+0x15a>
 80036d2:	e062      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6899      	ldr	r1, [r3, #8]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f000 f964 	bl	80039b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	609a      	str	r2, [r3, #8]
      break;
 8003700:	e04f      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6899      	ldr	r1, [r3, #8]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f000 f94d 	bl	80039b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003724:	609a      	str	r2, [r3, #8]
      break;
 8003726:	e03c      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	461a      	mov	r2, r3
 8003736:	f000 f8c1 	bl	80038bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2150      	movs	r1, #80	; 0x50
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f91a 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003746:	e02c      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	461a      	mov	r2, r3
 8003756:	f000 f8e0 	bl	800391a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2160      	movs	r1, #96	; 0x60
 8003760:	4618      	mov	r0, r3
 8003762:	f000 f90a 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003766:	e01c      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	461a      	mov	r2, r3
 8003776:	f000 f8a1 	bl	80038bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2140      	movs	r1, #64	; 0x40
 8003780:	4618      	mov	r0, r3
 8003782:	f000 f8fa 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003786:	e00c      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f000 f8f1 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003798:	e003      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      break;
 800379e:	e000      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a34      	ldr	r2, [pc, #208]	; (80038a0 <TIM_Base_SetConfig+0xe4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00f      	beq.n	80037f4 <TIM_Base_SetConfig+0x38>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d00b      	beq.n	80037f4 <TIM_Base_SetConfig+0x38>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a31      	ldr	r2, [pc, #196]	; (80038a4 <TIM_Base_SetConfig+0xe8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_Base_SetConfig+0x38>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a30      	ldr	r2, [pc, #192]	; (80038a8 <TIM_Base_SetConfig+0xec>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0x38>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <TIM_Base_SetConfig+0xf0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d108      	bne.n	8003806 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a25      	ldr	r2, [pc, #148]	; (80038a0 <TIM_Base_SetConfig+0xe4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d01b      	beq.n	8003846 <TIM_Base_SetConfig+0x8a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d017      	beq.n	8003846 <TIM_Base_SetConfig+0x8a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a22      	ldr	r2, [pc, #136]	; (80038a4 <TIM_Base_SetConfig+0xe8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <TIM_Base_SetConfig+0x8a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <TIM_Base_SetConfig+0xec>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00f      	beq.n	8003846 <TIM_Base_SetConfig+0x8a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a20      	ldr	r2, [pc, #128]	; (80038ac <TIM_Base_SetConfig+0xf0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00b      	beq.n	8003846 <TIM_Base_SetConfig+0x8a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <TIM_Base_SetConfig+0xf4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <TIM_Base_SetConfig+0x8a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <TIM_Base_SetConfig+0xf8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d003      	beq.n	8003846 <TIM_Base_SetConfig+0x8a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <TIM_Base_SetConfig+0xfc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d108      	bne.n	8003858 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <TIM_Base_SetConfig+0xe4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d103      	bne.n	800388c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	615a      	str	r2, [r3, #20]
}
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800

080038bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 030a 	bic.w	r3, r3, #10
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800391a:	b480      	push	{r7}
 800391c:	b087      	sub	sp, #28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0210 	bic.w	r2, r3, #16
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	f043 0307 	orr.w	r3, r3, #7
 800399c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e050      	b.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d018      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d013      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10c      	bne.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40014000 	.word	0x40014000

08003acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e03f      	b.n	8003b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd fdbc 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f829 	bl	8003b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b6c:	b0c0      	sub	sp, #256	; 0x100
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	68d9      	ldr	r1, [r3, #12]
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	ea40 0301 	orr.w	r3, r0, r1
 8003b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bc0:	f021 010c 	bic.w	r1, r1, #12
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be2:	6999      	ldr	r1, [r3, #24]
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	ea40 0301 	orr.w	r3, r0, r1
 8003bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b8f      	ldr	r3, [pc, #572]	; (8003e34 <UART_SetConfig+0x2cc>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d005      	beq.n	8003c08 <UART_SetConfig+0xa0>
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b8d      	ldr	r3, [pc, #564]	; (8003e38 <UART_SetConfig+0x2d0>)
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d104      	bne.n	8003c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c08:	f7ff fcae 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8003c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c10:	e003      	b.n	8003c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c12:	f7ff fc95 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8003c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c24:	f040 810c 	bne.w	8003e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	1891      	adds	r1, r2, r2
 8003c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c42:	415b      	adcs	r3, r3
 8003c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	eb12 0801 	adds.w	r8, r2, r1
 8003c50:	4629      	mov	r1, r5
 8003c52:	eb43 0901 	adc.w	r9, r3, r1
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6a:	4690      	mov	r8, r2
 8003c6c:	4699      	mov	r9, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	eb18 0303 	adds.w	r3, r8, r3
 8003c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c78:	462b      	mov	r3, r5
 8003c7a:	eb49 0303 	adc.w	r3, r9, r3
 8003c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c96:	460b      	mov	r3, r1
 8003c98:	18db      	adds	r3, r3, r3
 8003c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	eb42 0303 	adc.w	r3, r2, r3
 8003ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cac:	f7fc ffa4 	bl	8000bf8 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <UART_SetConfig+0x2d4>)
 8003cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	011c      	lsls	r4, r3, #4
 8003cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	1891      	adds	r1, r2, r2
 8003cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cd8:	415b      	adcs	r3, r3
 8003cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d00:	4692      	mov	sl, r2
 8003d02:	469b      	mov	fp, r3
 8003d04:	4643      	mov	r3, r8
 8003d06:	eb1a 0303 	adds.w	r3, sl, r3
 8003d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d0e:	464b      	mov	r3, r9
 8003d10:	eb4b 0303 	adc.w	r3, fp, r3
 8003d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	18db      	adds	r3, r3, r3
 8003d30:	643b      	str	r3, [r7, #64]	; 0x40
 8003d32:	4613      	mov	r3, r2
 8003d34:	eb42 0303 	adc.w	r3, r2, r3
 8003d38:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d42:	f7fc ff59 	bl	8000bf8 <__aeabi_uldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <UART_SetConfig+0x2d4>)
 8003d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2264      	movs	r2, #100	; 0x64
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	1acb      	subs	r3, r1, r3
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <UART_SetConfig+0x2d4>)
 8003d64:	fba3 2302 	umull	r2, r3, r3, r2
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d70:	441c      	add	r4, r3
 8003d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d84:	4642      	mov	r2, r8
 8003d86:	464b      	mov	r3, r9
 8003d88:	1891      	adds	r1, r2, r2
 8003d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d94:	4641      	mov	r1, r8
 8003d96:	1851      	adds	r1, r2, r1
 8003d98:	6339      	str	r1, [r7, #48]	; 0x30
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	414b      	adcs	r3, r1
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dac:	4659      	mov	r1, fp
 8003dae:	00cb      	lsls	r3, r1, #3
 8003db0:	4651      	mov	r1, sl
 8003db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003db6:	4651      	mov	r1, sl
 8003db8:	00ca      	lsls	r2, r1, #3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	189b      	adds	r3, r3, r2
 8003dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dc8:	464b      	mov	r3, r9
 8003dca:	460a      	mov	r2, r1
 8003dcc:	eb42 0303 	adc.w	r3, r2, r3
 8003dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003de8:	460b      	mov	r3, r1
 8003dea:	18db      	adds	r3, r3, r3
 8003dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dee:	4613      	mov	r3, r2
 8003df0:	eb42 0303 	adc.w	r3, r2, r3
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dfe:	f7fc fefb 	bl	8000bf8 <__aeabi_uldivmod>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <UART_SetConfig+0x2d4>)
 8003e08:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	2164      	movs	r1, #100	; 0x64
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	3332      	adds	r3, #50	; 0x32
 8003e1a:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <UART_SetConfig+0x2d4>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	f003 0207 	and.w	r2, r3, #7
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4422      	add	r2, r4
 8003e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e30:	e106      	b.n	8004040 <UART_SetConfig+0x4d8>
 8003e32:	bf00      	nop
 8003e34:	40011000 	.word	0x40011000
 8003e38:	40011400 	.word	0x40011400
 8003e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e52:	4642      	mov	r2, r8
 8003e54:	464b      	mov	r3, r9
 8003e56:	1891      	adds	r1, r2, r2
 8003e58:	6239      	str	r1, [r7, #32]
 8003e5a:	415b      	adcs	r3, r3
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e62:	4641      	mov	r1, r8
 8003e64:	1854      	adds	r4, r2, r1
 8003e66:	4649      	mov	r1, r9
 8003e68:	eb43 0501 	adc.w	r5, r3, r1
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	00eb      	lsls	r3, r5, #3
 8003e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e7a:	00e2      	lsls	r2, r4, #3
 8003e7c:	4614      	mov	r4, r2
 8003e7e:	461d      	mov	r5, r3
 8003e80:	4643      	mov	r3, r8
 8003e82:	18e3      	adds	r3, r4, r3
 8003e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e88:	464b      	mov	r3, r9
 8003e8a:	eb45 0303 	adc.w	r3, r5, r3
 8003e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eae:	4629      	mov	r1, r5
 8003eb0:	008b      	lsls	r3, r1, #2
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb8:	4621      	mov	r1, r4
 8003eba:	008a      	lsls	r2, r1, #2
 8003ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ec0:	f7fc fe9a 	bl	8000bf8 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4b60      	ldr	r3, [pc, #384]	; (800404c <UART_SetConfig+0x4e4>)
 8003eca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	011c      	lsls	r4, r3, #4
 8003ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ee4:	4642      	mov	r2, r8
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	1891      	adds	r1, r2, r2
 8003eea:	61b9      	str	r1, [r7, #24]
 8003eec:	415b      	adcs	r3, r3
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	1851      	adds	r1, r2, r1
 8003ef8:	6139      	str	r1, [r7, #16]
 8003efa:	4649      	mov	r1, r9
 8003efc:	414b      	adcs	r3, r1
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f0c:	4659      	mov	r1, fp
 8003f0e:	00cb      	lsls	r3, r1, #3
 8003f10:	4651      	mov	r1, sl
 8003f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f16:	4651      	mov	r1, sl
 8003f18:	00ca      	lsls	r2, r1, #3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4642      	mov	r2, r8
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f28:	464b      	mov	r3, r9
 8003f2a:	460a      	mov	r2, r1
 8003f2c:	eb42 0303 	adc.w	r3, r2, r3
 8003f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	008b      	lsls	r3, r1, #2
 8003f50:	4641      	mov	r1, r8
 8003f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f56:	4641      	mov	r1, r8
 8003f58:	008a      	lsls	r2, r1, #2
 8003f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f5e:	f7fc fe4b 	bl	8000bf8 <__aeabi_uldivmod>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	4b38      	ldr	r3, [pc, #224]	; (800404c <UART_SetConfig+0x4e4>)
 8003f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	2264      	movs	r2, #100	; 0x64
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	1acb      	subs	r3, r1, r3
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	3332      	adds	r3, #50	; 0x32
 8003f7c:	4a33      	ldr	r2, [pc, #204]	; (800404c <UART_SetConfig+0x4e4>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f88:	441c      	add	r4, r3
 8003f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8e:	2200      	movs	r2, #0
 8003f90:	673b      	str	r3, [r7, #112]	; 0x70
 8003f92:	677a      	str	r2, [r7, #116]	; 0x74
 8003f94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	1891      	adds	r1, r2, r2
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	415b      	adcs	r3, r3
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fa8:	4641      	mov	r1, r8
 8003faa:	1851      	adds	r1, r2, r1
 8003fac:	6039      	str	r1, [r7, #0]
 8003fae:	4649      	mov	r1, r9
 8003fb0:	414b      	adcs	r3, r1
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	00cb      	lsls	r3, r1, #3
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fca:	4651      	mov	r1, sl
 8003fcc:	00ca      	lsls	r2, r1, #3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fda:	464b      	mov	r3, r9
 8003fdc:	460a      	mov	r2, r1
 8003fde:	eb42 0303 	adc.w	r3, r2, r3
 8003fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	663b      	str	r3, [r7, #96]	; 0x60
 8003fee:	667a      	str	r2, [r7, #100]	; 0x64
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	008b      	lsls	r3, r1, #2
 8004000:	4641      	mov	r1, r8
 8004002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004006:	4641      	mov	r1, r8
 8004008:	008a      	lsls	r2, r1, #2
 800400a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800400e:	f7fc fdf3 	bl	8000bf8 <__aeabi_uldivmod>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <UART_SetConfig+0x4e4>)
 8004018:	fba3 1302 	umull	r1, r3, r3, r2
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	2164      	movs	r1, #100	; 0x64
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	3332      	adds	r3, #50	; 0x32
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <UART_SetConfig+0x4e4>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	f003 020f 	and.w	r2, r3, #15
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4422      	add	r2, r4
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004046:	46bd      	mov	sp, r7
 8004048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404c:	51eb851f 	.word	0x51eb851f

08004050 <pow>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	ed2d 8b02 	vpush	{d8}
 8004056:	eeb0 8a40 	vmov.f32	s16, s0
 800405a:	eef0 8a60 	vmov.f32	s17, s1
 800405e:	ec55 4b11 	vmov	r4, r5, d1
 8004062:	f000 f871 	bl	8004148 <__ieee754_pow>
 8004066:	4622      	mov	r2, r4
 8004068:	462b      	mov	r3, r5
 800406a:	4620      	mov	r0, r4
 800406c:	4629      	mov	r1, r5
 800406e:	ec57 6b10 	vmov	r6, r7, d0
 8004072:	f7fc fd5b 	bl	8000b2c <__aeabi_dcmpun>
 8004076:	2800      	cmp	r0, #0
 8004078:	d13b      	bne.n	80040f2 <pow+0xa2>
 800407a:	ec51 0b18 	vmov	r0, r1, d8
 800407e:	2200      	movs	r2, #0
 8004080:	2300      	movs	r3, #0
 8004082:	f7fc fd21 	bl	8000ac8 <__aeabi_dcmpeq>
 8004086:	b1b8      	cbz	r0, 80040b8 <pow+0x68>
 8004088:	2200      	movs	r2, #0
 800408a:	2300      	movs	r3, #0
 800408c:	4620      	mov	r0, r4
 800408e:	4629      	mov	r1, r5
 8004090:	f7fc fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004094:	2800      	cmp	r0, #0
 8004096:	d146      	bne.n	8004126 <pow+0xd6>
 8004098:	ec45 4b10 	vmov	d0, r4, r5
 800409c:	f000 f848 	bl	8004130 <finite>
 80040a0:	b338      	cbz	r0, 80040f2 <pow+0xa2>
 80040a2:	2200      	movs	r2, #0
 80040a4:	2300      	movs	r3, #0
 80040a6:	4620      	mov	r0, r4
 80040a8:	4629      	mov	r1, r5
 80040aa:	f7fc fd17 	bl	8000adc <__aeabi_dcmplt>
 80040ae:	b300      	cbz	r0, 80040f2 <pow+0xa2>
 80040b0:	f001 f83e 	bl	8005130 <__errno>
 80040b4:	2322      	movs	r3, #34	; 0x22
 80040b6:	e01b      	b.n	80040f0 <pow+0xa0>
 80040b8:	ec47 6b10 	vmov	d0, r6, r7
 80040bc:	f000 f838 	bl	8004130 <finite>
 80040c0:	b9e0      	cbnz	r0, 80040fc <pow+0xac>
 80040c2:	eeb0 0a48 	vmov.f32	s0, s16
 80040c6:	eef0 0a68 	vmov.f32	s1, s17
 80040ca:	f000 f831 	bl	8004130 <finite>
 80040ce:	b1a8      	cbz	r0, 80040fc <pow+0xac>
 80040d0:	ec45 4b10 	vmov	d0, r4, r5
 80040d4:	f000 f82c 	bl	8004130 <finite>
 80040d8:	b180      	cbz	r0, 80040fc <pow+0xac>
 80040da:	4632      	mov	r2, r6
 80040dc:	463b      	mov	r3, r7
 80040de:	4630      	mov	r0, r6
 80040e0:	4639      	mov	r1, r7
 80040e2:	f7fc fd23 	bl	8000b2c <__aeabi_dcmpun>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d0e2      	beq.n	80040b0 <pow+0x60>
 80040ea:	f001 f821 	bl	8005130 <__errno>
 80040ee:	2321      	movs	r3, #33	; 0x21
 80040f0:	6003      	str	r3, [r0, #0]
 80040f2:	ecbd 8b02 	vpop	{d8}
 80040f6:	ec47 6b10 	vmov	d0, r6, r7
 80040fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040fc:	2200      	movs	r2, #0
 80040fe:	2300      	movs	r3, #0
 8004100:	4630      	mov	r0, r6
 8004102:	4639      	mov	r1, r7
 8004104:	f7fc fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004108:	2800      	cmp	r0, #0
 800410a:	d0f2      	beq.n	80040f2 <pow+0xa2>
 800410c:	eeb0 0a48 	vmov.f32	s0, s16
 8004110:	eef0 0a68 	vmov.f32	s1, s17
 8004114:	f000 f80c 	bl	8004130 <finite>
 8004118:	2800      	cmp	r0, #0
 800411a:	d0ea      	beq.n	80040f2 <pow+0xa2>
 800411c:	ec45 4b10 	vmov	d0, r4, r5
 8004120:	f000 f806 	bl	8004130 <finite>
 8004124:	e7c3      	b.n	80040ae <pow+0x5e>
 8004126:	4f01      	ldr	r7, [pc, #4]	; (800412c <pow+0xdc>)
 8004128:	2600      	movs	r6, #0
 800412a:	e7e2      	b.n	80040f2 <pow+0xa2>
 800412c:	3ff00000 	.word	0x3ff00000

08004130 <finite>:
 8004130:	b082      	sub	sp, #8
 8004132:	ed8d 0b00 	vstr	d0, [sp]
 8004136:	9801      	ldr	r0, [sp, #4]
 8004138:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800413c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004140:	0fc0      	lsrs	r0, r0, #31
 8004142:	b002      	add	sp, #8
 8004144:	4770      	bx	lr
	...

08004148 <__ieee754_pow>:
 8004148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414c:	ed2d 8b06 	vpush	{d8-d10}
 8004150:	b089      	sub	sp, #36	; 0x24
 8004152:	ed8d 1b00 	vstr	d1, [sp]
 8004156:	e9dd 2900 	ldrd	r2, r9, [sp]
 800415a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800415e:	ea58 0102 	orrs.w	r1, r8, r2
 8004162:	ec57 6b10 	vmov	r6, r7, d0
 8004166:	d115      	bne.n	8004194 <__ieee754_pow+0x4c>
 8004168:	19b3      	adds	r3, r6, r6
 800416a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800416e:	4152      	adcs	r2, r2
 8004170:	4299      	cmp	r1, r3
 8004172:	4b89      	ldr	r3, [pc, #548]	; (8004398 <__ieee754_pow+0x250>)
 8004174:	4193      	sbcs	r3, r2
 8004176:	f080 84d1 	bcs.w	8004b1c <__ieee754_pow+0x9d4>
 800417a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800417e:	4630      	mov	r0, r6
 8004180:	4639      	mov	r1, r7
 8004182:	f7fc f883 	bl	800028c <__adddf3>
 8004186:	ec41 0b10 	vmov	d0, r0, r1
 800418a:	b009      	add	sp, #36	; 0x24
 800418c:	ecbd 8b06 	vpop	{d8-d10}
 8004190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004194:	4b81      	ldr	r3, [pc, #516]	; (800439c <__ieee754_pow+0x254>)
 8004196:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800419a:	429c      	cmp	r4, r3
 800419c:	ee10 aa10 	vmov	sl, s0
 80041a0:	463d      	mov	r5, r7
 80041a2:	dc06      	bgt.n	80041b2 <__ieee754_pow+0x6a>
 80041a4:	d101      	bne.n	80041aa <__ieee754_pow+0x62>
 80041a6:	2e00      	cmp	r6, #0
 80041a8:	d1e7      	bne.n	800417a <__ieee754_pow+0x32>
 80041aa:	4598      	cmp	r8, r3
 80041ac:	dc01      	bgt.n	80041b2 <__ieee754_pow+0x6a>
 80041ae:	d10f      	bne.n	80041d0 <__ieee754_pow+0x88>
 80041b0:	b172      	cbz	r2, 80041d0 <__ieee754_pow+0x88>
 80041b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80041b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80041ba:	ea55 050a 	orrs.w	r5, r5, sl
 80041be:	d1dc      	bne.n	800417a <__ieee754_pow+0x32>
 80041c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80041c4:	18db      	adds	r3, r3, r3
 80041c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80041ca:	4152      	adcs	r2, r2
 80041cc:	429d      	cmp	r5, r3
 80041ce:	e7d0      	b.n	8004172 <__ieee754_pow+0x2a>
 80041d0:	2d00      	cmp	r5, #0
 80041d2:	da3b      	bge.n	800424c <__ieee754_pow+0x104>
 80041d4:	4b72      	ldr	r3, [pc, #456]	; (80043a0 <__ieee754_pow+0x258>)
 80041d6:	4598      	cmp	r8, r3
 80041d8:	dc51      	bgt.n	800427e <__ieee754_pow+0x136>
 80041da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80041de:	4598      	cmp	r8, r3
 80041e0:	f340 84ab 	ble.w	8004b3a <__ieee754_pow+0x9f2>
 80041e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80041e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80041ec:	2b14      	cmp	r3, #20
 80041ee:	dd0f      	ble.n	8004210 <__ieee754_pow+0xc8>
 80041f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80041f4:	fa22 f103 	lsr.w	r1, r2, r3
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	4293      	cmp	r3, r2
 80041fe:	f040 849c 	bne.w	8004b3a <__ieee754_pow+0x9f2>
 8004202:	f001 0101 	and.w	r1, r1, #1
 8004206:	f1c1 0302 	rsb	r3, r1, #2
 800420a:	9304      	str	r3, [sp, #16]
 800420c:	b182      	cbz	r2, 8004230 <__ieee754_pow+0xe8>
 800420e:	e05f      	b.n	80042d0 <__ieee754_pow+0x188>
 8004210:	2a00      	cmp	r2, #0
 8004212:	d15b      	bne.n	80042cc <__ieee754_pow+0x184>
 8004214:	f1c3 0314 	rsb	r3, r3, #20
 8004218:	fa48 f103 	asr.w	r1, r8, r3
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	4543      	cmp	r3, r8
 8004222:	f040 8487 	bne.w	8004b34 <__ieee754_pow+0x9ec>
 8004226:	f001 0101 	and.w	r1, r1, #1
 800422a:	f1c1 0302 	rsb	r3, r1, #2
 800422e:	9304      	str	r3, [sp, #16]
 8004230:	4b5c      	ldr	r3, [pc, #368]	; (80043a4 <__ieee754_pow+0x25c>)
 8004232:	4598      	cmp	r8, r3
 8004234:	d132      	bne.n	800429c <__ieee754_pow+0x154>
 8004236:	f1b9 0f00 	cmp.w	r9, #0
 800423a:	f280 8477 	bge.w	8004b2c <__ieee754_pow+0x9e4>
 800423e:	4959      	ldr	r1, [pc, #356]	; (80043a4 <__ieee754_pow+0x25c>)
 8004240:	4632      	mov	r2, r6
 8004242:	463b      	mov	r3, r7
 8004244:	2000      	movs	r0, #0
 8004246:	f7fc fb01 	bl	800084c <__aeabi_ddiv>
 800424a:	e79c      	b.n	8004186 <__ieee754_pow+0x3e>
 800424c:	2300      	movs	r3, #0
 800424e:	9304      	str	r3, [sp, #16]
 8004250:	2a00      	cmp	r2, #0
 8004252:	d13d      	bne.n	80042d0 <__ieee754_pow+0x188>
 8004254:	4b51      	ldr	r3, [pc, #324]	; (800439c <__ieee754_pow+0x254>)
 8004256:	4598      	cmp	r8, r3
 8004258:	d1ea      	bne.n	8004230 <__ieee754_pow+0xe8>
 800425a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800425e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004262:	ea53 030a 	orrs.w	r3, r3, sl
 8004266:	f000 8459 	beq.w	8004b1c <__ieee754_pow+0x9d4>
 800426a:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <__ieee754_pow+0x260>)
 800426c:	429c      	cmp	r4, r3
 800426e:	dd08      	ble.n	8004282 <__ieee754_pow+0x13a>
 8004270:	f1b9 0f00 	cmp.w	r9, #0
 8004274:	f2c0 8456 	blt.w	8004b24 <__ieee754_pow+0x9dc>
 8004278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800427c:	e783      	b.n	8004186 <__ieee754_pow+0x3e>
 800427e:	2302      	movs	r3, #2
 8004280:	e7e5      	b.n	800424e <__ieee754_pow+0x106>
 8004282:	f1b9 0f00 	cmp.w	r9, #0
 8004286:	f04f 0000 	mov.w	r0, #0
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	f6bf af7a 	bge.w	8004186 <__ieee754_pow+0x3e>
 8004292:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004296:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800429a:	e774      	b.n	8004186 <__ieee754_pow+0x3e>
 800429c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80042a0:	d106      	bne.n	80042b0 <__ieee754_pow+0x168>
 80042a2:	4632      	mov	r2, r6
 80042a4:	463b      	mov	r3, r7
 80042a6:	4630      	mov	r0, r6
 80042a8:	4639      	mov	r1, r7
 80042aa:	f7fc f9a5 	bl	80005f8 <__aeabi_dmul>
 80042ae:	e76a      	b.n	8004186 <__ieee754_pow+0x3e>
 80042b0:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <__ieee754_pow+0x264>)
 80042b2:	4599      	cmp	r9, r3
 80042b4:	d10c      	bne.n	80042d0 <__ieee754_pow+0x188>
 80042b6:	2d00      	cmp	r5, #0
 80042b8:	db0a      	blt.n	80042d0 <__ieee754_pow+0x188>
 80042ba:	ec47 6b10 	vmov	d0, r6, r7
 80042be:	b009      	add	sp, #36	; 0x24
 80042c0:	ecbd 8b06 	vpop	{d8-d10}
 80042c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c8:	f000 bd20 	b.w	8004d0c <__ieee754_sqrt>
 80042cc:	2300      	movs	r3, #0
 80042ce:	9304      	str	r3, [sp, #16]
 80042d0:	ec47 6b10 	vmov	d0, r6, r7
 80042d4:	f000 fc92 	bl	8004bfc <fabs>
 80042d8:	ec51 0b10 	vmov	r0, r1, d0
 80042dc:	f1ba 0f00 	cmp.w	sl, #0
 80042e0:	d129      	bne.n	8004336 <__ieee754_pow+0x1ee>
 80042e2:	b124      	cbz	r4, 80042ee <__ieee754_pow+0x1a6>
 80042e4:	4b2f      	ldr	r3, [pc, #188]	; (80043a4 <__ieee754_pow+0x25c>)
 80042e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d123      	bne.n	8004336 <__ieee754_pow+0x1ee>
 80042ee:	f1b9 0f00 	cmp.w	r9, #0
 80042f2:	da05      	bge.n	8004300 <__ieee754_pow+0x1b8>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	2000      	movs	r0, #0
 80042fa:	492a      	ldr	r1, [pc, #168]	; (80043a4 <__ieee754_pow+0x25c>)
 80042fc:	f7fc faa6 	bl	800084c <__aeabi_ddiv>
 8004300:	2d00      	cmp	r5, #0
 8004302:	f6bf af40 	bge.w	8004186 <__ieee754_pow+0x3e>
 8004306:	9b04      	ldr	r3, [sp, #16]
 8004308:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800430c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004310:	431c      	orrs	r4, r3
 8004312:	d108      	bne.n	8004326 <__ieee754_pow+0x1de>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	f7fb ffb4 	bl	8000288 <__aeabi_dsub>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	e78f      	b.n	8004246 <__ieee754_pow+0xfe>
 8004326:	9b04      	ldr	r3, [sp, #16]
 8004328:	2b01      	cmp	r3, #1
 800432a:	f47f af2c 	bne.w	8004186 <__ieee754_pow+0x3e>
 800432e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004332:	4619      	mov	r1, r3
 8004334:	e727      	b.n	8004186 <__ieee754_pow+0x3e>
 8004336:	0feb      	lsrs	r3, r5, #31
 8004338:	3b01      	subs	r3, #1
 800433a:	9306      	str	r3, [sp, #24]
 800433c:	9a06      	ldr	r2, [sp, #24]
 800433e:	9b04      	ldr	r3, [sp, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	d102      	bne.n	800434a <__ieee754_pow+0x202>
 8004344:	4632      	mov	r2, r6
 8004346:	463b      	mov	r3, r7
 8004348:	e7e6      	b.n	8004318 <__ieee754_pow+0x1d0>
 800434a:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <__ieee754_pow+0x268>)
 800434c:	4598      	cmp	r8, r3
 800434e:	f340 80fb 	ble.w	8004548 <__ieee754_pow+0x400>
 8004352:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004356:	4598      	cmp	r8, r3
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <__ieee754_pow+0x260>)
 800435a:	dd0c      	ble.n	8004376 <__ieee754_pow+0x22e>
 800435c:	429c      	cmp	r4, r3
 800435e:	dc0f      	bgt.n	8004380 <__ieee754_pow+0x238>
 8004360:	f1b9 0f00 	cmp.w	r9, #0
 8004364:	da0f      	bge.n	8004386 <__ieee754_pow+0x23e>
 8004366:	2000      	movs	r0, #0
 8004368:	b009      	add	sp, #36	; 0x24
 800436a:	ecbd 8b06 	vpop	{d8-d10}
 800436e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004372:	f000 bc3a 	b.w	8004bea <__math_oflow>
 8004376:	429c      	cmp	r4, r3
 8004378:	dbf2      	blt.n	8004360 <__ieee754_pow+0x218>
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <__ieee754_pow+0x25c>)
 800437c:	429c      	cmp	r4, r3
 800437e:	dd19      	ble.n	80043b4 <__ieee754_pow+0x26c>
 8004380:	f1b9 0f00 	cmp.w	r9, #0
 8004384:	dcef      	bgt.n	8004366 <__ieee754_pow+0x21e>
 8004386:	2000      	movs	r0, #0
 8004388:	b009      	add	sp, #36	; 0x24
 800438a:	ecbd 8b06 	vpop	{d8-d10}
 800438e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004392:	f000 bc21 	b.w	8004bd8 <__math_uflow>
 8004396:	bf00      	nop
 8004398:	fff00000 	.word	0xfff00000
 800439c:	7ff00000 	.word	0x7ff00000
 80043a0:	433fffff 	.word	0x433fffff
 80043a4:	3ff00000 	.word	0x3ff00000
 80043a8:	3fefffff 	.word	0x3fefffff
 80043ac:	3fe00000 	.word	0x3fe00000
 80043b0:	41e00000 	.word	0x41e00000
 80043b4:	4b60      	ldr	r3, [pc, #384]	; (8004538 <__ieee754_pow+0x3f0>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	f7fb ff66 	bl	8000288 <__aeabi_dsub>
 80043bc:	a354      	add	r3, pc, #336	; (adr r3, 8004510 <__ieee754_pow+0x3c8>)
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	4604      	mov	r4, r0
 80043c4:	460d      	mov	r5, r1
 80043c6:	f7fc f917 	bl	80005f8 <__aeabi_dmul>
 80043ca:	a353      	add	r3, pc, #332	; (adr r3, 8004518 <__ieee754_pow+0x3d0>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	4606      	mov	r6, r0
 80043d2:	460f      	mov	r7, r1
 80043d4:	4620      	mov	r0, r4
 80043d6:	4629      	mov	r1, r5
 80043d8:	f7fc f90e 	bl	80005f8 <__aeabi_dmul>
 80043dc:	4b57      	ldr	r3, [pc, #348]	; (800453c <__ieee754_pow+0x3f4>)
 80043de:	4682      	mov	sl, r0
 80043e0:	468b      	mov	fp, r1
 80043e2:	2200      	movs	r2, #0
 80043e4:	4620      	mov	r0, r4
 80043e6:	4629      	mov	r1, r5
 80043e8:	f7fc f906 	bl	80005f8 <__aeabi_dmul>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	a14b      	add	r1, pc, #300	; (adr r1, 8004520 <__ieee754_pow+0x3d8>)
 80043f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043f6:	f7fb ff47 	bl	8000288 <__aeabi_dsub>
 80043fa:	4622      	mov	r2, r4
 80043fc:	462b      	mov	r3, r5
 80043fe:	f7fc f8fb 	bl	80005f8 <__aeabi_dmul>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	2000      	movs	r0, #0
 8004408:	494d      	ldr	r1, [pc, #308]	; (8004540 <__ieee754_pow+0x3f8>)
 800440a:	f7fb ff3d 	bl	8000288 <__aeabi_dsub>
 800440e:	4622      	mov	r2, r4
 8004410:	4680      	mov	r8, r0
 8004412:	4689      	mov	r9, r1
 8004414:	462b      	mov	r3, r5
 8004416:	4620      	mov	r0, r4
 8004418:	4629      	mov	r1, r5
 800441a:	f7fc f8ed 	bl	80005f8 <__aeabi_dmul>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4640      	mov	r0, r8
 8004424:	4649      	mov	r1, r9
 8004426:	f7fc f8e7 	bl	80005f8 <__aeabi_dmul>
 800442a:	a33f      	add	r3, pc, #252	; (adr r3, 8004528 <__ieee754_pow+0x3e0>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f7fc f8e2 	bl	80005f8 <__aeabi_dmul>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4650      	mov	r0, sl
 800443a:	4659      	mov	r1, fp
 800443c:	f7fb ff24 	bl	8000288 <__aeabi_dsub>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4680      	mov	r8, r0
 8004446:	4689      	mov	r9, r1
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	f7fb ff1e 	bl	800028c <__adddf3>
 8004450:	2000      	movs	r0, #0
 8004452:	4632      	mov	r2, r6
 8004454:	463b      	mov	r3, r7
 8004456:	4604      	mov	r4, r0
 8004458:	460d      	mov	r5, r1
 800445a:	f7fb ff15 	bl	8000288 <__aeabi_dsub>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4640      	mov	r0, r8
 8004464:	4649      	mov	r1, r9
 8004466:	f7fb ff0f 	bl	8000288 <__aeabi_dsub>
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	9a06      	ldr	r2, [sp, #24]
 800446e:	3b01      	subs	r3, #1
 8004470:	4313      	orrs	r3, r2
 8004472:	4682      	mov	sl, r0
 8004474:	468b      	mov	fp, r1
 8004476:	f040 81e7 	bne.w	8004848 <__ieee754_pow+0x700>
 800447a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004530 <__ieee754_pow+0x3e8>
 800447e:	eeb0 8a47 	vmov.f32	s16, s14
 8004482:	eef0 8a67 	vmov.f32	s17, s15
 8004486:	e9dd 6700 	ldrd	r6, r7, [sp]
 800448a:	2600      	movs	r6, #0
 800448c:	4632      	mov	r2, r6
 800448e:	463b      	mov	r3, r7
 8004490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004494:	f7fb fef8 	bl	8000288 <__aeabi_dsub>
 8004498:	4622      	mov	r2, r4
 800449a:	462b      	mov	r3, r5
 800449c:	f7fc f8ac 	bl	80005f8 <__aeabi_dmul>
 80044a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044a4:	4680      	mov	r8, r0
 80044a6:	4689      	mov	r9, r1
 80044a8:	4650      	mov	r0, sl
 80044aa:	4659      	mov	r1, fp
 80044ac:	f7fc f8a4 	bl	80005f8 <__aeabi_dmul>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4640      	mov	r0, r8
 80044b6:	4649      	mov	r1, r9
 80044b8:	f7fb fee8 	bl	800028c <__adddf3>
 80044bc:	4632      	mov	r2, r6
 80044be:	463b      	mov	r3, r7
 80044c0:	4680      	mov	r8, r0
 80044c2:	4689      	mov	r9, r1
 80044c4:	4620      	mov	r0, r4
 80044c6:	4629      	mov	r1, r5
 80044c8:	f7fc f896 	bl	80005f8 <__aeabi_dmul>
 80044cc:	460b      	mov	r3, r1
 80044ce:	4604      	mov	r4, r0
 80044d0:	460d      	mov	r5, r1
 80044d2:	4602      	mov	r2, r0
 80044d4:	4649      	mov	r1, r9
 80044d6:	4640      	mov	r0, r8
 80044d8:	f7fb fed8 	bl	800028c <__adddf3>
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <__ieee754_pow+0x3fc>)
 80044de:	4299      	cmp	r1, r3
 80044e0:	ec45 4b19 	vmov	d9, r4, r5
 80044e4:	4606      	mov	r6, r0
 80044e6:	460f      	mov	r7, r1
 80044e8:	468b      	mov	fp, r1
 80044ea:	f340 82f0 	ble.w	8004ace <__ieee754_pow+0x986>
 80044ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80044f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80044f6:	4303      	orrs	r3, r0
 80044f8:	f000 81e4 	beq.w	80048c4 <__ieee754_pow+0x77c>
 80044fc:	ec51 0b18 	vmov	r0, r1, d8
 8004500:	2200      	movs	r2, #0
 8004502:	2300      	movs	r3, #0
 8004504:	f7fc faea 	bl	8000adc <__aeabi_dcmplt>
 8004508:	3800      	subs	r0, #0
 800450a:	bf18      	it	ne
 800450c:	2001      	movne	r0, #1
 800450e:	e72b      	b.n	8004368 <__ieee754_pow+0x220>
 8004510:	60000000 	.word	0x60000000
 8004514:	3ff71547 	.word	0x3ff71547
 8004518:	f85ddf44 	.word	0xf85ddf44
 800451c:	3e54ae0b 	.word	0x3e54ae0b
 8004520:	55555555 	.word	0x55555555
 8004524:	3fd55555 	.word	0x3fd55555
 8004528:	652b82fe 	.word	0x652b82fe
 800452c:	3ff71547 	.word	0x3ff71547
 8004530:	00000000 	.word	0x00000000
 8004534:	bff00000 	.word	0xbff00000
 8004538:	3ff00000 	.word	0x3ff00000
 800453c:	3fd00000 	.word	0x3fd00000
 8004540:	3fe00000 	.word	0x3fe00000
 8004544:	408fffff 	.word	0x408fffff
 8004548:	4bd5      	ldr	r3, [pc, #852]	; (80048a0 <__ieee754_pow+0x758>)
 800454a:	402b      	ands	r3, r5
 800454c:	2200      	movs	r2, #0
 800454e:	b92b      	cbnz	r3, 800455c <__ieee754_pow+0x414>
 8004550:	4bd4      	ldr	r3, [pc, #848]	; (80048a4 <__ieee754_pow+0x75c>)
 8004552:	f7fc f851 	bl	80005f8 <__aeabi_dmul>
 8004556:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800455a:	460c      	mov	r4, r1
 800455c:	1523      	asrs	r3, r4, #20
 800455e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004562:	4413      	add	r3, r2
 8004564:	9305      	str	r3, [sp, #20]
 8004566:	4bd0      	ldr	r3, [pc, #832]	; (80048a8 <__ieee754_pow+0x760>)
 8004568:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800456c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004570:	429c      	cmp	r4, r3
 8004572:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004576:	dd08      	ble.n	800458a <__ieee754_pow+0x442>
 8004578:	4bcc      	ldr	r3, [pc, #816]	; (80048ac <__ieee754_pow+0x764>)
 800457a:	429c      	cmp	r4, r3
 800457c:	f340 8162 	ble.w	8004844 <__ieee754_pow+0x6fc>
 8004580:	9b05      	ldr	r3, [sp, #20]
 8004582:	3301      	adds	r3, #1
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800458a:	2400      	movs	r4, #0
 800458c:	00e3      	lsls	r3, r4, #3
 800458e:	9307      	str	r3, [sp, #28]
 8004590:	4bc7      	ldr	r3, [pc, #796]	; (80048b0 <__ieee754_pow+0x768>)
 8004592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004596:	ed93 7b00 	vldr	d7, [r3]
 800459a:	4629      	mov	r1, r5
 800459c:	ec53 2b17 	vmov	r2, r3, d7
 80045a0:	eeb0 9a47 	vmov.f32	s18, s14
 80045a4:	eef0 9a67 	vmov.f32	s19, s15
 80045a8:	4682      	mov	sl, r0
 80045aa:	f7fb fe6d 	bl	8000288 <__aeabi_dsub>
 80045ae:	4652      	mov	r2, sl
 80045b0:	4606      	mov	r6, r0
 80045b2:	460f      	mov	r7, r1
 80045b4:	462b      	mov	r3, r5
 80045b6:	ec51 0b19 	vmov	r0, r1, d9
 80045ba:	f7fb fe67 	bl	800028c <__adddf3>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	2000      	movs	r0, #0
 80045c4:	49bb      	ldr	r1, [pc, #748]	; (80048b4 <__ieee754_pow+0x76c>)
 80045c6:	f7fc f941 	bl	800084c <__aeabi_ddiv>
 80045ca:	ec41 0b1a 	vmov	d10, r0, r1
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4630      	mov	r0, r6
 80045d4:	4639      	mov	r1, r7
 80045d6:	f7fc f80f 	bl	80005f8 <__aeabi_dmul>
 80045da:	2300      	movs	r3, #0
 80045dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045e0:	9302      	str	r3, [sp, #8]
 80045e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80045e6:	46ab      	mov	fp, r5
 80045e8:	106d      	asrs	r5, r5, #1
 80045ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80045ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80045f2:	ec41 0b18 	vmov	d8, r0, r1
 80045f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80045fa:	2200      	movs	r2, #0
 80045fc:	4640      	mov	r0, r8
 80045fe:	4649      	mov	r1, r9
 8004600:	4614      	mov	r4, r2
 8004602:	461d      	mov	r5, r3
 8004604:	f7fb fff8 	bl	80005f8 <__aeabi_dmul>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4630      	mov	r0, r6
 800460e:	4639      	mov	r1, r7
 8004610:	f7fb fe3a 	bl	8000288 <__aeabi_dsub>
 8004614:	ec53 2b19 	vmov	r2, r3, d9
 8004618:	4606      	mov	r6, r0
 800461a:	460f      	mov	r7, r1
 800461c:	4620      	mov	r0, r4
 800461e:	4629      	mov	r1, r5
 8004620:	f7fb fe32 	bl	8000288 <__aeabi_dsub>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4650      	mov	r0, sl
 800462a:	4659      	mov	r1, fp
 800462c:	f7fb fe2c 	bl	8000288 <__aeabi_dsub>
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	f7fb ffe0 	bl	80005f8 <__aeabi_dmul>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4630      	mov	r0, r6
 800463e:	4639      	mov	r1, r7
 8004640:	f7fb fe22 	bl	8000288 <__aeabi_dsub>
 8004644:	ec53 2b1a 	vmov	r2, r3, d10
 8004648:	f7fb ffd6 	bl	80005f8 <__aeabi_dmul>
 800464c:	ec53 2b18 	vmov	r2, r3, d8
 8004650:	ec41 0b19 	vmov	d9, r0, r1
 8004654:	ec51 0b18 	vmov	r0, r1, d8
 8004658:	f7fb ffce 	bl	80005f8 <__aeabi_dmul>
 800465c:	a37c      	add	r3, pc, #496	; (adr r3, 8004850 <__ieee754_pow+0x708>)
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	4604      	mov	r4, r0
 8004664:	460d      	mov	r5, r1
 8004666:	f7fb ffc7 	bl	80005f8 <__aeabi_dmul>
 800466a:	a37b      	add	r3, pc, #492	; (adr r3, 8004858 <__ieee754_pow+0x710>)
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f7fb fe0c 	bl	800028c <__adddf3>
 8004674:	4622      	mov	r2, r4
 8004676:	462b      	mov	r3, r5
 8004678:	f7fb ffbe 	bl	80005f8 <__aeabi_dmul>
 800467c:	a378      	add	r3, pc, #480	; (adr r3, 8004860 <__ieee754_pow+0x718>)
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f7fb fe03 	bl	800028c <__adddf3>
 8004686:	4622      	mov	r2, r4
 8004688:	462b      	mov	r3, r5
 800468a:	f7fb ffb5 	bl	80005f8 <__aeabi_dmul>
 800468e:	a376      	add	r3, pc, #472	; (adr r3, 8004868 <__ieee754_pow+0x720>)
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f7fb fdfa 	bl	800028c <__adddf3>
 8004698:	4622      	mov	r2, r4
 800469a:	462b      	mov	r3, r5
 800469c:	f7fb ffac 	bl	80005f8 <__aeabi_dmul>
 80046a0:	a373      	add	r3, pc, #460	; (adr r3, 8004870 <__ieee754_pow+0x728>)
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f7fb fdf1 	bl	800028c <__adddf3>
 80046aa:	4622      	mov	r2, r4
 80046ac:	462b      	mov	r3, r5
 80046ae:	f7fb ffa3 	bl	80005f8 <__aeabi_dmul>
 80046b2:	a371      	add	r3, pc, #452	; (adr r3, 8004878 <__ieee754_pow+0x730>)
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f7fb fde8 	bl	800028c <__adddf3>
 80046bc:	4622      	mov	r2, r4
 80046be:	4606      	mov	r6, r0
 80046c0:	460f      	mov	r7, r1
 80046c2:	462b      	mov	r3, r5
 80046c4:	4620      	mov	r0, r4
 80046c6:	4629      	mov	r1, r5
 80046c8:	f7fb ff96 	bl	80005f8 <__aeabi_dmul>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4630      	mov	r0, r6
 80046d2:	4639      	mov	r1, r7
 80046d4:	f7fb ff90 	bl	80005f8 <__aeabi_dmul>
 80046d8:	4642      	mov	r2, r8
 80046da:	4604      	mov	r4, r0
 80046dc:	460d      	mov	r5, r1
 80046de:	464b      	mov	r3, r9
 80046e0:	ec51 0b18 	vmov	r0, r1, d8
 80046e4:	f7fb fdd2 	bl	800028c <__adddf3>
 80046e8:	ec53 2b19 	vmov	r2, r3, d9
 80046ec:	f7fb ff84 	bl	80005f8 <__aeabi_dmul>
 80046f0:	4622      	mov	r2, r4
 80046f2:	462b      	mov	r3, r5
 80046f4:	f7fb fdca 	bl	800028c <__adddf3>
 80046f8:	4642      	mov	r2, r8
 80046fa:	4682      	mov	sl, r0
 80046fc:	468b      	mov	fp, r1
 80046fe:	464b      	mov	r3, r9
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fb ff78 	bl	80005f8 <__aeabi_dmul>
 8004708:	4b6b      	ldr	r3, [pc, #428]	; (80048b8 <__ieee754_pow+0x770>)
 800470a:	2200      	movs	r2, #0
 800470c:	4606      	mov	r6, r0
 800470e:	460f      	mov	r7, r1
 8004710:	f7fb fdbc 	bl	800028c <__adddf3>
 8004714:	4652      	mov	r2, sl
 8004716:	465b      	mov	r3, fp
 8004718:	f7fb fdb8 	bl	800028c <__adddf3>
 800471c:	2000      	movs	r0, #0
 800471e:	4604      	mov	r4, r0
 8004720:	460d      	mov	r5, r1
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4640      	mov	r0, r8
 8004728:	4649      	mov	r1, r9
 800472a:	f7fb ff65 	bl	80005f8 <__aeabi_dmul>
 800472e:	4b62      	ldr	r3, [pc, #392]	; (80048b8 <__ieee754_pow+0x770>)
 8004730:	4680      	mov	r8, r0
 8004732:	4689      	mov	r9, r1
 8004734:	2200      	movs	r2, #0
 8004736:	4620      	mov	r0, r4
 8004738:	4629      	mov	r1, r5
 800473a:	f7fb fda5 	bl	8000288 <__aeabi_dsub>
 800473e:	4632      	mov	r2, r6
 8004740:	463b      	mov	r3, r7
 8004742:	f7fb fda1 	bl	8000288 <__aeabi_dsub>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4650      	mov	r0, sl
 800474c:	4659      	mov	r1, fp
 800474e:	f7fb fd9b 	bl	8000288 <__aeabi_dsub>
 8004752:	ec53 2b18 	vmov	r2, r3, d8
 8004756:	f7fb ff4f 	bl	80005f8 <__aeabi_dmul>
 800475a:	4622      	mov	r2, r4
 800475c:	4606      	mov	r6, r0
 800475e:	460f      	mov	r7, r1
 8004760:	462b      	mov	r3, r5
 8004762:	ec51 0b19 	vmov	r0, r1, d9
 8004766:	f7fb ff47 	bl	80005f8 <__aeabi_dmul>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4630      	mov	r0, r6
 8004770:	4639      	mov	r1, r7
 8004772:	f7fb fd8b 	bl	800028c <__adddf3>
 8004776:	4606      	mov	r6, r0
 8004778:	460f      	mov	r7, r1
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4640      	mov	r0, r8
 8004780:	4649      	mov	r1, r9
 8004782:	f7fb fd83 	bl	800028c <__adddf3>
 8004786:	a33e      	add	r3, pc, #248	; (adr r3, 8004880 <__ieee754_pow+0x738>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	2000      	movs	r0, #0
 800478e:	4604      	mov	r4, r0
 8004790:	460d      	mov	r5, r1
 8004792:	f7fb ff31 	bl	80005f8 <__aeabi_dmul>
 8004796:	4642      	mov	r2, r8
 8004798:	ec41 0b18 	vmov	d8, r0, r1
 800479c:	464b      	mov	r3, r9
 800479e:	4620      	mov	r0, r4
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7fb fd71 	bl	8000288 <__aeabi_dsub>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4630      	mov	r0, r6
 80047ac:	4639      	mov	r1, r7
 80047ae:	f7fb fd6b 	bl	8000288 <__aeabi_dsub>
 80047b2:	a335      	add	r3, pc, #212	; (adr r3, 8004888 <__ieee754_pow+0x740>)
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f7fb ff1e 	bl	80005f8 <__aeabi_dmul>
 80047bc:	a334      	add	r3, pc, #208	; (adr r3, 8004890 <__ieee754_pow+0x748>)
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	4606      	mov	r6, r0
 80047c4:	460f      	mov	r7, r1
 80047c6:	4620      	mov	r0, r4
 80047c8:	4629      	mov	r1, r5
 80047ca:	f7fb ff15 	bl	80005f8 <__aeabi_dmul>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4630      	mov	r0, r6
 80047d4:	4639      	mov	r1, r7
 80047d6:	f7fb fd59 	bl	800028c <__adddf3>
 80047da:	9a07      	ldr	r2, [sp, #28]
 80047dc:	4b37      	ldr	r3, [pc, #220]	; (80048bc <__ieee754_pow+0x774>)
 80047de:	4413      	add	r3, r2
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f7fb fd52 	bl	800028c <__adddf3>
 80047e8:	4682      	mov	sl, r0
 80047ea:	9805      	ldr	r0, [sp, #20]
 80047ec:	468b      	mov	fp, r1
 80047ee:	f7fb fe99 	bl	8000524 <__aeabi_i2d>
 80047f2:	9a07      	ldr	r2, [sp, #28]
 80047f4:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <__ieee754_pow+0x778>)
 80047f6:	4413      	add	r3, r2
 80047f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047fc:	4606      	mov	r6, r0
 80047fe:	460f      	mov	r7, r1
 8004800:	4652      	mov	r2, sl
 8004802:	465b      	mov	r3, fp
 8004804:	ec51 0b18 	vmov	r0, r1, d8
 8004808:	f7fb fd40 	bl	800028c <__adddf3>
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	f7fb fd3c 	bl	800028c <__adddf3>
 8004814:	4632      	mov	r2, r6
 8004816:	463b      	mov	r3, r7
 8004818:	f7fb fd38 	bl	800028c <__adddf3>
 800481c:	2000      	movs	r0, #0
 800481e:	4632      	mov	r2, r6
 8004820:	463b      	mov	r3, r7
 8004822:	4604      	mov	r4, r0
 8004824:	460d      	mov	r5, r1
 8004826:	f7fb fd2f 	bl	8000288 <__aeabi_dsub>
 800482a:	4642      	mov	r2, r8
 800482c:	464b      	mov	r3, r9
 800482e:	f7fb fd2b 	bl	8000288 <__aeabi_dsub>
 8004832:	ec53 2b18 	vmov	r2, r3, d8
 8004836:	f7fb fd27 	bl	8000288 <__aeabi_dsub>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4650      	mov	r0, sl
 8004840:	4659      	mov	r1, fp
 8004842:	e610      	b.n	8004466 <__ieee754_pow+0x31e>
 8004844:	2401      	movs	r4, #1
 8004846:	e6a1      	b.n	800458c <__ieee754_pow+0x444>
 8004848:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004898 <__ieee754_pow+0x750>
 800484c:	e617      	b.n	800447e <__ieee754_pow+0x336>
 800484e:	bf00      	nop
 8004850:	4a454eef 	.word	0x4a454eef
 8004854:	3fca7e28 	.word	0x3fca7e28
 8004858:	93c9db65 	.word	0x93c9db65
 800485c:	3fcd864a 	.word	0x3fcd864a
 8004860:	a91d4101 	.word	0xa91d4101
 8004864:	3fd17460 	.word	0x3fd17460
 8004868:	518f264d 	.word	0x518f264d
 800486c:	3fd55555 	.word	0x3fd55555
 8004870:	db6fabff 	.word	0xdb6fabff
 8004874:	3fdb6db6 	.word	0x3fdb6db6
 8004878:	33333303 	.word	0x33333303
 800487c:	3fe33333 	.word	0x3fe33333
 8004880:	e0000000 	.word	0xe0000000
 8004884:	3feec709 	.word	0x3feec709
 8004888:	dc3a03fd 	.word	0xdc3a03fd
 800488c:	3feec709 	.word	0x3feec709
 8004890:	145b01f5 	.word	0x145b01f5
 8004894:	be3e2fe0 	.word	0xbe3e2fe0
 8004898:	00000000 	.word	0x00000000
 800489c:	3ff00000 	.word	0x3ff00000
 80048a0:	7ff00000 	.word	0x7ff00000
 80048a4:	43400000 	.word	0x43400000
 80048a8:	0003988e 	.word	0x0003988e
 80048ac:	000bb679 	.word	0x000bb679
 80048b0:	08005e60 	.word	0x08005e60
 80048b4:	3ff00000 	.word	0x3ff00000
 80048b8:	40080000 	.word	0x40080000
 80048bc:	08005e80 	.word	0x08005e80
 80048c0:	08005e70 	.word	0x08005e70
 80048c4:	a3b3      	add	r3, pc, #716	; (adr r3, 8004b94 <__ieee754_pow+0xa4c>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	4640      	mov	r0, r8
 80048cc:	4649      	mov	r1, r9
 80048ce:	f7fb fcdd 	bl	800028c <__adddf3>
 80048d2:	4622      	mov	r2, r4
 80048d4:	ec41 0b1a 	vmov	d10, r0, r1
 80048d8:	462b      	mov	r3, r5
 80048da:	4630      	mov	r0, r6
 80048dc:	4639      	mov	r1, r7
 80048de:	f7fb fcd3 	bl	8000288 <__aeabi_dsub>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	ec51 0b1a 	vmov	r0, r1, d10
 80048ea:	f7fc f915 	bl	8000b18 <__aeabi_dcmpgt>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	f47f ae04 	bne.w	80044fc <__ieee754_pow+0x3b4>
 80048f4:	4aa2      	ldr	r2, [pc, #648]	; (8004b80 <__ieee754_pow+0xa38>)
 80048f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80048fa:	4293      	cmp	r3, r2
 80048fc:	f340 8107 	ble.w	8004b0e <__ieee754_pow+0x9c6>
 8004900:	151b      	asrs	r3, r3, #20
 8004902:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004906:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800490a:	fa4a fa03 	asr.w	sl, sl, r3
 800490e:	44da      	add	sl, fp
 8004910:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004914:	489b      	ldr	r0, [pc, #620]	; (8004b84 <__ieee754_pow+0xa3c>)
 8004916:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800491a:	4108      	asrs	r0, r1
 800491c:	ea00 030a 	and.w	r3, r0, sl
 8004920:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004924:	f1c1 0114 	rsb	r1, r1, #20
 8004928:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800492c:	fa4a fa01 	asr.w	sl, sl, r1
 8004930:	f1bb 0f00 	cmp.w	fp, #0
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	4620      	mov	r0, r4
 800493a:	4629      	mov	r1, r5
 800493c:	bfb8      	it	lt
 800493e:	f1ca 0a00 	rsblt	sl, sl, #0
 8004942:	f7fb fca1 	bl	8000288 <__aeabi_dsub>
 8004946:	ec41 0b19 	vmov	d9, r0, r1
 800494a:	4642      	mov	r2, r8
 800494c:	464b      	mov	r3, r9
 800494e:	ec51 0b19 	vmov	r0, r1, d9
 8004952:	f7fb fc9b 	bl	800028c <__adddf3>
 8004956:	a37a      	add	r3, pc, #488	; (adr r3, 8004b40 <__ieee754_pow+0x9f8>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	2000      	movs	r0, #0
 800495e:	4604      	mov	r4, r0
 8004960:	460d      	mov	r5, r1
 8004962:	f7fb fe49 	bl	80005f8 <__aeabi_dmul>
 8004966:	ec53 2b19 	vmov	r2, r3, d9
 800496a:	4606      	mov	r6, r0
 800496c:	460f      	mov	r7, r1
 800496e:	4620      	mov	r0, r4
 8004970:	4629      	mov	r1, r5
 8004972:	f7fb fc89 	bl	8000288 <__aeabi_dsub>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4640      	mov	r0, r8
 800497c:	4649      	mov	r1, r9
 800497e:	f7fb fc83 	bl	8000288 <__aeabi_dsub>
 8004982:	a371      	add	r3, pc, #452	; (adr r3, 8004b48 <__ieee754_pow+0xa00>)
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f7fb fe36 	bl	80005f8 <__aeabi_dmul>
 800498c:	a370      	add	r3, pc, #448	; (adr r3, 8004b50 <__ieee754_pow+0xa08>)
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	4680      	mov	r8, r0
 8004994:	4689      	mov	r9, r1
 8004996:	4620      	mov	r0, r4
 8004998:	4629      	mov	r1, r5
 800499a:	f7fb fe2d 	bl	80005f8 <__aeabi_dmul>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4640      	mov	r0, r8
 80049a4:	4649      	mov	r1, r9
 80049a6:	f7fb fc71 	bl	800028c <__adddf3>
 80049aa:	4604      	mov	r4, r0
 80049ac:	460d      	mov	r5, r1
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4630      	mov	r0, r6
 80049b4:	4639      	mov	r1, r7
 80049b6:	f7fb fc69 	bl	800028c <__adddf3>
 80049ba:	4632      	mov	r2, r6
 80049bc:	463b      	mov	r3, r7
 80049be:	4680      	mov	r8, r0
 80049c0:	4689      	mov	r9, r1
 80049c2:	f7fb fc61 	bl	8000288 <__aeabi_dsub>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4620      	mov	r0, r4
 80049cc:	4629      	mov	r1, r5
 80049ce:	f7fb fc5b 	bl	8000288 <__aeabi_dsub>
 80049d2:	4642      	mov	r2, r8
 80049d4:	4606      	mov	r6, r0
 80049d6:	460f      	mov	r7, r1
 80049d8:	464b      	mov	r3, r9
 80049da:	4640      	mov	r0, r8
 80049dc:	4649      	mov	r1, r9
 80049de:	f7fb fe0b 	bl	80005f8 <__aeabi_dmul>
 80049e2:	a35d      	add	r3, pc, #372	; (adr r3, 8004b58 <__ieee754_pow+0xa10>)
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	4604      	mov	r4, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	f7fb fe04 	bl	80005f8 <__aeabi_dmul>
 80049f0:	a35b      	add	r3, pc, #364	; (adr r3, 8004b60 <__ieee754_pow+0xa18>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f7fb fc47 	bl	8000288 <__aeabi_dsub>
 80049fa:	4622      	mov	r2, r4
 80049fc:	462b      	mov	r3, r5
 80049fe:	f7fb fdfb 	bl	80005f8 <__aeabi_dmul>
 8004a02:	a359      	add	r3, pc, #356	; (adr r3, 8004b68 <__ieee754_pow+0xa20>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f7fb fc40 	bl	800028c <__adddf3>
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	462b      	mov	r3, r5
 8004a10:	f7fb fdf2 	bl	80005f8 <__aeabi_dmul>
 8004a14:	a356      	add	r3, pc, #344	; (adr r3, 8004b70 <__ieee754_pow+0xa28>)
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f7fb fc35 	bl	8000288 <__aeabi_dsub>
 8004a1e:	4622      	mov	r2, r4
 8004a20:	462b      	mov	r3, r5
 8004a22:	f7fb fde9 	bl	80005f8 <__aeabi_dmul>
 8004a26:	a354      	add	r3, pc, #336	; (adr r3, 8004b78 <__ieee754_pow+0xa30>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb fc2e 	bl	800028c <__adddf3>
 8004a30:	4622      	mov	r2, r4
 8004a32:	462b      	mov	r3, r5
 8004a34:	f7fb fde0 	bl	80005f8 <__aeabi_dmul>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	4649      	mov	r1, r9
 8004a40:	f7fb fc22 	bl	8000288 <__aeabi_dsub>
 8004a44:	4604      	mov	r4, r0
 8004a46:	460d      	mov	r5, r1
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	4649      	mov	r1, r9
 8004a50:	f7fb fdd2 	bl	80005f8 <__aeabi_dmul>
 8004a54:	2200      	movs	r2, #0
 8004a56:	ec41 0b19 	vmov	d9, r0, r1
 8004a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a5e:	4620      	mov	r0, r4
 8004a60:	4629      	mov	r1, r5
 8004a62:	f7fb fc11 	bl	8000288 <__aeabi_dsub>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	ec51 0b19 	vmov	r0, r1, d9
 8004a6e:	f7fb feed 	bl	800084c <__aeabi_ddiv>
 8004a72:	4632      	mov	r2, r6
 8004a74:	4604      	mov	r4, r0
 8004a76:	460d      	mov	r5, r1
 8004a78:	463b      	mov	r3, r7
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	f7fb fdbb 	bl	80005f8 <__aeabi_dmul>
 8004a82:	4632      	mov	r2, r6
 8004a84:	463b      	mov	r3, r7
 8004a86:	f7fb fc01 	bl	800028c <__adddf3>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4629      	mov	r1, r5
 8004a92:	f7fb fbf9 	bl	8000288 <__aeabi_dsub>
 8004a96:	4642      	mov	r2, r8
 8004a98:	464b      	mov	r3, r9
 8004a9a:	f7fb fbf5 	bl	8000288 <__aeabi_dsub>
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4939      	ldr	r1, [pc, #228]	; (8004b88 <__ieee754_pow+0xa40>)
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f7fb fbef 	bl	8000288 <__aeabi_dsub>
 8004aaa:	ec41 0b10 	vmov	d0, r0, r1
 8004aae:	ee10 3a90 	vmov	r3, s1
 8004ab2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aba:	da2b      	bge.n	8004b14 <__ieee754_pow+0x9cc>
 8004abc:	4650      	mov	r0, sl
 8004abe:	f000 f8a7 	bl	8004c10 <scalbn>
 8004ac2:	ec51 0b10 	vmov	r0, r1, d0
 8004ac6:	ec53 2b18 	vmov	r2, r3, d8
 8004aca:	f7ff bbee 	b.w	80042aa <__ieee754_pow+0x162>
 8004ace:	4b2f      	ldr	r3, [pc, #188]	; (8004b8c <__ieee754_pow+0xa44>)
 8004ad0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004ad4:	429e      	cmp	r6, r3
 8004ad6:	f77f af0d 	ble.w	80048f4 <__ieee754_pow+0x7ac>
 8004ada:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <__ieee754_pow+0xa48>)
 8004adc:	440b      	add	r3, r1
 8004ade:	4303      	orrs	r3, r0
 8004ae0:	d009      	beq.n	8004af6 <__ieee754_pow+0x9ae>
 8004ae2:	ec51 0b18 	vmov	r0, r1, d8
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f7fb fff7 	bl	8000adc <__aeabi_dcmplt>
 8004aee:	3800      	subs	r0, #0
 8004af0:	bf18      	it	ne
 8004af2:	2001      	movne	r0, #1
 8004af4:	e448      	b.n	8004388 <__ieee754_pow+0x240>
 8004af6:	4622      	mov	r2, r4
 8004af8:	462b      	mov	r3, r5
 8004afa:	f7fb fbc5 	bl	8000288 <__aeabi_dsub>
 8004afe:	4642      	mov	r2, r8
 8004b00:	464b      	mov	r3, r9
 8004b02:	f7fb ffff 	bl	8000b04 <__aeabi_dcmpge>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	f43f aef4 	beq.w	80048f4 <__ieee754_pow+0x7ac>
 8004b0c:	e7e9      	b.n	8004ae2 <__ieee754_pow+0x99a>
 8004b0e:	f04f 0a00 	mov.w	sl, #0
 8004b12:	e71a      	b.n	800494a <__ieee754_pow+0x802>
 8004b14:	ec51 0b10 	vmov	r0, r1, d0
 8004b18:	4619      	mov	r1, r3
 8004b1a:	e7d4      	b.n	8004ac6 <__ieee754_pow+0x97e>
 8004b1c:	491a      	ldr	r1, [pc, #104]	; (8004b88 <__ieee754_pow+0xa40>)
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f7ff bb31 	b.w	8004186 <__ieee754_pow+0x3e>
 8004b24:	2000      	movs	r0, #0
 8004b26:	2100      	movs	r1, #0
 8004b28:	f7ff bb2d 	b.w	8004186 <__ieee754_pow+0x3e>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	4639      	mov	r1, r7
 8004b30:	f7ff bb29 	b.w	8004186 <__ieee754_pow+0x3e>
 8004b34:	9204      	str	r2, [sp, #16]
 8004b36:	f7ff bb7b 	b.w	8004230 <__ieee754_pow+0xe8>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f7ff bb65 	b.w	800420a <__ieee754_pow+0xc2>
 8004b40:	00000000 	.word	0x00000000
 8004b44:	3fe62e43 	.word	0x3fe62e43
 8004b48:	fefa39ef 	.word	0xfefa39ef
 8004b4c:	3fe62e42 	.word	0x3fe62e42
 8004b50:	0ca86c39 	.word	0x0ca86c39
 8004b54:	be205c61 	.word	0xbe205c61
 8004b58:	72bea4d0 	.word	0x72bea4d0
 8004b5c:	3e663769 	.word	0x3e663769
 8004b60:	c5d26bf1 	.word	0xc5d26bf1
 8004b64:	3ebbbd41 	.word	0x3ebbbd41
 8004b68:	af25de2c 	.word	0xaf25de2c
 8004b6c:	3f11566a 	.word	0x3f11566a
 8004b70:	16bebd93 	.word	0x16bebd93
 8004b74:	3f66c16c 	.word	0x3f66c16c
 8004b78:	5555553e 	.word	0x5555553e
 8004b7c:	3fc55555 	.word	0x3fc55555
 8004b80:	3fe00000 	.word	0x3fe00000
 8004b84:	fff00000 	.word	0xfff00000
 8004b88:	3ff00000 	.word	0x3ff00000
 8004b8c:	4090cbff 	.word	0x4090cbff
 8004b90:	3f6f3400 	.word	0x3f6f3400
 8004b94:	652b82fe 	.word	0x652b82fe
 8004b98:	3c971547 	.word	0x3c971547

08004b9c <with_errno>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	460d      	mov	r5, r1
 8004ba2:	4616      	mov	r6, r2
 8004ba4:	f000 fac4 	bl	8005130 <__errno>
 8004ba8:	4629      	mov	r1, r5
 8004baa:	6006      	str	r6, [r0, #0]
 8004bac:	4620      	mov	r0, r4
 8004bae:	bd70      	pop	{r4, r5, r6, pc}

08004bb0 <xflow>:
 8004bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bb2:	4614      	mov	r4, r2
 8004bb4:	461d      	mov	r5, r3
 8004bb6:	b108      	cbz	r0, 8004bbc <xflow+0xc>
 8004bb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004bbc:	e9cd 2300 	strd	r2, r3, [sp]
 8004bc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	f7fb fd16 	bl	80005f8 <__aeabi_dmul>
 8004bcc:	2222      	movs	r2, #34	; 0x22
 8004bce:	b003      	add	sp, #12
 8004bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bd4:	f7ff bfe2 	b.w	8004b9c <with_errno>

08004bd8 <__math_uflow>:
 8004bd8:	b508      	push	{r3, lr}
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004be0:	f7ff ffe6 	bl	8004bb0 <xflow>
 8004be4:	ec41 0b10 	vmov	d0, r0, r1
 8004be8:	bd08      	pop	{r3, pc}

08004bea <__math_oflow>:
 8004bea:	b508      	push	{r3, lr}
 8004bec:	2200      	movs	r2, #0
 8004bee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004bf2:	f7ff ffdd 	bl	8004bb0 <xflow>
 8004bf6:	ec41 0b10 	vmov	d0, r0, r1
 8004bfa:	bd08      	pop	{r3, pc}

08004bfc <fabs>:
 8004bfc:	ec51 0b10 	vmov	r0, r1, d0
 8004c00:	ee10 2a10 	vmov	r2, s0
 8004c04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c08:	ec43 2b10 	vmov	d0, r2, r3
 8004c0c:	4770      	bx	lr
	...

08004c10 <scalbn>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	ec55 4b10 	vmov	r4, r5, d0
 8004c16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	b999      	cbnz	r1, 8004c48 <scalbn+0x38>
 8004c20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004c24:	4323      	orrs	r3, r4
 8004c26:	d03f      	beq.n	8004ca8 <scalbn+0x98>
 8004c28:	4b35      	ldr	r3, [pc, #212]	; (8004d00 <scalbn+0xf0>)
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	ee10 0a10 	vmov	r0, s0
 8004c30:	2200      	movs	r2, #0
 8004c32:	f7fb fce1 	bl	80005f8 <__aeabi_dmul>
 8004c36:	4b33      	ldr	r3, [pc, #204]	; (8004d04 <scalbn+0xf4>)
 8004c38:	429e      	cmp	r6, r3
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	460d      	mov	r5, r1
 8004c3e:	da10      	bge.n	8004c62 <scalbn+0x52>
 8004c40:	a327      	add	r3, pc, #156	; (adr r3, 8004ce0 <scalbn+0xd0>)
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	e01f      	b.n	8004c88 <scalbn+0x78>
 8004c48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c4c:	4291      	cmp	r1, r2
 8004c4e:	d10c      	bne.n	8004c6a <scalbn+0x5a>
 8004c50:	ee10 2a10 	vmov	r2, s0
 8004c54:	4620      	mov	r0, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	f7fb fb18 	bl	800028c <__adddf3>
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	460d      	mov	r5, r1
 8004c60:	e022      	b.n	8004ca8 <scalbn+0x98>
 8004c62:	460b      	mov	r3, r1
 8004c64:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004c68:	3936      	subs	r1, #54	; 0x36
 8004c6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004c6e:	4296      	cmp	r6, r2
 8004c70:	dd0d      	ble.n	8004c8e <scalbn+0x7e>
 8004c72:	2d00      	cmp	r5, #0
 8004c74:	a11c      	add	r1, pc, #112	; (adr r1, 8004ce8 <scalbn+0xd8>)
 8004c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c7a:	da02      	bge.n	8004c82 <scalbn+0x72>
 8004c7c:	a11c      	add	r1, pc, #112	; (adr r1, 8004cf0 <scalbn+0xe0>)
 8004c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c82:	a319      	add	r3, pc, #100	; (adr r3, 8004ce8 <scalbn+0xd8>)
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f7fb fcb6 	bl	80005f8 <__aeabi_dmul>
 8004c8c:	e7e6      	b.n	8004c5c <scalbn+0x4c>
 8004c8e:	1872      	adds	r2, r6, r1
 8004c90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004c94:	428a      	cmp	r2, r1
 8004c96:	dcec      	bgt.n	8004c72 <scalbn+0x62>
 8004c98:	2a00      	cmp	r2, #0
 8004c9a:	dd08      	ble.n	8004cae <scalbn+0x9e>
 8004c9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ca0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ca4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ca8:	ec45 4b10 	vmov	d0, r4, r5
 8004cac:	bd70      	pop	{r4, r5, r6, pc}
 8004cae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004cb2:	da08      	bge.n	8004cc6 <scalbn+0xb6>
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	a10a      	add	r1, pc, #40	; (adr r1, 8004ce0 <scalbn+0xd0>)
 8004cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cbc:	dac0      	bge.n	8004c40 <scalbn+0x30>
 8004cbe:	a10e      	add	r1, pc, #56	; (adr r1, 8004cf8 <scalbn+0xe8>)
 8004cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cc4:	e7bc      	b.n	8004c40 <scalbn+0x30>
 8004cc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cca:	3236      	adds	r2, #54	; 0x36
 8004ccc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <scalbn+0xf8>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	e7d5      	b.n	8004c88 <scalbn+0x78>
 8004cdc:	f3af 8000 	nop.w
 8004ce0:	c2f8f359 	.word	0xc2f8f359
 8004ce4:	01a56e1f 	.word	0x01a56e1f
 8004ce8:	8800759c 	.word	0x8800759c
 8004cec:	7e37e43c 	.word	0x7e37e43c
 8004cf0:	8800759c 	.word	0x8800759c
 8004cf4:	fe37e43c 	.word	0xfe37e43c
 8004cf8:	c2f8f359 	.word	0xc2f8f359
 8004cfc:	81a56e1f 	.word	0x81a56e1f
 8004d00:	43500000 	.word	0x43500000
 8004d04:	ffff3cb0 	.word	0xffff3cb0
 8004d08:	3c900000 	.word	0x3c900000

08004d0c <__ieee754_sqrt>:
 8004d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	ec55 4b10 	vmov	r4, r5, d0
 8004d14:	4e67      	ldr	r6, [pc, #412]	; (8004eb4 <__ieee754_sqrt+0x1a8>)
 8004d16:	43ae      	bics	r6, r5
 8004d18:	ee10 0a10 	vmov	r0, s0
 8004d1c:	ee10 2a10 	vmov	r2, s0
 8004d20:	4629      	mov	r1, r5
 8004d22:	462b      	mov	r3, r5
 8004d24:	d10d      	bne.n	8004d42 <__ieee754_sqrt+0x36>
 8004d26:	f7fb fc67 	bl	80005f8 <__aeabi_dmul>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4620      	mov	r0, r4
 8004d30:	4629      	mov	r1, r5
 8004d32:	f7fb faab 	bl	800028c <__adddf3>
 8004d36:	4604      	mov	r4, r0
 8004d38:	460d      	mov	r5, r1
 8004d3a:	ec45 4b10 	vmov	d0, r4, r5
 8004d3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	dc0b      	bgt.n	8004d5e <__ieee754_sqrt+0x52>
 8004d46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004d4a:	4326      	orrs	r6, r4
 8004d4c:	d0f5      	beq.n	8004d3a <__ieee754_sqrt+0x2e>
 8004d4e:	b135      	cbz	r5, 8004d5e <__ieee754_sqrt+0x52>
 8004d50:	f7fb fa9a 	bl	8000288 <__aeabi_dsub>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	f7fb fd78 	bl	800084c <__aeabi_ddiv>
 8004d5c:	e7eb      	b.n	8004d36 <__ieee754_sqrt+0x2a>
 8004d5e:	1509      	asrs	r1, r1, #20
 8004d60:	f000 808d 	beq.w	8004e7e <__ieee754_sqrt+0x172>
 8004d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d68:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d70:	07c9      	lsls	r1, r1, #31
 8004d72:	bf5c      	itt	pl
 8004d74:	005b      	lslpl	r3, r3, #1
 8004d76:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004d7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d7e:	bf58      	it	pl
 8004d80:	0052      	lslpl	r2, r2, #1
 8004d82:	2500      	movs	r5, #0
 8004d84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004d88:	1076      	asrs	r6, r6, #1
 8004d8a:	0052      	lsls	r2, r2, #1
 8004d8c:	f04f 0e16 	mov.w	lr, #22
 8004d90:	46ac      	mov	ip, r5
 8004d92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d96:	eb0c 0001 	add.w	r0, ip, r1
 8004d9a:	4298      	cmp	r0, r3
 8004d9c:	bfde      	ittt	le
 8004d9e:	1a1b      	suble	r3, r3, r0
 8004da0:	eb00 0c01 	addle.w	ip, r0, r1
 8004da4:	186d      	addle	r5, r5, r1
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	f1be 0e01 	subs.w	lr, lr, #1
 8004dac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004db0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004db4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004db8:	d1ed      	bne.n	8004d96 <__ieee754_sqrt+0x8a>
 8004dba:	4674      	mov	r4, lr
 8004dbc:	2720      	movs	r7, #32
 8004dbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004dc2:	4563      	cmp	r3, ip
 8004dc4:	eb01 000e 	add.w	r0, r1, lr
 8004dc8:	dc02      	bgt.n	8004dd0 <__ieee754_sqrt+0xc4>
 8004dca:	d113      	bne.n	8004df4 <__ieee754_sqrt+0xe8>
 8004dcc:	4290      	cmp	r0, r2
 8004dce:	d811      	bhi.n	8004df4 <__ieee754_sqrt+0xe8>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	eb00 0e01 	add.w	lr, r0, r1
 8004dd6:	da57      	bge.n	8004e88 <__ieee754_sqrt+0x17c>
 8004dd8:	f1be 0f00 	cmp.w	lr, #0
 8004ddc:	db54      	blt.n	8004e88 <__ieee754_sqrt+0x17c>
 8004dde:	f10c 0801 	add.w	r8, ip, #1
 8004de2:	eba3 030c 	sub.w	r3, r3, ip
 8004de6:	4290      	cmp	r0, r2
 8004de8:	bf88      	it	hi
 8004dea:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8004dee:	1a12      	subs	r2, r2, r0
 8004df0:	440c      	add	r4, r1
 8004df2:	46c4      	mov	ip, r8
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	3f01      	subs	r7, #1
 8004df8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004dfc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004e00:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004e04:	d1dd      	bne.n	8004dc2 <__ieee754_sqrt+0xb6>
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d01b      	beq.n	8004e42 <__ieee754_sqrt+0x136>
 8004e0a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004eb8 <__ieee754_sqrt+0x1ac>
 8004e0e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004ebc <__ieee754_sqrt+0x1b0>
 8004e12:	e9da 0100 	ldrd	r0, r1, [sl]
 8004e16:	e9db 2300 	ldrd	r2, r3, [fp]
 8004e1a:	f7fb fa35 	bl	8000288 <__aeabi_dsub>
 8004e1e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4640      	mov	r0, r8
 8004e28:	4649      	mov	r1, r9
 8004e2a:	f7fb fe61 	bl	8000af0 <__aeabi_dcmple>
 8004e2e:	b140      	cbz	r0, 8004e42 <__ieee754_sqrt+0x136>
 8004e30:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004e34:	e9da 0100 	ldrd	r0, r1, [sl]
 8004e38:	e9db 2300 	ldrd	r2, r3, [fp]
 8004e3c:	d126      	bne.n	8004e8c <__ieee754_sqrt+0x180>
 8004e3e:	3501      	adds	r5, #1
 8004e40:	463c      	mov	r4, r7
 8004e42:	106a      	asrs	r2, r5, #1
 8004e44:	0863      	lsrs	r3, r4, #1
 8004e46:	07e9      	lsls	r1, r5, #31
 8004e48:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004e4c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004e50:	bf48      	it	mi
 8004e52:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004e56:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004e5a:	461c      	mov	r4, r3
 8004e5c:	e76d      	b.n	8004d3a <__ieee754_sqrt+0x2e>
 8004e5e:	0ad3      	lsrs	r3, r2, #11
 8004e60:	3815      	subs	r0, #21
 8004e62:	0552      	lsls	r2, r2, #21
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0fa      	beq.n	8004e5e <__ieee754_sqrt+0x152>
 8004e68:	02dc      	lsls	r4, r3, #11
 8004e6a:	d50a      	bpl.n	8004e82 <__ieee754_sqrt+0x176>
 8004e6c:	f1c1 0420 	rsb	r4, r1, #32
 8004e70:	fa22 f404 	lsr.w	r4, r2, r4
 8004e74:	1e4d      	subs	r5, r1, #1
 8004e76:	408a      	lsls	r2, r1
 8004e78:	4323      	orrs	r3, r4
 8004e7a:	1b41      	subs	r1, r0, r5
 8004e7c:	e772      	b.n	8004d64 <__ieee754_sqrt+0x58>
 8004e7e:	4608      	mov	r0, r1
 8004e80:	e7f0      	b.n	8004e64 <__ieee754_sqrt+0x158>
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	3101      	adds	r1, #1
 8004e86:	e7ef      	b.n	8004e68 <__ieee754_sqrt+0x15c>
 8004e88:	46e0      	mov	r8, ip
 8004e8a:	e7aa      	b.n	8004de2 <__ieee754_sqrt+0xd6>
 8004e8c:	f7fb f9fe 	bl	800028c <__adddf3>
 8004e90:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	f7fb fe1e 	bl	8000adc <__aeabi_dcmplt>
 8004ea0:	b120      	cbz	r0, 8004eac <__ieee754_sqrt+0x1a0>
 8004ea2:	1ca0      	adds	r0, r4, #2
 8004ea4:	bf08      	it	eq
 8004ea6:	3501      	addeq	r5, #1
 8004ea8:	3402      	adds	r4, #2
 8004eaa:	e7ca      	b.n	8004e42 <__ieee754_sqrt+0x136>
 8004eac:	3401      	adds	r4, #1
 8004eae:	f024 0401 	bic.w	r4, r4, #1
 8004eb2:	e7c6      	b.n	8004e42 <__ieee754_sqrt+0x136>
 8004eb4:	7ff00000 	.word	0x7ff00000
 8004eb8:	20000010 	.word	0x20000010
 8004ebc:	20000018 	.word	0x20000018

08004ec0 <std>:
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	b510      	push	{r4, lr}
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8004eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ece:	6083      	str	r3, [r0, #8]
 8004ed0:	8181      	strh	r1, [r0, #12]
 8004ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ed4:	81c2      	strh	r2, [r0, #14]
 8004ed6:	6183      	str	r3, [r0, #24]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	2208      	movs	r2, #8
 8004edc:	305c      	adds	r0, #92	; 0x5c
 8004ede:	f000 f91f 	bl	8005120 <memset>
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <std+0x58>)
 8004ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <std+0x5c>)
 8004ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004eea:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <std+0x60>)
 8004eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <std+0x64>)
 8004ef0:	6323      	str	r3, [r4, #48]	; 0x30
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <std+0x68>)
 8004ef4:	6224      	str	r4, [r4, #32]
 8004ef6:	429c      	cmp	r4, r3
 8004ef8:	d006      	beq.n	8004f08 <std+0x48>
 8004efa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004efe:	4294      	cmp	r4, r2
 8004f00:	d002      	beq.n	8004f08 <std+0x48>
 8004f02:	33d0      	adds	r3, #208	; 0xd0
 8004f04:	429c      	cmp	r4, r3
 8004f06:	d105      	bne.n	8004f14 <std+0x54>
 8004f08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f10:	f000 b938 	b.w	8005184 <__retarget_lock_init_recursive>
 8004f14:	bd10      	pop	{r4, pc}
 8004f16:	bf00      	nop
 8004f18:	080059e5 	.word	0x080059e5
 8004f1c:	08005a07 	.word	0x08005a07
 8004f20:	08005a3f 	.word	0x08005a3f
 8004f24:	08005a63 	.word	0x08005a63
 8004f28:	200001d4 	.word	0x200001d4

08004f2c <stdio_exit_handler>:
 8004f2c:	4a02      	ldr	r2, [pc, #8]	; (8004f38 <stdio_exit_handler+0xc>)
 8004f2e:	4903      	ldr	r1, [pc, #12]	; (8004f3c <stdio_exit_handler+0x10>)
 8004f30:	4803      	ldr	r0, [pc, #12]	; (8004f40 <stdio_exit_handler+0x14>)
 8004f32:	f000 b869 	b.w	8005008 <_fwalk_sglue>
 8004f36:	bf00      	nop
 8004f38:	20000020 	.word	0x20000020
 8004f3c:	0800597d 	.word	0x0800597d
 8004f40:	2000002c 	.word	0x2000002c

08004f44 <cleanup_stdio>:
 8004f44:	6841      	ldr	r1, [r0, #4]
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <cleanup_stdio+0x34>)
 8004f48:	4299      	cmp	r1, r3
 8004f4a:	b510      	push	{r4, lr}
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	d001      	beq.n	8004f54 <cleanup_stdio+0x10>
 8004f50:	f000 fd14 	bl	800597c <_fflush_r>
 8004f54:	68a1      	ldr	r1, [r4, #8]
 8004f56:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <cleanup_stdio+0x38>)
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	d002      	beq.n	8004f62 <cleanup_stdio+0x1e>
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f000 fd0d 	bl	800597c <_fflush_r>
 8004f62:	68e1      	ldr	r1, [r4, #12]
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <cleanup_stdio+0x3c>)
 8004f66:	4299      	cmp	r1, r3
 8004f68:	d004      	beq.n	8004f74 <cleanup_stdio+0x30>
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f70:	f000 bd04 	b.w	800597c <_fflush_r>
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	bf00      	nop
 8004f78:	200001d4 	.word	0x200001d4
 8004f7c:	2000023c 	.word	0x2000023c
 8004f80:	200002a4 	.word	0x200002a4

08004f84 <global_stdio_init.part.0>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <global_stdio_init.part.0+0x30>)
 8004f88:	4c0b      	ldr	r4, [pc, #44]	; (8004fb8 <global_stdio_init.part.0+0x34>)
 8004f8a:	4a0c      	ldr	r2, [pc, #48]	; (8004fbc <global_stdio_init.part.0+0x38>)
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	4620      	mov	r0, r4
 8004f90:	2200      	movs	r2, #0
 8004f92:	2104      	movs	r1, #4
 8004f94:	f7ff ff94 	bl	8004ec0 <std>
 8004f98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	2109      	movs	r1, #9
 8004fa0:	f7ff ff8e 	bl	8004ec0 <std>
 8004fa4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004fa8:	2202      	movs	r2, #2
 8004faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fae:	2112      	movs	r1, #18
 8004fb0:	f7ff bf86 	b.w	8004ec0 <std>
 8004fb4:	2000030c 	.word	0x2000030c
 8004fb8:	200001d4 	.word	0x200001d4
 8004fbc:	08004f2d 	.word	0x08004f2d

08004fc0 <__sfp_lock_acquire>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__sfp_lock_acquire+0x8>)
 8004fc2:	f000 b8e0 	b.w	8005186 <__retarget_lock_acquire_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20000311 	.word	0x20000311

08004fcc <__sfp_lock_release>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__sfp_lock_release+0x8>)
 8004fce:	f000 b8db 	b.w	8005188 <__retarget_lock_release_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20000311 	.word	0x20000311

08004fd8 <__sinit>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	f7ff fff0 	bl	8004fc0 <__sfp_lock_acquire>
 8004fe0:	6a23      	ldr	r3, [r4, #32]
 8004fe2:	b11b      	cbz	r3, 8004fec <__sinit+0x14>
 8004fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe8:	f7ff bff0 	b.w	8004fcc <__sfp_lock_release>
 8004fec:	4b04      	ldr	r3, [pc, #16]	; (8005000 <__sinit+0x28>)
 8004fee:	6223      	str	r3, [r4, #32]
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <__sinit+0x2c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f5      	bne.n	8004fe4 <__sinit+0xc>
 8004ff8:	f7ff ffc4 	bl	8004f84 <global_stdio_init.part.0>
 8004ffc:	e7f2      	b.n	8004fe4 <__sinit+0xc>
 8004ffe:	bf00      	nop
 8005000:	08004f45 	.word	0x08004f45
 8005004:	2000030c 	.word	0x2000030c

08005008 <_fwalk_sglue>:
 8005008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800500c:	4607      	mov	r7, r0
 800500e:	4688      	mov	r8, r1
 8005010:	4614      	mov	r4, r2
 8005012:	2600      	movs	r6, #0
 8005014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005018:	f1b9 0901 	subs.w	r9, r9, #1
 800501c:	d505      	bpl.n	800502a <_fwalk_sglue+0x22>
 800501e:	6824      	ldr	r4, [r4, #0]
 8005020:	2c00      	cmp	r4, #0
 8005022:	d1f7      	bne.n	8005014 <_fwalk_sglue+0xc>
 8005024:	4630      	mov	r0, r6
 8005026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800502a:	89ab      	ldrh	r3, [r5, #12]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d907      	bls.n	8005040 <_fwalk_sglue+0x38>
 8005030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005034:	3301      	adds	r3, #1
 8005036:	d003      	beq.n	8005040 <_fwalk_sglue+0x38>
 8005038:	4629      	mov	r1, r5
 800503a:	4638      	mov	r0, r7
 800503c:	47c0      	blx	r8
 800503e:	4306      	orrs	r6, r0
 8005040:	3568      	adds	r5, #104	; 0x68
 8005042:	e7e9      	b.n	8005018 <_fwalk_sglue+0x10>

08005044 <iprintf>:
 8005044:	b40f      	push	{r0, r1, r2, r3}
 8005046:	b507      	push	{r0, r1, r2, lr}
 8005048:	4906      	ldr	r1, [pc, #24]	; (8005064 <iprintf+0x20>)
 800504a:	ab04      	add	r3, sp, #16
 800504c:	6808      	ldr	r0, [r1, #0]
 800504e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005052:	6881      	ldr	r1, [r0, #8]
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	f000 f8c1 	bl	80051dc <_vfiprintf_r>
 800505a:	b003      	add	sp, #12
 800505c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005060:	b004      	add	sp, #16
 8005062:	4770      	bx	lr
 8005064:	20000078 	.word	0x20000078

08005068 <_puts_r>:
 8005068:	6a03      	ldr	r3, [r0, #32]
 800506a:	b570      	push	{r4, r5, r6, lr}
 800506c:	6884      	ldr	r4, [r0, #8]
 800506e:	4605      	mov	r5, r0
 8005070:	460e      	mov	r6, r1
 8005072:	b90b      	cbnz	r3, 8005078 <_puts_r+0x10>
 8005074:	f7ff ffb0 	bl	8004fd8 <__sinit>
 8005078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800507a:	07db      	lsls	r3, r3, #31
 800507c:	d405      	bmi.n	800508a <_puts_r+0x22>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	0598      	lsls	r0, r3, #22
 8005082:	d402      	bmi.n	800508a <_puts_r+0x22>
 8005084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005086:	f000 f87e 	bl	8005186 <__retarget_lock_acquire_recursive>
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	0719      	lsls	r1, r3, #28
 800508e:	d513      	bpl.n	80050b8 <_puts_r+0x50>
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	b18b      	cbz	r3, 80050b8 <_puts_r+0x50>
 8005094:	3e01      	subs	r6, #1
 8005096:	68a3      	ldr	r3, [r4, #8]
 8005098:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800509c:	3b01      	subs	r3, #1
 800509e:	60a3      	str	r3, [r4, #8]
 80050a0:	b9e9      	cbnz	r1, 80050de <_puts_r+0x76>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	da2e      	bge.n	8005104 <_puts_r+0x9c>
 80050a6:	4622      	mov	r2, r4
 80050a8:	210a      	movs	r1, #10
 80050aa:	4628      	mov	r0, r5
 80050ac:	f000 fcdd 	bl	8005a6a <__swbuf_r>
 80050b0:	3001      	adds	r0, #1
 80050b2:	d007      	beq.n	80050c4 <_puts_r+0x5c>
 80050b4:	250a      	movs	r5, #10
 80050b6:	e007      	b.n	80050c8 <_puts_r+0x60>
 80050b8:	4621      	mov	r1, r4
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 fd12 	bl	8005ae4 <__swsetup_r>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d0e7      	beq.n	8005094 <_puts_r+0x2c>
 80050c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80050c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050ca:	07da      	lsls	r2, r3, #31
 80050cc:	d405      	bmi.n	80050da <_puts_r+0x72>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	059b      	lsls	r3, r3, #22
 80050d2:	d402      	bmi.n	80050da <_puts_r+0x72>
 80050d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050d6:	f000 f857 	bl	8005188 <__retarget_lock_release_recursive>
 80050da:	4628      	mov	r0, r5
 80050dc:	bd70      	pop	{r4, r5, r6, pc}
 80050de:	2b00      	cmp	r3, #0
 80050e0:	da04      	bge.n	80050ec <_puts_r+0x84>
 80050e2:	69a2      	ldr	r2, [r4, #24]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	dc06      	bgt.n	80050f6 <_puts_r+0x8e>
 80050e8:	290a      	cmp	r1, #10
 80050ea:	d004      	beq.n	80050f6 <_puts_r+0x8e>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	7019      	strb	r1, [r3, #0]
 80050f4:	e7cf      	b.n	8005096 <_puts_r+0x2e>
 80050f6:	4622      	mov	r2, r4
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 fcb6 	bl	8005a6a <__swbuf_r>
 80050fe:	3001      	adds	r0, #1
 8005100:	d1c9      	bne.n	8005096 <_puts_r+0x2e>
 8005102:	e7df      	b.n	80050c4 <_puts_r+0x5c>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	250a      	movs	r5, #10
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	701d      	strb	r5, [r3, #0]
 800510e:	e7db      	b.n	80050c8 <_puts_r+0x60>

08005110 <puts>:
 8005110:	4b02      	ldr	r3, [pc, #8]	; (800511c <puts+0xc>)
 8005112:	4601      	mov	r1, r0
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	f7ff bfa7 	b.w	8005068 <_puts_r>
 800511a:	bf00      	nop
 800511c:	20000078 	.word	0x20000078

08005120 <memset>:
 8005120:	4402      	add	r2, r0
 8005122:	4603      	mov	r3, r0
 8005124:	4293      	cmp	r3, r2
 8005126:	d100      	bne.n	800512a <memset+0xa>
 8005128:	4770      	bx	lr
 800512a:	f803 1b01 	strb.w	r1, [r3], #1
 800512e:	e7f9      	b.n	8005124 <memset+0x4>

08005130 <__errno>:
 8005130:	4b01      	ldr	r3, [pc, #4]	; (8005138 <__errno+0x8>)
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000078 	.word	0x20000078

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	4d0d      	ldr	r5, [pc, #52]	; (8005174 <__libc_init_array+0x38>)
 8005140:	4c0d      	ldr	r4, [pc, #52]	; (8005178 <__libc_init_array+0x3c>)
 8005142:	1b64      	subs	r4, r4, r5
 8005144:	10a4      	asrs	r4, r4, #2
 8005146:	2600      	movs	r6, #0
 8005148:	42a6      	cmp	r6, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	4d0b      	ldr	r5, [pc, #44]	; (800517c <__libc_init_array+0x40>)
 800514e:	4c0c      	ldr	r4, [pc, #48]	; (8005180 <__libc_init_array+0x44>)
 8005150:	f000 fe46 	bl	8005de0 <_init>
 8005154:	1b64      	subs	r4, r4, r5
 8005156:	10a4      	asrs	r4, r4, #2
 8005158:	2600      	movs	r6, #0
 800515a:	42a6      	cmp	r6, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f855 3b04 	ldr.w	r3, [r5], #4
 8005164:	4798      	blx	r3
 8005166:	3601      	adds	r6, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	f855 3b04 	ldr.w	r3, [r5], #4
 800516e:	4798      	blx	r3
 8005170:	3601      	adds	r6, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	08005ecc 	.word	0x08005ecc
 8005178:	08005ecc 	.word	0x08005ecc
 800517c:	08005ecc 	.word	0x08005ecc
 8005180:	08005ed0 	.word	0x08005ed0

08005184 <__retarget_lock_init_recursive>:
 8005184:	4770      	bx	lr

08005186 <__retarget_lock_acquire_recursive>:
 8005186:	4770      	bx	lr

08005188 <__retarget_lock_release_recursive>:
 8005188:	4770      	bx	lr

0800518a <__sfputc_r>:
 800518a:	6893      	ldr	r3, [r2, #8]
 800518c:	3b01      	subs	r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	b410      	push	{r4}
 8005192:	6093      	str	r3, [r2, #8]
 8005194:	da08      	bge.n	80051a8 <__sfputc_r+0x1e>
 8005196:	6994      	ldr	r4, [r2, #24]
 8005198:	42a3      	cmp	r3, r4
 800519a:	db01      	blt.n	80051a0 <__sfputc_r+0x16>
 800519c:	290a      	cmp	r1, #10
 800519e:	d103      	bne.n	80051a8 <__sfputc_r+0x1e>
 80051a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a4:	f000 bc61 	b.w	8005a6a <__swbuf_r>
 80051a8:	6813      	ldr	r3, [r2, #0]
 80051aa:	1c58      	adds	r0, r3, #1
 80051ac:	6010      	str	r0, [r2, #0]
 80051ae:	7019      	strb	r1, [r3, #0]
 80051b0:	4608      	mov	r0, r1
 80051b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <__sfputs_r>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	4606      	mov	r6, r0
 80051bc:	460f      	mov	r7, r1
 80051be:	4614      	mov	r4, r2
 80051c0:	18d5      	adds	r5, r2, r3
 80051c2:	42ac      	cmp	r4, r5
 80051c4:	d101      	bne.n	80051ca <__sfputs_r+0x12>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e007      	b.n	80051da <__sfputs_r+0x22>
 80051ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ce:	463a      	mov	r2, r7
 80051d0:	4630      	mov	r0, r6
 80051d2:	f7ff ffda 	bl	800518a <__sfputc_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	d1f3      	bne.n	80051c2 <__sfputs_r+0xa>
 80051da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080051dc <_vfiprintf_r>:
 80051dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	460d      	mov	r5, r1
 80051e2:	b09d      	sub	sp, #116	; 0x74
 80051e4:	4614      	mov	r4, r2
 80051e6:	4698      	mov	r8, r3
 80051e8:	4606      	mov	r6, r0
 80051ea:	b118      	cbz	r0, 80051f4 <_vfiprintf_r+0x18>
 80051ec:	6a03      	ldr	r3, [r0, #32]
 80051ee:	b90b      	cbnz	r3, 80051f4 <_vfiprintf_r+0x18>
 80051f0:	f7ff fef2 	bl	8004fd8 <__sinit>
 80051f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f6:	07d9      	lsls	r1, r3, #31
 80051f8:	d405      	bmi.n	8005206 <_vfiprintf_r+0x2a>
 80051fa:	89ab      	ldrh	r3, [r5, #12]
 80051fc:	059a      	lsls	r2, r3, #22
 80051fe:	d402      	bmi.n	8005206 <_vfiprintf_r+0x2a>
 8005200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005202:	f7ff ffc0 	bl	8005186 <__retarget_lock_acquire_recursive>
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	071b      	lsls	r3, r3, #28
 800520a:	d501      	bpl.n	8005210 <_vfiprintf_r+0x34>
 800520c:	692b      	ldr	r3, [r5, #16]
 800520e:	b99b      	cbnz	r3, 8005238 <_vfiprintf_r+0x5c>
 8005210:	4629      	mov	r1, r5
 8005212:	4630      	mov	r0, r6
 8005214:	f000 fc66 	bl	8005ae4 <__swsetup_r>
 8005218:	b170      	cbz	r0, 8005238 <_vfiprintf_r+0x5c>
 800521a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800521c:	07dc      	lsls	r4, r3, #31
 800521e:	d504      	bpl.n	800522a <_vfiprintf_r+0x4e>
 8005220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005224:	b01d      	add	sp, #116	; 0x74
 8005226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522a:	89ab      	ldrh	r3, [r5, #12]
 800522c:	0598      	lsls	r0, r3, #22
 800522e:	d4f7      	bmi.n	8005220 <_vfiprintf_r+0x44>
 8005230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005232:	f7ff ffa9 	bl	8005188 <__retarget_lock_release_recursive>
 8005236:	e7f3      	b.n	8005220 <_vfiprintf_r+0x44>
 8005238:	2300      	movs	r3, #0
 800523a:	9309      	str	r3, [sp, #36]	; 0x24
 800523c:	2320      	movs	r3, #32
 800523e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005242:	f8cd 800c 	str.w	r8, [sp, #12]
 8005246:	2330      	movs	r3, #48	; 0x30
 8005248:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80053fc <_vfiprintf_r+0x220>
 800524c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005250:	f04f 0901 	mov.w	r9, #1
 8005254:	4623      	mov	r3, r4
 8005256:	469a      	mov	sl, r3
 8005258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800525c:	b10a      	cbz	r2, 8005262 <_vfiprintf_r+0x86>
 800525e:	2a25      	cmp	r2, #37	; 0x25
 8005260:	d1f9      	bne.n	8005256 <_vfiprintf_r+0x7a>
 8005262:	ebba 0b04 	subs.w	fp, sl, r4
 8005266:	d00b      	beq.n	8005280 <_vfiprintf_r+0xa4>
 8005268:	465b      	mov	r3, fp
 800526a:	4622      	mov	r2, r4
 800526c:	4629      	mov	r1, r5
 800526e:	4630      	mov	r0, r6
 8005270:	f7ff ffa2 	bl	80051b8 <__sfputs_r>
 8005274:	3001      	adds	r0, #1
 8005276:	f000 80a9 	beq.w	80053cc <_vfiprintf_r+0x1f0>
 800527a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800527c:	445a      	add	r2, fp
 800527e:	9209      	str	r2, [sp, #36]	; 0x24
 8005280:	f89a 3000 	ldrb.w	r3, [sl]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80a1 	beq.w	80053cc <_vfiprintf_r+0x1f0>
 800528a:	2300      	movs	r3, #0
 800528c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005294:	f10a 0a01 	add.w	sl, sl, #1
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	9307      	str	r3, [sp, #28]
 800529c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052a0:	931a      	str	r3, [sp, #104]	; 0x68
 80052a2:	4654      	mov	r4, sl
 80052a4:	2205      	movs	r2, #5
 80052a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052aa:	4854      	ldr	r0, [pc, #336]	; (80053fc <_vfiprintf_r+0x220>)
 80052ac:	f7fa ff98 	bl	80001e0 <memchr>
 80052b0:	9a04      	ldr	r2, [sp, #16]
 80052b2:	b9d8      	cbnz	r0, 80052ec <_vfiprintf_r+0x110>
 80052b4:	06d1      	lsls	r1, r2, #27
 80052b6:	bf44      	itt	mi
 80052b8:	2320      	movmi	r3, #32
 80052ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052be:	0713      	lsls	r3, r2, #28
 80052c0:	bf44      	itt	mi
 80052c2:	232b      	movmi	r3, #43	; 0x2b
 80052c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c8:	f89a 3000 	ldrb.w	r3, [sl]
 80052cc:	2b2a      	cmp	r3, #42	; 0x2a
 80052ce:	d015      	beq.n	80052fc <_vfiprintf_r+0x120>
 80052d0:	9a07      	ldr	r2, [sp, #28]
 80052d2:	4654      	mov	r4, sl
 80052d4:	2000      	movs	r0, #0
 80052d6:	f04f 0c0a 	mov.w	ip, #10
 80052da:	4621      	mov	r1, r4
 80052dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052e0:	3b30      	subs	r3, #48	; 0x30
 80052e2:	2b09      	cmp	r3, #9
 80052e4:	d94d      	bls.n	8005382 <_vfiprintf_r+0x1a6>
 80052e6:	b1b0      	cbz	r0, 8005316 <_vfiprintf_r+0x13a>
 80052e8:	9207      	str	r2, [sp, #28]
 80052ea:	e014      	b.n	8005316 <_vfiprintf_r+0x13a>
 80052ec:	eba0 0308 	sub.w	r3, r0, r8
 80052f0:	fa09 f303 	lsl.w	r3, r9, r3
 80052f4:	4313      	orrs	r3, r2
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	46a2      	mov	sl, r4
 80052fa:	e7d2      	b.n	80052a2 <_vfiprintf_r+0xc6>
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	1d19      	adds	r1, r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	9103      	str	r1, [sp, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	bfbb      	ittet	lt
 8005308:	425b      	neglt	r3, r3
 800530a:	f042 0202 	orrlt.w	r2, r2, #2
 800530e:	9307      	strge	r3, [sp, #28]
 8005310:	9307      	strlt	r3, [sp, #28]
 8005312:	bfb8      	it	lt
 8005314:	9204      	strlt	r2, [sp, #16]
 8005316:	7823      	ldrb	r3, [r4, #0]
 8005318:	2b2e      	cmp	r3, #46	; 0x2e
 800531a:	d10c      	bne.n	8005336 <_vfiprintf_r+0x15a>
 800531c:	7863      	ldrb	r3, [r4, #1]
 800531e:	2b2a      	cmp	r3, #42	; 0x2a
 8005320:	d134      	bne.n	800538c <_vfiprintf_r+0x1b0>
 8005322:	9b03      	ldr	r3, [sp, #12]
 8005324:	1d1a      	adds	r2, r3, #4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	9203      	str	r2, [sp, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	bfb8      	it	lt
 800532e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005332:	3402      	adds	r4, #2
 8005334:	9305      	str	r3, [sp, #20]
 8005336:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800540c <_vfiprintf_r+0x230>
 800533a:	7821      	ldrb	r1, [r4, #0]
 800533c:	2203      	movs	r2, #3
 800533e:	4650      	mov	r0, sl
 8005340:	f7fa ff4e 	bl	80001e0 <memchr>
 8005344:	b138      	cbz	r0, 8005356 <_vfiprintf_r+0x17a>
 8005346:	9b04      	ldr	r3, [sp, #16]
 8005348:	eba0 000a 	sub.w	r0, r0, sl
 800534c:	2240      	movs	r2, #64	; 0x40
 800534e:	4082      	lsls	r2, r0
 8005350:	4313      	orrs	r3, r2
 8005352:	3401      	adds	r4, #1
 8005354:	9304      	str	r3, [sp, #16]
 8005356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535a:	4829      	ldr	r0, [pc, #164]	; (8005400 <_vfiprintf_r+0x224>)
 800535c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005360:	2206      	movs	r2, #6
 8005362:	f7fa ff3d 	bl	80001e0 <memchr>
 8005366:	2800      	cmp	r0, #0
 8005368:	d03f      	beq.n	80053ea <_vfiprintf_r+0x20e>
 800536a:	4b26      	ldr	r3, [pc, #152]	; (8005404 <_vfiprintf_r+0x228>)
 800536c:	bb1b      	cbnz	r3, 80053b6 <_vfiprintf_r+0x1da>
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	3307      	adds	r3, #7
 8005372:	f023 0307 	bic.w	r3, r3, #7
 8005376:	3308      	adds	r3, #8
 8005378:	9303      	str	r3, [sp, #12]
 800537a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537c:	443b      	add	r3, r7
 800537e:	9309      	str	r3, [sp, #36]	; 0x24
 8005380:	e768      	b.n	8005254 <_vfiprintf_r+0x78>
 8005382:	fb0c 3202 	mla	r2, ip, r2, r3
 8005386:	460c      	mov	r4, r1
 8005388:	2001      	movs	r0, #1
 800538a:	e7a6      	b.n	80052da <_vfiprintf_r+0xfe>
 800538c:	2300      	movs	r3, #0
 800538e:	3401      	adds	r4, #1
 8005390:	9305      	str	r3, [sp, #20]
 8005392:	4619      	mov	r1, r3
 8005394:	f04f 0c0a 	mov.w	ip, #10
 8005398:	4620      	mov	r0, r4
 800539a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800539e:	3a30      	subs	r2, #48	; 0x30
 80053a0:	2a09      	cmp	r2, #9
 80053a2:	d903      	bls.n	80053ac <_vfiprintf_r+0x1d0>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0c6      	beq.n	8005336 <_vfiprintf_r+0x15a>
 80053a8:	9105      	str	r1, [sp, #20]
 80053aa:	e7c4      	b.n	8005336 <_vfiprintf_r+0x15a>
 80053ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80053b0:	4604      	mov	r4, r0
 80053b2:	2301      	movs	r3, #1
 80053b4:	e7f0      	b.n	8005398 <_vfiprintf_r+0x1bc>
 80053b6:	ab03      	add	r3, sp, #12
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	462a      	mov	r2, r5
 80053bc:	4b12      	ldr	r3, [pc, #72]	; (8005408 <_vfiprintf_r+0x22c>)
 80053be:	a904      	add	r1, sp, #16
 80053c0:	4630      	mov	r0, r6
 80053c2:	f3af 8000 	nop.w
 80053c6:	4607      	mov	r7, r0
 80053c8:	1c78      	adds	r0, r7, #1
 80053ca:	d1d6      	bne.n	800537a <_vfiprintf_r+0x19e>
 80053cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053ce:	07d9      	lsls	r1, r3, #31
 80053d0:	d405      	bmi.n	80053de <_vfiprintf_r+0x202>
 80053d2:	89ab      	ldrh	r3, [r5, #12]
 80053d4:	059a      	lsls	r2, r3, #22
 80053d6:	d402      	bmi.n	80053de <_vfiprintf_r+0x202>
 80053d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053da:	f7ff fed5 	bl	8005188 <__retarget_lock_release_recursive>
 80053de:	89ab      	ldrh	r3, [r5, #12]
 80053e0:	065b      	lsls	r3, r3, #25
 80053e2:	f53f af1d 	bmi.w	8005220 <_vfiprintf_r+0x44>
 80053e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053e8:	e71c      	b.n	8005224 <_vfiprintf_r+0x48>
 80053ea:	ab03      	add	r3, sp, #12
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	462a      	mov	r2, r5
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <_vfiprintf_r+0x22c>)
 80053f2:	a904      	add	r1, sp, #16
 80053f4:	4630      	mov	r0, r6
 80053f6:	f000 f919 	bl	800562c <_printf_i>
 80053fa:	e7e4      	b.n	80053c6 <_vfiprintf_r+0x1ea>
 80053fc:	08005e90 	.word	0x08005e90
 8005400:	08005e9a 	.word	0x08005e9a
 8005404:	00000000 	.word	0x00000000
 8005408:	080051b9 	.word	0x080051b9
 800540c:	08005e96 	.word	0x08005e96

08005410 <sbrk_aligned>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4e0e      	ldr	r6, [pc, #56]	; (800544c <sbrk_aligned+0x3c>)
 8005414:	460c      	mov	r4, r1
 8005416:	6831      	ldr	r1, [r6, #0]
 8005418:	4605      	mov	r5, r0
 800541a:	b911      	cbnz	r1, 8005422 <sbrk_aligned+0x12>
 800541c:	f000 fc72 	bl	8005d04 <_sbrk_r>
 8005420:	6030      	str	r0, [r6, #0]
 8005422:	4621      	mov	r1, r4
 8005424:	4628      	mov	r0, r5
 8005426:	f000 fc6d 	bl	8005d04 <_sbrk_r>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	d00a      	beq.n	8005444 <sbrk_aligned+0x34>
 800542e:	1cc4      	adds	r4, r0, #3
 8005430:	f024 0403 	bic.w	r4, r4, #3
 8005434:	42a0      	cmp	r0, r4
 8005436:	d007      	beq.n	8005448 <sbrk_aligned+0x38>
 8005438:	1a21      	subs	r1, r4, r0
 800543a:	4628      	mov	r0, r5
 800543c:	f000 fc62 	bl	8005d04 <_sbrk_r>
 8005440:	3001      	adds	r0, #1
 8005442:	d101      	bne.n	8005448 <sbrk_aligned+0x38>
 8005444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005448:	4620      	mov	r0, r4
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	20000318 	.word	0x20000318

08005450 <_malloc_r>:
 8005450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005454:	1ccd      	adds	r5, r1, #3
 8005456:	f025 0503 	bic.w	r5, r5, #3
 800545a:	3508      	adds	r5, #8
 800545c:	2d0c      	cmp	r5, #12
 800545e:	bf38      	it	cc
 8005460:	250c      	movcc	r5, #12
 8005462:	2d00      	cmp	r5, #0
 8005464:	4607      	mov	r7, r0
 8005466:	db01      	blt.n	800546c <_malloc_r+0x1c>
 8005468:	42a9      	cmp	r1, r5
 800546a:	d905      	bls.n	8005478 <_malloc_r+0x28>
 800546c:	230c      	movs	r3, #12
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	2600      	movs	r6, #0
 8005472:	4630      	mov	r0, r6
 8005474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005478:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800554c <_malloc_r+0xfc>
 800547c:	f000 faa6 	bl	80059cc <__malloc_lock>
 8005480:	f8d8 3000 	ldr.w	r3, [r8]
 8005484:	461c      	mov	r4, r3
 8005486:	bb5c      	cbnz	r4, 80054e0 <_malloc_r+0x90>
 8005488:	4629      	mov	r1, r5
 800548a:	4638      	mov	r0, r7
 800548c:	f7ff ffc0 	bl	8005410 <sbrk_aligned>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	4604      	mov	r4, r0
 8005494:	d155      	bne.n	8005542 <_malloc_r+0xf2>
 8005496:	f8d8 4000 	ldr.w	r4, [r8]
 800549a:	4626      	mov	r6, r4
 800549c:	2e00      	cmp	r6, #0
 800549e:	d145      	bne.n	800552c <_malloc_r+0xdc>
 80054a0:	2c00      	cmp	r4, #0
 80054a2:	d048      	beq.n	8005536 <_malloc_r+0xe6>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	4631      	mov	r1, r6
 80054a8:	4638      	mov	r0, r7
 80054aa:	eb04 0903 	add.w	r9, r4, r3
 80054ae:	f000 fc29 	bl	8005d04 <_sbrk_r>
 80054b2:	4581      	cmp	r9, r0
 80054b4:	d13f      	bne.n	8005536 <_malloc_r+0xe6>
 80054b6:	6821      	ldr	r1, [r4, #0]
 80054b8:	1a6d      	subs	r5, r5, r1
 80054ba:	4629      	mov	r1, r5
 80054bc:	4638      	mov	r0, r7
 80054be:	f7ff ffa7 	bl	8005410 <sbrk_aligned>
 80054c2:	3001      	adds	r0, #1
 80054c4:	d037      	beq.n	8005536 <_malloc_r+0xe6>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	442b      	add	r3, r5
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	f8d8 3000 	ldr.w	r3, [r8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d038      	beq.n	8005546 <_malloc_r+0xf6>
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	42a2      	cmp	r2, r4
 80054d8:	d12b      	bne.n	8005532 <_malloc_r+0xe2>
 80054da:	2200      	movs	r2, #0
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	e00f      	b.n	8005500 <_malloc_r+0xb0>
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	1b52      	subs	r2, r2, r5
 80054e4:	d41f      	bmi.n	8005526 <_malloc_r+0xd6>
 80054e6:	2a0b      	cmp	r2, #11
 80054e8:	d917      	bls.n	800551a <_malloc_r+0xca>
 80054ea:	1961      	adds	r1, r4, r5
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	6025      	str	r5, [r4, #0]
 80054f0:	bf18      	it	ne
 80054f2:	6059      	strne	r1, [r3, #4]
 80054f4:	6863      	ldr	r3, [r4, #4]
 80054f6:	bf08      	it	eq
 80054f8:	f8c8 1000 	streq.w	r1, [r8]
 80054fc:	5162      	str	r2, [r4, r5]
 80054fe:	604b      	str	r3, [r1, #4]
 8005500:	4638      	mov	r0, r7
 8005502:	f104 060b 	add.w	r6, r4, #11
 8005506:	f000 fa67 	bl	80059d8 <__malloc_unlock>
 800550a:	f026 0607 	bic.w	r6, r6, #7
 800550e:	1d23      	adds	r3, r4, #4
 8005510:	1af2      	subs	r2, r6, r3
 8005512:	d0ae      	beq.n	8005472 <_malloc_r+0x22>
 8005514:	1b9b      	subs	r3, r3, r6
 8005516:	50a3      	str	r3, [r4, r2]
 8005518:	e7ab      	b.n	8005472 <_malloc_r+0x22>
 800551a:	42a3      	cmp	r3, r4
 800551c:	6862      	ldr	r2, [r4, #4]
 800551e:	d1dd      	bne.n	80054dc <_malloc_r+0x8c>
 8005520:	f8c8 2000 	str.w	r2, [r8]
 8005524:	e7ec      	b.n	8005500 <_malloc_r+0xb0>
 8005526:	4623      	mov	r3, r4
 8005528:	6864      	ldr	r4, [r4, #4]
 800552a:	e7ac      	b.n	8005486 <_malloc_r+0x36>
 800552c:	4634      	mov	r4, r6
 800552e:	6876      	ldr	r6, [r6, #4]
 8005530:	e7b4      	b.n	800549c <_malloc_r+0x4c>
 8005532:	4613      	mov	r3, r2
 8005534:	e7cc      	b.n	80054d0 <_malloc_r+0x80>
 8005536:	230c      	movs	r3, #12
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	4638      	mov	r0, r7
 800553c:	f000 fa4c 	bl	80059d8 <__malloc_unlock>
 8005540:	e797      	b.n	8005472 <_malloc_r+0x22>
 8005542:	6025      	str	r5, [r4, #0]
 8005544:	e7dc      	b.n	8005500 <_malloc_r+0xb0>
 8005546:	605b      	str	r3, [r3, #4]
 8005548:	deff      	udf	#255	; 0xff
 800554a:	bf00      	nop
 800554c:	20000314 	.word	0x20000314

08005550 <_printf_common>:
 8005550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	4616      	mov	r6, r2
 8005556:	4699      	mov	r9, r3
 8005558:	688a      	ldr	r2, [r1, #8]
 800555a:	690b      	ldr	r3, [r1, #16]
 800555c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005560:	4293      	cmp	r3, r2
 8005562:	bfb8      	it	lt
 8005564:	4613      	movlt	r3, r2
 8005566:	6033      	str	r3, [r6, #0]
 8005568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800556c:	4607      	mov	r7, r0
 800556e:	460c      	mov	r4, r1
 8005570:	b10a      	cbz	r2, 8005576 <_printf_common+0x26>
 8005572:	3301      	adds	r3, #1
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	0699      	lsls	r1, r3, #26
 800557a:	bf42      	ittt	mi
 800557c:	6833      	ldrmi	r3, [r6, #0]
 800557e:	3302      	addmi	r3, #2
 8005580:	6033      	strmi	r3, [r6, #0]
 8005582:	6825      	ldr	r5, [r4, #0]
 8005584:	f015 0506 	ands.w	r5, r5, #6
 8005588:	d106      	bne.n	8005598 <_printf_common+0x48>
 800558a:	f104 0a19 	add.w	sl, r4, #25
 800558e:	68e3      	ldr	r3, [r4, #12]
 8005590:	6832      	ldr	r2, [r6, #0]
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	42ab      	cmp	r3, r5
 8005596:	dc26      	bgt.n	80055e6 <_printf_common+0x96>
 8005598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800559c:	1e13      	subs	r3, r2, #0
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	bf18      	it	ne
 80055a2:	2301      	movne	r3, #1
 80055a4:	0692      	lsls	r2, r2, #26
 80055a6:	d42b      	bmi.n	8005600 <_printf_common+0xb0>
 80055a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ac:	4649      	mov	r1, r9
 80055ae:	4638      	mov	r0, r7
 80055b0:	47c0      	blx	r8
 80055b2:	3001      	adds	r0, #1
 80055b4:	d01e      	beq.n	80055f4 <_printf_common+0xa4>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	6922      	ldr	r2, [r4, #16]
 80055ba:	f003 0306 	and.w	r3, r3, #6
 80055be:	2b04      	cmp	r3, #4
 80055c0:	bf02      	ittt	eq
 80055c2:	68e5      	ldreq	r5, [r4, #12]
 80055c4:	6833      	ldreq	r3, [r6, #0]
 80055c6:	1aed      	subeq	r5, r5, r3
 80055c8:	68a3      	ldr	r3, [r4, #8]
 80055ca:	bf0c      	ite	eq
 80055cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d0:	2500      	movne	r5, #0
 80055d2:	4293      	cmp	r3, r2
 80055d4:	bfc4      	itt	gt
 80055d6:	1a9b      	subgt	r3, r3, r2
 80055d8:	18ed      	addgt	r5, r5, r3
 80055da:	2600      	movs	r6, #0
 80055dc:	341a      	adds	r4, #26
 80055de:	42b5      	cmp	r5, r6
 80055e0:	d11a      	bne.n	8005618 <_printf_common+0xc8>
 80055e2:	2000      	movs	r0, #0
 80055e4:	e008      	b.n	80055f8 <_printf_common+0xa8>
 80055e6:	2301      	movs	r3, #1
 80055e8:	4652      	mov	r2, sl
 80055ea:	4649      	mov	r1, r9
 80055ec:	4638      	mov	r0, r7
 80055ee:	47c0      	blx	r8
 80055f0:	3001      	adds	r0, #1
 80055f2:	d103      	bne.n	80055fc <_printf_common+0xac>
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055fc:	3501      	adds	r5, #1
 80055fe:	e7c6      	b.n	800558e <_printf_common+0x3e>
 8005600:	18e1      	adds	r1, r4, r3
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	2030      	movs	r0, #48	; 0x30
 8005606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800560a:	4422      	add	r2, r4
 800560c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005614:	3302      	adds	r3, #2
 8005616:	e7c7      	b.n	80055a8 <_printf_common+0x58>
 8005618:	2301      	movs	r3, #1
 800561a:	4622      	mov	r2, r4
 800561c:	4649      	mov	r1, r9
 800561e:	4638      	mov	r0, r7
 8005620:	47c0      	blx	r8
 8005622:	3001      	adds	r0, #1
 8005624:	d0e6      	beq.n	80055f4 <_printf_common+0xa4>
 8005626:	3601      	adds	r6, #1
 8005628:	e7d9      	b.n	80055de <_printf_common+0x8e>
	...

0800562c <_printf_i>:
 800562c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005630:	7e0f      	ldrb	r7, [r1, #24]
 8005632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005634:	2f78      	cmp	r7, #120	; 0x78
 8005636:	4691      	mov	r9, r2
 8005638:	4680      	mov	r8, r0
 800563a:	460c      	mov	r4, r1
 800563c:	469a      	mov	sl, r3
 800563e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005642:	d807      	bhi.n	8005654 <_printf_i+0x28>
 8005644:	2f62      	cmp	r7, #98	; 0x62
 8005646:	d80a      	bhi.n	800565e <_printf_i+0x32>
 8005648:	2f00      	cmp	r7, #0
 800564a:	f000 80d4 	beq.w	80057f6 <_printf_i+0x1ca>
 800564e:	2f58      	cmp	r7, #88	; 0x58
 8005650:	f000 80c0 	beq.w	80057d4 <_printf_i+0x1a8>
 8005654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800565c:	e03a      	b.n	80056d4 <_printf_i+0xa8>
 800565e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005662:	2b15      	cmp	r3, #21
 8005664:	d8f6      	bhi.n	8005654 <_printf_i+0x28>
 8005666:	a101      	add	r1, pc, #4	; (adr r1, 800566c <_printf_i+0x40>)
 8005668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800566c:	080056c5 	.word	0x080056c5
 8005670:	080056d9 	.word	0x080056d9
 8005674:	08005655 	.word	0x08005655
 8005678:	08005655 	.word	0x08005655
 800567c:	08005655 	.word	0x08005655
 8005680:	08005655 	.word	0x08005655
 8005684:	080056d9 	.word	0x080056d9
 8005688:	08005655 	.word	0x08005655
 800568c:	08005655 	.word	0x08005655
 8005690:	08005655 	.word	0x08005655
 8005694:	08005655 	.word	0x08005655
 8005698:	080057dd 	.word	0x080057dd
 800569c:	08005705 	.word	0x08005705
 80056a0:	08005797 	.word	0x08005797
 80056a4:	08005655 	.word	0x08005655
 80056a8:	08005655 	.word	0x08005655
 80056ac:	080057ff 	.word	0x080057ff
 80056b0:	08005655 	.word	0x08005655
 80056b4:	08005705 	.word	0x08005705
 80056b8:	08005655 	.word	0x08005655
 80056bc:	08005655 	.word	0x08005655
 80056c0:	0800579f 	.word	0x0800579f
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	1d1a      	adds	r2, r3, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	602a      	str	r2, [r5, #0]
 80056cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056d4:	2301      	movs	r3, #1
 80056d6:	e09f      	b.n	8005818 <_printf_i+0x1ec>
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	0607      	lsls	r7, r0, #24
 80056de:	f103 0104 	add.w	r1, r3, #4
 80056e2:	6029      	str	r1, [r5, #0]
 80056e4:	d501      	bpl.n	80056ea <_printf_i+0xbe>
 80056e6:	681e      	ldr	r6, [r3, #0]
 80056e8:	e003      	b.n	80056f2 <_printf_i+0xc6>
 80056ea:	0646      	lsls	r6, r0, #25
 80056ec:	d5fb      	bpl.n	80056e6 <_printf_i+0xba>
 80056ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056f2:	2e00      	cmp	r6, #0
 80056f4:	da03      	bge.n	80056fe <_printf_i+0xd2>
 80056f6:	232d      	movs	r3, #45	; 0x2d
 80056f8:	4276      	negs	r6, r6
 80056fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fe:	485a      	ldr	r0, [pc, #360]	; (8005868 <_printf_i+0x23c>)
 8005700:	230a      	movs	r3, #10
 8005702:	e012      	b.n	800572a <_printf_i+0xfe>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	1d19      	adds	r1, r3, #4
 800570a:	6029      	str	r1, [r5, #0]
 800570c:	0605      	lsls	r5, r0, #24
 800570e:	d501      	bpl.n	8005714 <_printf_i+0xe8>
 8005710:	681e      	ldr	r6, [r3, #0]
 8005712:	e002      	b.n	800571a <_printf_i+0xee>
 8005714:	0641      	lsls	r1, r0, #25
 8005716:	d5fb      	bpl.n	8005710 <_printf_i+0xe4>
 8005718:	881e      	ldrh	r6, [r3, #0]
 800571a:	4853      	ldr	r0, [pc, #332]	; (8005868 <_printf_i+0x23c>)
 800571c:	2f6f      	cmp	r7, #111	; 0x6f
 800571e:	bf0c      	ite	eq
 8005720:	2308      	moveq	r3, #8
 8005722:	230a      	movne	r3, #10
 8005724:	2100      	movs	r1, #0
 8005726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800572a:	6865      	ldr	r5, [r4, #4]
 800572c:	60a5      	str	r5, [r4, #8]
 800572e:	2d00      	cmp	r5, #0
 8005730:	bfa2      	ittt	ge
 8005732:	6821      	ldrge	r1, [r4, #0]
 8005734:	f021 0104 	bicge.w	r1, r1, #4
 8005738:	6021      	strge	r1, [r4, #0]
 800573a:	b90e      	cbnz	r6, 8005740 <_printf_i+0x114>
 800573c:	2d00      	cmp	r5, #0
 800573e:	d04b      	beq.n	80057d8 <_printf_i+0x1ac>
 8005740:	4615      	mov	r5, r2
 8005742:	fbb6 f1f3 	udiv	r1, r6, r3
 8005746:	fb03 6711 	mls	r7, r3, r1, r6
 800574a:	5dc7      	ldrb	r7, [r0, r7]
 800574c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005750:	4637      	mov	r7, r6
 8005752:	42bb      	cmp	r3, r7
 8005754:	460e      	mov	r6, r1
 8005756:	d9f4      	bls.n	8005742 <_printf_i+0x116>
 8005758:	2b08      	cmp	r3, #8
 800575a:	d10b      	bne.n	8005774 <_printf_i+0x148>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	07de      	lsls	r6, r3, #31
 8005760:	d508      	bpl.n	8005774 <_printf_i+0x148>
 8005762:	6923      	ldr	r3, [r4, #16]
 8005764:	6861      	ldr	r1, [r4, #4]
 8005766:	4299      	cmp	r1, r3
 8005768:	bfde      	ittt	le
 800576a:	2330      	movle	r3, #48	; 0x30
 800576c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005770:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005774:	1b52      	subs	r2, r2, r5
 8005776:	6122      	str	r2, [r4, #16]
 8005778:	f8cd a000 	str.w	sl, [sp]
 800577c:	464b      	mov	r3, r9
 800577e:	aa03      	add	r2, sp, #12
 8005780:	4621      	mov	r1, r4
 8005782:	4640      	mov	r0, r8
 8005784:	f7ff fee4 	bl	8005550 <_printf_common>
 8005788:	3001      	adds	r0, #1
 800578a:	d14a      	bne.n	8005822 <_printf_i+0x1f6>
 800578c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005790:	b004      	add	sp, #16
 8005792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	f043 0320 	orr.w	r3, r3, #32
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	4833      	ldr	r0, [pc, #204]	; (800586c <_printf_i+0x240>)
 80057a0:	2778      	movs	r7, #120	; 0x78
 80057a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	6829      	ldr	r1, [r5, #0]
 80057aa:	061f      	lsls	r7, r3, #24
 80057ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b0:	d402      	bmi.n	80057b8 <_printf_i+0x18c>
 80057b2:	065f      	lsls	r7, r3, #25
 80057b4:	bf48      	it	mi
 80057b6:	b2b6      	uxthmi	r6, r6
 80057b8:	07df      	lsls	r7, r3, #31
 80057ba:	bf48      	it	mi
 80057bc:	f043 0320 	orrmi.w	r3, r3, #32
 80057c0:	6029      	str	r1, [r5, #0]
 80057c2:	bf48      	it	mi
 80057c4:	6023      	strmi	r3, [r4, #0]
 80057c6:	b91e      	cbnz	r6, 80057d0 <_printf_i+0x1a4>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	f023 0320 	bic.w	r3, r3, #32
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	2310      	movs	r3, #16
 80057d2:	e7a7      	b.n	8005724 <_printf_i+0xf8>
 80057d4:	4824      	ldr	r0, [pc, #144]	; (8005868 <_printf_i+0x23c>)
 80057d6:	e7e4      	b.n	80057a2 <_printf_i+0x176>
 80057d8:	4615      	mov	r5, r2
 80057da:	e7bd      	b.n	8005758 <_printf_i+0x12c>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	6826      	ldr	r6, [r4, #0]
 80057e0:	6961      	ldr	r1, [r4, #20]
 80057e2:	1d18      	adds	r0, r3, #4
 80057e4:	6028      	str	r0, [r5, #0]
 80057e6:	0635      	lsls	r5, r6, #24
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	d501      	bpl.n	80057f0 <_printf_i+0x1c4>
 80057ec:	6019      	str	r1, [r3, #0]
 80057ee:	e002      	b.n	80057f6 <_printf_i+0x1ca>
 80057f0:	0670      	lsls	r0, r6, #25
 80057f2:	d5fb      	bpl.n	80057ec <_printf_i+0x1c0>
 80057f4:	8019      	strh	r1, [r3, #0]
 80057f6:	2300      	movs	r3, #0
 80057f8:	6123      	str	r3, [r4, #16]
 80057fa:	4615      	mov	r5, r2
 80057fc:	e7bc      	b.n	8005778 <_printf_i+0x14c>
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	1d1a      	adds	r2, r3, #4
 8005802:	602a      	str	r2, [r5, #0]
 8005804:	681d      	ldr	r5, [r3, #0]
 8005806:	6862      	ldr	r2, [r4, #4]
 8005808:	2100      	movs	r1, #0
 800580a:	4628      	mov	r0, r5
 800580c:	f7fa fce8 	bl	80001e0 <memchr>
 8005810:	b108      	cbz	r0, 8005816 <_printf_i+0x1ea>
 8005812:	1b40      	subs	r0, r0, r5
 8005814:	6060      	str	r0, [r4, #4]
 8005816:	6863      	ldr	r3, [r4, #4]
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	2300      	movs	r3, #0
 800581c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005820:	e7aa      	b.n	8005778 <_printf_i+0x14c>
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	462a      	mov	r2, r5
 8005826:	4649      	mov	r1, r9
 8005828:	4640      	mov	r0, r8
 800582a:	47d0      	blx	sl
 800582c:	3001      	adds	r0, #1
 800582e:	d0ad      	beq.n	800578c <_printf_i+0x160>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	079b      	lsls	r3, r3, #30
 8005834:	d413      	bmi.n	800585e <_printf_i+0x232>
 8005836:	68e0      	ldr	r0, [r4, #12]
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	4298      	cmp	r0, r3
 800583c:	bfb8      	it	lt
 800583e:	4618      	movlt	r0, r3
 8005840:	e7a6      	b.n	8005790 <_printf_i+0x164>
 8005842:	2301      	movs	r3, #1
 8005844:	4632      	mov	r2, r6
 8005846:	4649      	mov	r1, r9
 8005848:	4640      	mov	r0, r8
 800584a:	47d0      	blx	sl
 800584c:	3001      	adds	r0, #1
 800584e:	d09d      	beq.n	800578c <_printf_i+0x160>
 8005850:	3501      	adds	r5, #1
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	9903      	ldr	r1, [sp, #12]
 8005856:	1a5b      	subs	r3, r3, r1
 8005858:	42ab      	cmp	r3, r5
 800585a:	dcf2      	bgt.n	8005842 <_printf_i+0x216>
 800585c:	e7eb      	b.n	8005836 <_printf_i+0x20a>
 800585e:	2500      	movs	r5, #0
 8005860:	f104 0619 	add.w	r6, r4, #25
 8005864:	e7f5      	b.n	8005852 <_printf_i+0x226>
 8005866:	bf00      	nop
 8005868:	08005ea1 	.word	0x08005ea1
 800586c:	08005eb2 	.word	0x08005eb2

08005870 <__sflush_r>:
 8005870:	898a      	ldrh	r2, [r1, #12]
 8005872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005876:	4605      	mov	r5, r0
 8005878:	0710      	lsls	r0, r2, #28
 800587a:	460c      	mov	r4, r1
 800587c:	d458      	bmi.n	8005930 <__sflush_r+0xc0>
 800587e:	684b      	ldr	r3, [r1, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	dc05      	bgt.n	8005890 <__sflush_r+0x20>
 8005884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	dc02      	bgt.n	8005890 <__sflush_r+0x20>
 800588a:	2000      	movs	r0, #0
 800588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005892:	2e00      	cmp	r6, #0
 8005894:	d0f9      	beq.n	800588a <__sflush_r+0x1a>
 8005896:	2300      	movs	r3, #0
 8005898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800589c:	682f      	ldr	r7, [r5, #0]
 800589e:	6a21      	ldr	r1, [r4, #32]
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	d032      	beq.n	800590a <__sflush_r+0x9a>
 80058a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	075a      	lsls	r2, r3, #29
 80058aa:	d505      	bpl.n	80058b8 <__sflush_r+0x48>
 80058ac:	6863      	ldr	r3, [r4, #4]
 80058ae:	1ac0      	subs	r0, r0, r3
 80058b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058b2:	b10b      	cbz	r3, 80058b8 <__sflush_r+0x48>
 80058b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058b6:	1ac0      	subs	r0, r0, r3
 80058b8:	2300      	movs	r3, #0
 80058ba:	4602      	mov	r2, r0
 80058bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058be:	6a21      	ldr	r1, [r4, #32]
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b0      	blx	r6
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	d106      	bne.n	80058d8 <__sflush_r+0x68>
 80058ca:	6829      	ldr	r1, [r5, #0]
 80058cc:	291d      	cmp	r1, #29
 80058ce:	d82b      	bhi.n	8005928 <__sflush_r+0xb8>
 80058d0:	4a29      	ldr	r2, [pc, #164]	; (8005978 <__sflush_r+0x108>)
 80058d2:	410a      	asrs	r2, r1
 80058d4:	07d6      	lsls	r6, r2, #31
 80058d6:	d427      	bmi.n	8005928 <__sflush_r+0xb8>
 80058d8:	2200      	movs	r2, #0
 80058da:	6062      	str	r2, [r4, #4]
 80058dc:	04d9      	lsls	r1, r3, #19
 80058de:	6922      	ldr	r2, [r4, #16]
 80058e0:	6022      	str	r2, [r4, #0]
 80058e2:	d504      	bpl.n	80058ee <__sflush_r+0x7e>
 80058e4:	1c42      	adds	r2, r0, #1
 80058e6:	d101      	bne.n	80058ec <__sflush_r+0x7c>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b903      	cbnz	r3, 80058ee <__sflush_r+0x7e>
 80058ec:	6560      	str	r0, [r4, #84]	; 0x54
 80058ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058f0:	602f      	str	r7, [r5, #0]
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d0c9      	beq.n	800588a <__sflush_r+0x1a>
 80058f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058fa:	4299      	cmp	r1, r3
 80058fc:	d002      	beq.n	8005904 <__sflush_r+0x94>
 80058fe:	4628      	mov	r0, r5
 8005900:	f000 fa22 	bl	8005d48 <_free_r>
 8005904:	2000      	movs	r0, #0
 8005906:	6360      	str	r0, [r4, #52]	; 0x34
 8005908:	e7c0      	b.n	800588c <__sflush_r+0x1c>
 800590a:	2301      	movs	r3, #1
 800590c:	4628      	mov	r0, r5
 800590e:	47b0      	blx	r6
 8005910:	1c41      	adds	r1, r0, #1
 8005912:	d1c8      	bne.n	80058a6 <__sflush_r+0x36>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0c5      	beq.n	80058a6 <__sflush_r+0x36>
 800591a:	2b1d      	cmp	r3, #29
 800591c:	d001      	beq.n	8005922 <__sflush_r+0xb2>
 800591e:	2b16      	cmp	r3, #22
 8005920:	d101      	bne.n	8005926 <__sflush_r+0xb6>
 8005922:	602f      	str	r7, [r5, #0]
 8005924:	e7b1      	b.n	800588a <__sflush_r+0x1a>
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	e7ad      	b.n	800588c <__sflush_r+0x1c>
 8005930:	690f      	ldr	r7, [r1, #16]
 8005932:	2f00      	cmp	r7, #0
 8005934:	d0a9      	beq.n	800588a <__sflush_r+0x1a>
 8005936:	0793      	lsls	r3, r2, #30
 8005938:	680e      	ldr	r6, [r1, #0]
 800593a:	bf08      	it	eq
 800593c:	694b      	ldreq	r3, [r1, #20]
 800593e:	600f      	str	r7, [r1, #0]
 8005940:	bf18      	it	ne
 8005942:	2300      	movne	r3, #0
 8005944:	eba6 0807 	sub.w	r8, r6, r7
 8005948:	608b      	str	r3, [r1, #8]
 800594a:	f1b8 0f00 	cmp.w	r8, #0
 800594e:	dd9c      	ble.n	800588a <__sflush_r+0x1a>
 8005950:	6a21      	ldr	r1, [r4, #32]
 8005952:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005954:	4643      	mov	r3, r8
 8005956:	463a      	mov	r2, r7
 8005958:	4628      	mov	r0, r5
 800595a:	47b0      	blx	r6
 800595c:	2800      	cmp	r0, #0
 800595e:	dc06      	bgt.n	800596e <__sflush_r+0xfe>
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800596c:	e78e      	b.n	800588c <__sflush_r+0x1c>
 800596e:	4407      	add	r7, r0
 8005970:	eba8 0800 	sub.w	r8, r8, r0
 8005974:	e7e9      	b.n	800594a <__sflush_r+0xda>
 8005976:	bf00      	nop
 8005978:	dfbffffe 	.word	0xdfbffffe

0800597c <_fflush_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	690b      	ldr	r3, [r1, #16]
 8005980:	4605      	mov	r5, r0
 8005982:	460c      	mov	r4, r1
 8005984:	b913      	cbnz	r3, 800598c <_fflush_r+0x10>
 8005986:	2500      	movs	r5, #0
 8005988:	4628      	mov	r0, r5
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	b118      	cbz	r0, 8005996 <_fflush_r+0x1a>
 800598e:	6a03      	ldr	r3, [r0, #32]
 8005990:	b90b      	cbnz	r3, 8005996 <_fflush_r+0x1a>
 8005992:	f7ff fb21 	bl	8004fd8 <__sinit>
 8005996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f3      	beq.n	8005986 <_fflush_r+0xa>
 800599e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059a0:	07d0      	lsls	r0, r2, #31
 80059a2:	d404      	bmi.n	80059ae <_fflush_r+0x32>
 80059a4:	0599      	lsls	r1, r3, #22
 80059a6:	d402      	bmi.n	80059ae <_fflush_r+0x32>
 80059a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059aa:	f7ff fbec 	bl	8005186 <__retarget_lock_acquire_recursive>
 80059ae:	4628      	mov	r0, r5
 80059b0:	4621      	mov	r1, r4
 80059b2:	f7ff ff5d 	bl	8005870 <__sflush_r>
 80059b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b8:	07da      	lsls	r2, r3, #31
 80059ba:	4605      	mov	r5, r0
 80059bc:	d4e4      	bmi.n	8005988 <_fflush_r+0xc>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	059b      	lsls	r3, r3, #22
 80059c2:	d4e1      	bmi.n	8005988 <_fflush_r+0xc>
 80059c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059c6:	f7ff fbdf 	bl	8005188 <__retarget_lock_release_recursive>
 80059ca:	e7dd      	b.n	8005988 <_fflush_r+0xc>

080059cc <__malloc_lock>:
 80059cc:	4801      	ldr	r0, [pc, #4]	; (80059d4 <__malloc_lock+0x8>)
 80059ce:	f7ff bbda 	b.w	8005186 <__retarget_lock_acquire_recursive>
 80059d2:	bf00      	nop
 80059d4:	20000310 	.word	0x20000310

080059d8 <__malloc_unlock>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__malloc_unlock+0x8>)
 80059da:	f7ff bbd5 	b.w	8005188 <__retarget_lock_release_recursive>
 80059de:	bf00      	nop
 80059e0:	20000310 	.word	0x20000310

080059e4 <__sread>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	460c      	mov	r4, r1
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	f000 f978 	bl	8005ce0 <_read_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	bfab      	itete	ge
 80059f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059f6:	89a3      	ldrhlt	r3, [r4, #12]
 80059f8:	181b      	addge	r3, r3, r0
 80059fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059fe:	bfac      	ite	ge
 8005a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a02:	81a3      	strhlt	r3, [r4, #12]
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <__swrite>:
 8005a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	461f      	mov	r7, r3
 8005a0c:	898b      	ldrh	r3, [r1, #12]
 8005a0e:	05db      	lsls	r3, r3, #23
 8005a10:	4605      	mov	r5, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	4616      	mov	r6, r2
 8005a16:	d505      	bpl.n	8005a24 <__swrite+0x1e>
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f000 f94c 	bl	8005cbc <_lseek_r>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	4632      	mov	r2, r6
 8005a32:	463b      	mov	r3, r7
 8005a34:	4628      	mov	r0, r5
 8005a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	f000 b973 	b.w	8005d24 <_write_r>

08005a3e <__sseek>:
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	460c      	mov	r4, r1
 8005a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a46:	f000 f939 	bl	8005cbc <_lseek_r>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	bf15      	itete	ne
 8005a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a5a:	81a3      	strheq	r3, [r4, #12]
 8005a5c:	bf18      	it	ne
 8005a5e:	81a3      	strhne	r3, [r4, #12]
 8005a60:	bd10      	pop	{r4, pc}

08005a62 <__sclose>:
 8005a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a66:	f000 b8f7 	b.w	8005c58 <_close_r>

08005a6a <__swbuf_r>:
 8005a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6c:	460e      	mov	r6, r1
 8005a6e:	4614      	mov	r4, r2
 8005a70:	4605      	mov	r5, r0
 8005a72:	b118      	cbz	r0, 8005a7c <__swbuf_r+0x12>
 8005a74:	6a03      	ldr	r3, [r0, #32]
 8005a76:	b90b      	cbnz	r3, 8005a7c <__swbuf_r+0x12>
 8005a78:	f7ff faae 	bl	8004fd8 <__sinit>
 8005a7c:	69a3      	ldr	r3, [r4, #24]
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	071a      	lsls	r2, r3, #28
 8005a84:	d525      	bpl.n	8005ad2 <__swbuf_r+0x68>
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	b31b      	cbz	r3, 8005ad2 <__swbuf_r+0x68>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	6922      	ldr	r2, [r4, #16]
 8005a8e:	1a98      	subs	r0, r3, r2
 8005a90:	6963      	ldr	r3, [r4, #20]
 8005a92:	b2f6      	uxtb	r6, r6
 8005a94:	4283      	cmp	r3, r0
 8005a96:	4637      	mov	r7, r6
 8005a98:	dc04      	bgt.n	8005aa4 <__swbuf_r+0x3a>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f7ff ff6d 	bl	800597c <_fflush_r>
 8005aa2:	b9e0      	cbnz	r0, 8005ade <__swbuf_r+0x74>
 8005aa4:	68a3      	ldr	r3, [r4, #8]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	60a3      	str	r3, [r4, #8]
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	6022      	str	r2, [r4, #0]
 8005ab0:	701e      	strb	r6, [r3, #0]
 8005ab2:	6962      	ldr	r2, [r4, #20]
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d004      	beq.n	8005ac4 <__swbuf_r+0x5a>
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	07db      	lsls	r3, r3, #31
 8005abe:	d506      	bpl.n	8005ace <__swbuf_r+0x64>
 8005ac0:	2e0a      	cmp	r6, #10
 8005ac2:	d104      	bne.n	8005ace <__swbuf_r+0x64>
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f7ff ff58 	bl	800597c <_fflush_r>
 8005acc:	b938      	cbnz	r0, 8005ade <__swbuf_r+0x74>
 8005ace:	4638      	mov	r0, r7
 8005ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f000 f805 	bl	8005ae4 <__swsetup_r>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d0d5      	beq.n	8005a8a <__swbuf_r+0x20>
 8005ade:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ae2:	e7f4      	b.n	8005ace <__swbuf_r+0x64>

08005ae4 <__swsetup_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <__swsetup_r+0xac>)
 8005ae8:	4605      	mov	r5, r0
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	460c      	mov	r4, r1
 8005aee:	b118      	cbz	r0, 8005af8 <__swsetup_r+0x14>
 8005af0:	6a03      	ldr	r3, [r0, #32]
 8005af2:	b90b      	cbnz	r3, 8005af8 <__swsetup_r+0x14>
 8005af4:	f7ff fa70 	bl	8004fd8 <__sinit>
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005afe:	0718      	lsls	r0, r3, #28
 8005b00:	d422      	bmi.n	8005b48 <__swsetup_r+0x64>
 8005b02:	06d9      	lsls	r1, r3, #27
 8005b04:	d407      	bmi.n	8005b16 <__swsetup_r+0x32>
 8005b06:	2309      	movs	r3, #9
 8005b08:	602b      	str	r3, [r5, #0]
 8005b0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b14:	e034      	b.n	8005b80 <__swsetup_r+0x9c>
 8005b16:	0758      	lsls	r0, r3, #29
 8005b18:	d512      	bpl.n	8005b40 <__swsetup_r+0x5c>
 8005b1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b1c:	b141      	cbz	r1, 8005b30 <__swsetup_r+0x4c>
 8005b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b22:	4299      	cmp	r1, r3
 8005b24:	d002      	beq.n	8005b2c <__swsetup_r+0x48>
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 f90e 	bl	8005d48 <_free_r>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6363      	str	r3, [r4, #52]	; 0x34
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	6063      	str	r3, [r4, #4]
 8005b3c:	6923      	ldr	r3, [r4, #16]
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	f043 0308 	orr.w	r3, r3, #8
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	b94b      	cbnz	r3, 8005b60 <__swsetup_r+0x7c>
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b56:	d003      	beq.n	8005b60 <__swsetup_r+0x7c>
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 f840 	bl	8005be0 <__smakebuf_r>
 8005b60:	89a0      	ldrh	r0, [r4, #12]
 8005b62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b66:	f010 0301 	ands.w	r3, r0, #1
 8005b6a:	d00a      	beq.n	8005b82 <__swsetup_r+0x9e>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60a3      	str	r3, [r4, #8]
 8005b70:	6963      	ldr	r3, [r4, #20]
 8005b72:	425b      	negs	r3, r3
 8005b74:	61a3      	str	r3, [r4, #24]
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	b943      	cbnz	r3, 8005b8c <__swsetup_r+0xa8>
 8005b7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b7e:	d1c4      	bne.n	8005b0a <__swsetup_r+0x26>
 8005b80:	bd38      	pop	{r3, r4, r5, pc}
 8005b82:	0781      	lsls	r1, r0, #30
 8005b84:	bf58      	it	pl
 8005b86:	6963      	ldrpl	r3, [r4, #20]
 8005b88:	60a3      	str	r3, [r4, #8]
 8005b8a:	e7f4      	b.n	8005b76 <__swsetup_r+0x92>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e7f7      	b.n	8005b80 <__swsetup_r+0x9c>
 8005b90:	20000078 	.word	0x20000078

08005b94 <__swhatbuf_r>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	460c      	mov	r4, r1
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	b096      	sub	sp, #88	; 0x58
 8005ba0:	4615      	mov	r5, r2
 8005ba2:	461e      	mov	r6, r3
 8005ba4:	da0d      	bge.n	8005bc2 <__swhatbuf_r+0x2e>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bac:	f04f 0100 	mov.w	r1, #0
 8005bb0:	bf0c      	ite	eq
 8005bb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005bb6:	2340      	movne	r3, #64	; 0x40
 8005bb8:	2000      	movs	r0, #0
 8005bba:	6031      	str	r1, [r6, #0]
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	b016      	add	sp, #88	; 0x58
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}
 8005bc2:	466a      	mov	r2, sp
 8005bc4:	f000 f858 	bl	8005c78 <_fstat_r>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	dbec      	blt.n	8005ba6 <__swhatbuf_r+0x12>
 8005bcc:	9901      	ldr	r1, [sp, #4]
 8005bce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005bd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005bd6:	4259      	negs	r1, r3
 8005bd8:	4159      	adcs	r1, r3
 8005bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bde:	e7eb      	b.n	8005bb8 <__swhatbuf_r+0x24>

08005be0 <__smakebuf_r>:
 8005be0:	898b      	ldrh	r3, [r1, #12]
 8005be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005be4:	079d      	lsls	r5, r3, #30
 8005be6:	4606      	mov	r6, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	d507      	bpl.n	8005bfc <__smakebuf_r+0x1c>
 8005bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	6163      	str	r3, [r4, #20]
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	ab01      	add	r3, sp, #4
 8005bfe:	466a      	mov	r2, sp
 8005c00:	f7ff ffc8 	bl	8005b94 <__swhatbuf_r>
 8005c04:	9900      	ldr	r1, [sp, #0]
 8005c06:	4605      	mov	r5, r0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff fc21 	bl	8005450 <_malloc_r>
 8005c0e:	b948      	cbnz	r0, 8005c24 <__smakebuf_r+0x44>
 8005c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c14:	059a      	lsls	r2, r3, #22
 8005c16:	d4ef      	bmi.n	8005bf8 <__smakebuf_r+0x18>
 8005c18:	f023 0303 	bic.w	r3, r3, #3
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	e7e3      	b.n	8005bec <__smakebuf_r+0xc>
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	6020      	str	r0, [r4, #0]
 8005c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2c:	81a3      	strh	r3, [r4, #12]
 8005c2e:	9b00      	ldr	r3, [sp, #0]
 8005c30:	6163      	str	r3, [r4, #20]
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	6120      	str	r0, [r4, #16]
 8005c36:	b15b      	cbz	r3, 8005c50 <__smakebuf_r+0x70>
 8005c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f82d 	bl	8005c9c <_isatty_r>
 8005c42:	b128      	cbz	r0, 8005c50 <__smakebuf_r+0x70>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f023 0303 	bic.w	r3, r3, #3
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	431d      	orrs	r5, r3
 8005c54:	81a5      	strh	r5, [r4, #12]
 8005c56:	e7cf      	b.n	8005bf8 <__smakebuf_r+0x18>

08005c58 <_close_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d06      	ldr	r5, [pc, #24]	; (8005c74 <_close_r+0x1c>)
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	602b      	str	r3, [r5, #0]
 8005c64:	f7fb fd9d 	bl	80017a2 <_close>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_close_r+0x1a>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_close_r+0x1a>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	2000031c 	.word	0x2000031c

08005c78 <_fstat_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4d07      	ldr	r5, [pc, #28]	; (8005c98 <_fstat_r+0x20>)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4604      	mov	r4, r0
 8005c80:	4608      	mov	r0, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	602b      	str	r3, [r5, #0]
 8005c86:	f7fb fd98 	bl	80017ba <_fstat>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d102      	bne.n	8005c94 <_fstat_r+0x1c>
 8005c8e:	682b      	ldr	r3, [r5, #0]
 8005c90:	b103      	cbz	r3, 8005c94 <_fstat_r+0x1c>
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	bd38      	pop	{r3, r4, r5, pc}
 8005c96:	bf00      	nop
 8005c98:	2000031c 	.word	0x2000031c

08005c9c <_isatty_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4d06      	ldr	r5, [pc, #24]	; (8005cb8 <_isatty_r+0x1c>)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	f7fb fd97 	bl	80017da <_isatty>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_isatty_r+0x1a>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_isatty_r+0x1a>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	2000031c 	.word	0x2000031c

08005cbc <_lseek_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d07      	ldr	r5, [pc, #28]	; (8005cdc <_lseek_r+0x20>)
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	4608      	mov	r0, r1
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	602a      	str	r2, [r5, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f7fb fd90 	bl	80017f0 <_lseek>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d102      	bne.n	8005cda <_lseek_r+0x1e>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	b103      	cbz	r3, 8005cda <_lseek_r+0x1e>
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	2000031c 	.word	0x2000031c

08005ce0 <_read_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4d07      	ldr	r5, [pc, #28]	; (8005d00 <_read_r+0x20>)
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	4608      	mov	r0, r1
 8005ce8:	4611      	mov	r1, r2
 8005cea:	2200      	movs	r2, #0
 8005cec:	602a      	str	r2, [r5, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f7fb fd3a 	bl	8001768 <_read>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_read_r+0x1e>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_read_r+0x1e>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	2000031c 	.word	0x2000031c

08005d04 <_sbrk_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d06      	ldr	r5, [pc, #24]	; (8005d20 <_sbrk_r+0x1c>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f7fb fd7c 	bl	800180c <_sbrk>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_sbrk_r+0x1a>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_sbrk_r+0x1a>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	2000031c 	.word	0x2000031c

08005d24 <_write_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	; (8005d44 <_write_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fb fbbc 	bl	80014b0 <_write>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_write_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_write_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	2000031c 	.word	0x2000031c

08005d48 <_free_r>:
 8005d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d044      	beq.n	8005dd8 <_free_r+0x90>
 8005d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d52:	9001      	str	r0, [sp, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f1a1 0404 	sub.w	r4, r1, #4
 8005d5a:	bfb8      	it	lt
 8005d5c:	18e4      	addlt	r4, r4, r3
 8005d5e:	f7ff fe35 	bl	80059cc <__malloc_lock>
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <_free_r+0x94>)
 8005d64:	9801      	ldr	r0, [sp, #4]
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	b933      	cbnz	r3, 8005d78 <_free_r+0x30>
 8005d6a:	6063      	str	r3, [r4, #4]
 8005d6c:	6014      	str	r4, [r2, #0]
 8005d6e:	b003      	add	sp, #12
 8005d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d74:	f7ff be30 	b.w	80059d8 <__malloc_unlock>
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	d908      	bls.n	8005d8e <_free_r+0x46>
 8005d7c:	6825      	ldr	r5, [r4, #0]
 8005d7e:	1961      	adds	r1, r4, r5
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf01      	itttt	eq
 8005d84:	6819      	ldreq	r1, [r3, #0]
 8005d86:	685b      	ldreq	r3, [r3, #4]
 8005d88:	1949      	addeq	r1, r1, r5
 8005d8a:	6021      	streq	r1, [r4, #0]
 8005d8c:	e7ed      	b.n	8005d6a <_free_r+0x22>
 8005d8e:	461a      	mov	r2, r3
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b10b      	cbz	r3, 8005d98 <_free_r+0x50>
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	d9fa      	bls.n	8005d8e <_free_r+0x46>
 8005d98:	6811      	ldr	r1, [r2, #0]
 8005d9a:	1855      	adds	r5, r2, r1
 8005d9c:	42a5      	cmp	r5, r4
 8005d9e:	d10b      	bne.n	8005db8 <_free_r+0x70>
 8005da0:	6824      	ldr	r4, [r4, #0]
 8005da2:	4421      	add	r1, r4
 8005da4:	1854      	adds	r4, r2, r1
 8005da6:	42a3      	cmp	r3, r4
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	d1e0      	bne.n	8005d6e <_free_r+0x26>
 8005dac:	681c      	ldr	r4, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	6053      	str	r3, [r2, #4]
 8005db2:	440c      	add	r4, r1
 8005db4:	6014      	str	r4, [r2, #0]
 8005db6:	e7da      	b.n	8005d6e <_free_r+0x26>
 8005db8:	d902      	bls.n	8005dc0 <_free_r+0x78>
 8005dba:	230c      	movs	r3, #12
 8005dbc:	6003      	str	r3, [r0, #0]
 8005dbe:	e7d6      	b.n	8005d6e <_free_r+0x26>
 8005dc0:	6825      	ldr	r5, [r4, #0]
 8005dc2:	1961      	adds	r1, r4, r5
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	bf04      	itt	eq
 8005dc8:	6819      	ldreq	r1, [r3, #0]
 8005dca:	685b      	ldreq	r3, [r3, #4]
 8005dcc:	6063      	str	r3, [r4, #4]
 8005dce:	bf04      	itt	eq
 8005dd0:	1949      	addeq	r1, r1, r5
 8005dd2:	6021      	streq	r1, [r4, #0]
 8005dd4:	6054      	str	r4, [r2, #4]
 8005dd6:	e7ca      	b.n	8005d6e <_free_r+0x26>
 8005dd8:	b003      	add	sp, #12
 8005dda:	bd30      	pop	{r4, r5, pc}
 8005ddc:	20000314 	.word	0x20000314

08005de0 <_init>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	bf00      	nop
 8005de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de6:	bc08      	pop	{r3}
 8005de8:	469e      	mov	lr, r3
 8005dea:	4770      	bx	lr

08005dec <_fini>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	bf00      	nop
 8005df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df2:	bc08      	pop	{r3}
 8005df4:	469e      	mov	lr, r3
 8005df6:	4770      	bx	lr
