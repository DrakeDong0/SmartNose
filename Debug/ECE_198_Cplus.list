
ECE_198_Cplus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007208  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  080073a8  080073a8  000173a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075bc  080075bc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080075bc  080075bc  000175bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c4  080075c4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080075cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000007c  08007648  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08007648  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eefe  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237f  00000000  00000000  0002efed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00031370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b55  00000000  00000000  000321f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a7e  00000000  00000000  00032d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001093a  00000000  00000000  0004b7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b7b0  00000000  00000000  0005c105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c20  00000000  00000000  000f78b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000fc4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007390 	.word	0x08007390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08007390 	.word	0x08007390

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000eb4:	b5b0      	push	{r4, r5, r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000ec2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000eca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ece:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000ed4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ed6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f80e 	bl	8000f0a <Lcd_init>

	return lcd;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	461d      	mov	r5, r3
 8000ef2:	f107 0410 	add.w	r4, r7, #16
 8000ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000efa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000efe:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}

08000f0a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7d9b      	ldrb	r3, [r3, #22]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10c      	bne.n	8000f34 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000f1a:	2133      	movs	r1, #51	; 0x33
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f87b 	bl	8001018 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000f22:	2132      	movs	r1, #50	; 0x32
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f877 	bl	8001018 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000f2a:	2128      	movs	r1, #40	; 0x28
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f873 	bl	8001018 <lcd_write_command>
 8000f32:	e003      	b.n	8000f3c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000f34:	2138      	movs	r1, #56	; 0x38
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f86e 	bl	8001018 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f86a 	bl	8001018 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000f44:	210c      	movs	r1, #12
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f866 	bl	8001018 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000f4c:	2106      	movs	r1, #6
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f862 	bl	8001018 <lcd_write_command>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	4906      	ldr	r1, [pc, #24]	; (8000f88 <Lcd_int+0x2c>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 f868 	bl	8006044 <siprintf>

	Lcd_string(lcd, buffer);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f806 	bl	8000f8c <Lcd_string>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	080073a8 	.word	0x080073a8

08000f8c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e00a      	b.n	8000fb2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f864 	bl	8001074 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	7bfc      	ldrb	r4, [r7, #15]
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f7ff f913 	bl	80001e0 <strlen>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	429c      	cmp	r4, r3
 8000fbe:	d3ed      	bcc.n	8000f9c <Lcd_string+0x10>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
	...

08000fcc <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <Lcd_cursor+0x30>)
 8000fe0:	5cd2      	ldrb	r2, [r2, r3]
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3b80      	subs	r3, #128	; 0x80
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f812 	bl	8001018 <lcd_write_command>
	#endif
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08007530 	.word	0x08007530

08001000 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8001008:	2101      	movs	r1, #1
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f804 	bl	8001018 <lcd_write_command>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6898      	ldr	r0, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	899b      	ldrh	r3, [r3, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	4619      	mov	r1, r3
 8001030:	f002 feae 	bl	8003d90 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7d9b      	ldrb	r3, [r3, #22]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d111      	bne.n	8001060 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2204      	movs	r2, #4
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f842 	bl	80010d0 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2204      	movs	r2, #4
 8001056:	4619      	mov	r1, r3
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f839 	bl	80010d0 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800105e:	e005      	b.n	800106c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2208      	movs	r2, #8
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f832 	bl	80010d0 <lcd_write>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	899b      	ldrh	r3, [r3, #12]
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	f002 fe80 	bl	8003d90 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7d9b      	ldrb	r3, [r3, #22]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d111      	bne.n	80010bc <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2204      	movs	r2, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f814 	bl	80010d0 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2204      	movs	r2, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f80b 	bl	80010d0 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80010ba:	e005      	b.n	80010c8 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	2208      	movs	r2, #8
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f804 	bl	80010d0 <lcd_write>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
 80010dc:	4613      	mov	r3, r2
 80010de:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e019      	b.n	800111a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	8819      	ldrh	r1, [r3, #0]
 80010fe:	78fa      	ldrb	r2, [r7, #3]
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	fa42 f303 	asr.w	r3, r2, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f002 fe3e 	bl	8003d90 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3301      	adds	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	78bb      	ldrb	r3, [r7, #2]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3e1      	bcc.n	80010e6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6918      	ldr	r0, [r3, #16]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	8a9b      	ldrh	r3, [r3, #20]
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	f002 fe2f 	bl	8003d90 <HAL_GPIO_WritePin>
	DELAY(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f001 fc8e 	bl	8002a54 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6918      	ldr	r0, [r3, #16]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	8a9b      	ldrh	r3, [r3, #20]
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	f002 fe24 	bl	8003d90 <HAL_GPIO_WritePin>
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001158:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800115c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d013      	beq.n	8001190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800116c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001178:	e000      	b.n	800117c <ITM_SendChar+0x2c>
    {
      __NOP();
 800117a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800117c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f9      	beq.n	800117a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001186:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <ADC_Select_CH0.0>:
    int mq4median = 0;
    int mq135median = 0;
    int mq136median = 0;

  void ADC_Select_CH0 (void)
  {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	f8c7 c004 	str.w	ip, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80011c0:	2302      	movs	r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <ADC_Select_CH0.0+0x44>)
 80011cc:	f001 fe2a 	bl	8002e24 <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <ADC_Select_CH0.0+0x3a>
  	  {
  	    Error_Handler();
 80011d6:	f001 f9bf 	bl	8002558 <Error_Handler>
  	  }
  }
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000098 	.word	0x20000098

080011e8 <main>:
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	f5ad 5d3e 	sub.w	sp, sp, #12160	; 0x2f80
 80011ee:	b088      	sub	sp, #32
 80011f0:	af04      	add	r7, sp, #16
int main(void)
 80011f2:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 80011f6:	f103 0320 	add.w	r3, r3, #32
 80011fa:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 80011fe:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001202:	6013      	str	r3, [r2, #0]
  HAL_Init();
 8001204:	f001 fbb4 	bl	8002970 <HAL_Init>
  SystemClock_Config();
 8001208:	f000 ff88 	bl	800211c <SystemClock_Config>
  MX_GPIO_Init();
 800120c:	f001 f8f8 	bl	8002400 <MX_GPIO_Init>
  MX_DMA_Init();
 8001210:	f001 f8d6 	bl	80023c0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001214:	f001 f85e 	bl	80022d4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001218:	f000 ffea 	bl	80021f0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800121c:	f001 f8a6 	bl	800236c <MX_USART2_UART_Init>
    const int max_time = 10000;
 8001220:	f242 7310 	movw	r3, #10000	; 0x2710
 8001224:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001228:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800122c:	6013      	str	r3, [r2, #0]
    int time = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 8001234:	f102 020c 	add.w	r2, r2, #12
 8001238:	6013      	str	r3, [r2, #0]
    bool clock = true;
 800123a:	2301      	movs	r3, #1
 800123c:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 8001240:	f102 020b 	add.w	r2, r2, #11
 8001244:	7013      	strb	r3, [r2, #0]
    int button = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 800124c:	f102 0204 	add.w	r2, r2, #4
 8001250:	6013      	str	r3, [r2, #0]
    int mq4size = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 8001258:	6013      	str	r3, [r2, #0]
    int mq135size = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001260:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001264:	6013      	str	r3, [r2, #0]
    int mq136size = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 800126c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001270:	6013      	str	r3, [r2, #0]
    int mq4mean = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001278:	f102 0220 	add.w	r2, r2, #32
 800127c:	6013      	str	r3, [r2, #0]
    int mq135mean = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001284:	f102 021c 	add.w	r2, r2, #28
 8001288:	6013      	str	r3, [r2, #0]
    int mq136mean = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001290:	f102 0218 	add.w	r2, r2, #24
 8001294:	6013      	str	r3, [r2, #0]
    int mq4dev =  0;
 8001296:	2300      	movs	r3, #0
 8001298:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 800129c:	f102 0214 	add.w	r2, r2, #20
 80012a0:	6013      	str	r3, [r2, #0]
    int mq135dev = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80012a8:	f102 0210 	add.w	r2, r2, #16
 80012ac:	6013      	str	r3, [r2, #0]
    int mq136dev = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80012b4:	f102 020c 	add.w	r2, r2, #12
 80012b8:	6013      	str	r3, [r2, #0]
    int mq4median = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80012c0:	f102 0208 	add.w	r2, r2, #8
 80012c4:	6013      	str	r3, [r2, #0]
    int mq135median = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80012cc:	f102 0204 	add.w	r2, r2, #4
 80012d0:	6013      	str	r3, [r2, #0]
    int mq136median = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80012d8:	6013      	str	r3, [r2, #0]
              median = array[(size-1)/2];
          }
      }
      return median;
    }
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 80012da:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 80012de:	f6a3 7358 	subw	r3, r3, #3928	; 0xf58
 80012e2:	4a72      	ldr	r2, [pc, #456]	; (80014ac <main+0x2c4>)
 80012e4:	461c      	mov	r4, r3
 80012e6:	4613      	mov	r3, r2
 80012e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 80012ee:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 80012f2:	f5a3 6376 	sub.w	r3, r3, #3936	; 0xf60
 80012f6:	4a6e      	ldr	r2, [pc, #440]	; (80014b0 <main+0x2c8>)
 80012f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012fc:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8001300:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8001304:	f6a3 7478 	subw	r4, r3, #3960	; 0xf78
 8001308:	f107 0010 	add.w	r0, r7, #16
 800130c:	3810      	subs	r0, #16
 800130e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001312:	3a20      	subs	r2, #32
 8001314:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001318:	3918      	subs	r1, #24
 800131a:	2300      	movs	r3, #0
 800131c:	9303      	str	r3, [sp, #12]
 800131e:	2310      	movs	r3, #16
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <main+0x2cc>)
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	2320      	movs	r3, #32
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <main+0x2cc>)
 800132c:	f7ff fdc2 	bl	8000eb4 <Lcd_create>
 8001330:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8001334:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001338:	461d      	mov	r5, r3
 800133a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001342:	e884 0003 	stmia.w	r4, {r0, r1}
      for ( int x = 1; x< 4 ; x++ )
 8001346:	2301      	movs	r3, #1
 8001348:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 800134c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e044      	b.n	80013de <main+0x1f6>
      {
      Lcd_clear(&lcd);
 8001354:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001358:	3b38      	subs	r3, #56	; 0x38
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe50 	bl	8001000 <Lcd_clear>
      Lcd_cursor(&lcd, 1,1);
 8001360:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001364:	3b38      	subs	r3, #56	; 0x38
 8001366:	2201      	movs	r2, #1
 8001368:	2101      	movs	r1, #1
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fe2e 	bl	8000fcc <Lcd_cursor>
      Lcd_int(&lcd, x);
 8001370:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001374:	3b38      	subs	r3, #56	; 0x38
 8001376:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 800137a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800137e:	6811      	ldr	r1, [r2, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fdeb 	bl	8000f5c <Lcd_int>
      printf("%d \n", x);
 8001386:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 800138a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800138e:	6819      	ldr	r1, [r3, #0]
 8001390:	4849      	ldr	r0, [pc, #292]	; (80014b8 <main+0x2d0>)
 8001392:	f004 ff39 	bl	8006208 <iprintf>
        Lcd_cursor(&lcd, 0,1);
 8001396:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800139a:	3b38      	subs	r3, #56	; 0x38
 800139c:	2201      	movs	r2, #1
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe13 	bl	8000fcc <Lcd_cursor>
        Lcd_string(&lcd, "Sensors Warming Up!");
 80013a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013aa:	3b38      	subs	r3, #56	; 0x38
 80013ac:	4943      	ldr	r1, [pc, #268]	; (80014bc <main+0x2d4>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fdec 	bl	8000f8c <Lcd_string>
        HAL_Delay (1000);
 80013b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b8:	f001 fb4c 	bl	8002a54 <HAL_Delay>
        Lcd_clear(&lcd);
 80013bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013c0:	3b38      	subs	r3, #56	; 0x38
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fe1c 	bl	8001000 <Lcd_clear>
      for ( int x = 1; x< 4 ; x++ )
 80013c8:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80013cc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80013d8:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80013e2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	ddb3      	ble.n	8001354 <main+0x16c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (clock)
 80013ec:	e185      	b.n	80016fa <main+0x512>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Lcd_clear(&lcd);
 80013ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013f2:	3b38      	subs	r3, #56	; 0x38
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fe03 	bl	8001000 <Lcd_clear>
	      Lcd_cursor(&lcd, 1,1);
 80013fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013fe:	3b38      	subs	r3, #56	; 0x38
 8001400:	2201      	movs	r2, #1
 8001402:	2101      	movs	r1, #1
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fde1 	bl	8000fcc <Lcd_cursor>
	      Lcd_int(&lcd, (time/1000));
 800140a:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 800140e:	f103 030c 	add.w	r3, r3, #12
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <main+0x2d8>)
 8001416:	fb82 1203 	smull	r1, r2, r2, r3
 800141a:	1192      	asrs	r2, r2, #6
 800141c:	17db      	asrs	r3, r3, #31
 800141e:	1ad2      	subs	r2, r2, r3
 8001420:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001424:	3b38      	subs	r3, #56	; 0x38
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fd97 	bl	8000f5c <Lcd_int>
	      Lcd_cursor(&lcd, 0,1);
 800142e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001432:	3b38      	subs	r3, #56	; 0x38
 8001434:	2201      	movs	r2, #1
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fdc7 	bl	8000fcc <Lcd_cursor>
	      Lcd_string(&lcd, "Reading inputs...");
 800143e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001442:	3b38      	subs	r3, #56	; 0x38
 8001444:	491f      	ldr	r1, [pc, #124]	; (80014c4 <main+0x2dc>)
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fda0 	bl	8000f8c <Lcd_string>
	      if (HAL_GPIO_ReadPin(SW_PORT, SW_PIN) != GPIO_PIN_SET)
 800144c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001450:	481d      	ldr	r0, [pc, #116]	; (80014c8 <main+0x2e0>)
 8001452:	f002 fc85 	bl	8003d60 <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d019      	beq.n	8001490 <main+0x2a8>

	        {
	         printf("OFF \n");
 800145c:	481b      	ldr	r0, [pc, #108]	; (80014cc <main+0x2e4>)
 800145e:	f004 ff41 	bl	80062e4 <puts>
	         if(button == 0){
 8001462:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 8001466:	f103 0304 	add.w	r3, r3, #4
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d106      	bne.n	800147e <main+0x296>

	        button = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 8001476:	f102 0204 	add.w	r2, r2, #4
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e008      	b.n	8001490 <main+0x2a8>
	        }
	         else{
	           button = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 8001484:	f102 0204 	add.w	r2, r2, #4
 8001488:	6013      	str	r3, [r2, #0]
	           printf("ON \n");
 800148a:	4811      	ldr	r0, [pc, #68]	; (80014d0 <main+0x2e8>)
 800148c:	f004 ff2a 	bl	80062e4 <puts>
	         }
	        }

	       if(button == 1){
 8001490:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 8001494:	f103 0304 	add.w	r3, r3, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d11c      	bne.n	80014d8 <main+0x2f0>
	         HAL_GPIO_WritePin(LED_PORT, LED_PIN,1);	   }
 800149e:	2201      	movs	r2, #1
 80014a0:	2120      	movs	r1, #32
 80014a2:	480c      	ldr	r0, [pc, #48]	; (80014d4 <main+0x2ec>)
 80014a4:	f002 fc74 	bl	8003d90 <HAL_GPIO_WritePin>
 80014a8:	e01b      	b.n	80014e2 <main+0x2fa>
 80014aa:	bf00      	nop
 80014ac:	08007518 	.word	0x08007518
 80014b0:	08007528 	.word	0x08007528
 80014b4:	40020400 	.word	0x40020400
 80014b8:	080073ac 	.word	0x080073ac
 80014bc:	080073b4 	.word	0x080073b4
 80014c0:	10624dd3 	.word	0x10624dd3
 80014c4:	080073c8 	.word	0x080073c8
 80014c8:	40020800 	.word	0x40020800
 80014cc:	080073dc 	.word	0x080073dc
 80014d0:	080073e4 	.word	0x080073e4
 80014d4:	40020000 	.word	0x40020000
	       else{
	        HAL_GPIO_WritePin(LED_PORT, LED_PIN,0);
 80014d8:	2200      	movs	r2, #0
 80014da:	2120      	movs	r1, #32
 80014dc:	48dd      	ldr	r0, [pc, #884]	; (8001854 <main+0x66c>)
 80014de:	f002 fc57 	bl	8003d90 <HAL_GPIO_WritePin>
	       }
	      ADC_Select_CH0();//MQ4
 80014e2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80014e6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80014ea:	469c      	mov	ip, r3
 80014ec:	f7ff fe58 	bl	80011a0 <ADC_Select_CH0.0>
	      HAL_ADC_Start(&hadc1);
 80014f0:	48d9      	ldr	r0, [pc, #868]	; (8001858 <main+0x670>)
 80014f2:	f001 fb17 	bl	8002b24 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, 1000);
 80014f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014fa:	48d7      	ldr	r0, [pc, #860]	; (8001858 <main+0x670>)
 80014fc:	f001 fbf9 	bl	8002cf2 <HAL_ADC_PollForConversion>
	      int x = HAL_ADC_GetValue(&hadc1);
 8001500:	48d5      	ldr	r0, [pc, #852]	; (8001858 <main+0x670>)
 8001502:	f001 fc81 	bl	8002e08 <HAL_ADC_GetValue>
 8001506:	4603      	mov	r3, r0
 8001508:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 800150c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001510:	6013      	str	r3, [r2, #0]
	      HAL_ADC_Stop(&hadc1);
 8001512:	48d1      	ldr	r0, [pc, #836]	; (8001858 <main+0x670>)
 8001514:	f001 fbba 	bl	8002c8c <HAL_ADC_Stop>
	      int mq4 = x + 750;
 8001518:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800151c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
 8001526:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 800152a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800152e:	6013      	str	r3, [r2, #0]
	      mq4data[mq4size] = mq4;
 8001530:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001534:	f103 0310 	add.w	r3, r3, #16
 8001538:	461a      	mov	r2, r3
 800153a:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001548:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f843 2c08 	str.w	r2, [r3, #-8]
	      mq4size++;
 8001552:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 800155e:	6013      	str	r3, [r2, #0]

	      ADC_Select_CH1();//MQ136
 8001560:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8001564:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001568:	469c      	mov	ip, r3
 800156a:	f000 fc2d 	bl	8001dc8 <ADC_Select_CH1.1>
	      HAL_ADC_Start(&hadc1);
 800156e:	48ba      	ldr	r0, [pc, #744]	; (8001858 <main+0x670>)
 8001570:	f001 fad8 	bl	8002b24 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, 1000);
 8001574:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001578:	48b7      	ldr	r0, [pc, #732]	; (8001858 <main+0x670>)
 800157a:	f001 fbba 	bl	8002cf2 <HAL_ADC_PollForConversion>
	      int y = HAL_ADC_GetValue(&hadc1);
 800157e:	48b6      	ldr	r0, [pc, #728]	; (8001858 <main+0x670>)
 8001580:	f001 fc42 	bl	8002e08 <HAL_ADC_GetValue>
 8001584:	4603      	mov	r3, r0
 8001586:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 800158a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800158e:	6013      	str	r3, [r2, #0]
	      HAL_ADC_Stop(&hadc1);
 8001590:	48b1      	ldr	r0, [pc, #708]	; (8001858 <main+0x670>)
 8001592:	f001 fb7b 	bl	8002c8c <HAL_ADC_Stop>
	      int mq136 = y-405;
 8001596:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800159a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f2a3 1395 	subw	r3, r3, #405	; 0x195
 80015a4:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80015a8:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80015ac:	6013      	str	r3, [r2, #0]
	      if(mq136<0){
 80015ae:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80015b2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da0a      	bge.n	80015d2 <main+0x3ea>
	        mq136 = mq136*(-1);
 80015bc:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80015c0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	425b      	negs	r3, r3
 80015c8:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80015cc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80015d0:	6013      	str	r3, [r2, #0]
	      }
	      mq136data[mq136size] = mq136;
 80015d2:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 80015d6:	f6a3 7348 	subw	r3, r3, #3912	; 0xf48
 80015da:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80015de:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f507 513d 	add.w	r1, r7, #12096	; 0x2f40
 80015e8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80015ec:	6809      	ldr	r1, [r1, #0]
 80015ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	      mq136size++;
 80015f2:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80015f6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001602:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001606:	6013      	str	r3, [r2, #0]


	      ADC_Select_CH4();//MQ135
 8001608:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800160c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001610:	469c      	mov	ip, r3
 8001612:	f000 fbfd 	bl	8001e10 <ADC_Select_CH4.2>
	      HAL_ADC_Start(&hadc1);
 8001616:	4890      	ldr	r0, [pc, #576]	; (8001858 <main+0x670>)
 8001618:	f001 fa84 	bl	8002b24 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, 1000);
 800161c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001620:	488d      	ldr	r0, [pc, #564]	; (8001858 <main+0x670>)
 8001622:	f001 fb66 	bl	8002cf2 <HAL_ADC_PollForConversion>
	      int z = HAL_ADC_GetValue(&hadc1);
 8001626:	488c      	ldr	r0, [pc, #560]	; (8001858 <main+0x670>)
 8001628:	f001 fbee 	bl	8002e08 <HAL_ADC_GetValue>
 800162c:	4603      	mov	r3, r0
 800162e:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001632:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001636:	6013      	str	r3, [r2, #0]
	      int mq135 = z-250;
 8001638:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800163c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3bfa      	subs	r3, #250	; 0xfa
 8001644:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001648:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800164c:	6013      	str	r3, [r2, #0]
	      mq135data[mq135size] = mq135;
 800164e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001652:	f103 0310 	add.w	r3, r3, #16
 8001656:	f6a3 73a8 	subw	r3, r3, #4008	; 0xfa8
 800165a:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 800165e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	f507 513c 	add.w	r1, r7, #12032	; 0x2f00
 8001668:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 800166c:	6809      	ldr	r1, [r1, #0]
 800166e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	      mq135size++;
 8001672:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001676:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001682:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001686:	6013      	str	r3, [r2, #0]

	      HAL_ADC_Stop(&hadc1);
 8001688:	4873      	ldr	r0, [pc, #460]	; (8001858 <main+0x670>)
 800168a:	f001 faff 	bl	8002c8c <HAL_ADC_Stop>

	      HAL_Delay (1000);
 800168e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001692:	f001 f9df 	bl	8002a54 <HAL_Delay>
	      printf("MQ4: %d PPM | MQ136: %d PPM | MQ135: %d PPM \n", mq4, mq136, mq135);
 8001696:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800169a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80016a4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	f507 513c 	add.w	r1, r7, #12032	; 0x2f00
 80016ae:	f101 0138 	add.w	r1, r1, #56	; 0x38
 80016b2:	6809      	ldr	r1, [r1, #0]
 80016b4:	4869      	ldr	r0, [pc, #420]	; (800185c <main+0x674>)
 80016b6:	f004 fda7 	bl	8006208 <iprintf>

	      time+= 1000;
 80016ba:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 80016be:	f103 030c 	add.w	r3, r3, #12
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80016c8:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 80016cc:	f102 020c 	add.w	r2, r2, #12
 80016d0:	6013      	str	r3, [r2, #0]
	      if (time > (max_time-1000)){
 80016d2:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80016d6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f2a3 33e7 	subw	r3, r3, #999	; 0x3e7
 80016e0:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 80016e4:	f102 020c 	add.w	r2, r2, #12
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	db05      	blt.n	80016fa <main+0x512>
	        clock = false;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 80016f4:	f102 020b 	add.w	r2, r2, #11
 80016f8:	7013      	strb	r3, [r2, #0]
  while (clock)
 80016fa:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 80016fe:	f103 030b 	add.w	r3, r3, #11
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae72 	bne.w	80013ee <main+0x206>
	      }


	    }
	    Lcd_clear(&lcd);
 800170a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800170e:	3b38      	subs	r3, #56	; 0x38
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fc75 	bl	8001000 <Lcd_clear>
	    Lcd_cursor(&lcd, 0,1);
 8001716:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800171a:	3b38      	subs	r3, #56	; 0x38
 800171c:	2201      	movs	r2, #1
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fc53 	bl	8000fcc <Lcd_cursor>
	    Lcd_string(&lcd, "Calculating... \n");
 8001726:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800172a:	3b38      	subs	r3, #56	; 0x38
 800172c:	494c      	ldr	r1, [pc, #304]	; (8001860 <main+0x678>)
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fc2c 	bl	8000f8c <Lcd_string>
	    HAL_Delay(1000);
 8001734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001738:	f001 f98c 	bl	8002a54 <HAL_Delay>

	  //  //calculate MQ4 Data
	    insert_sort(mq4data, mq4size);
 800173c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001740:	f103 0310 	add.w	r3, r3, #16
 8001744:	3b08      	subs	r3, #8
 8001746:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 800174a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800174e:	4694      	mov	ip, r2
 8001750:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 8001754:	6811      	ldr	r1, [r2, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fbcf 	bl	8001efa <insert_sort.4>
	    mq4mean = calculate_mean(mq4size, mq4data);
 800175c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001760:	f103 0310 	add.w	r3, r3, #16
 8001764:	3b08      	subs	r3, #8
 8001766:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 800176a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800176e:	4694      	mov	ip, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	f000 fbdb 	bl	8001f32 <calculate_mean.6>
 800177c:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001780:	f103 0320 	add.w	r3, r3, #32
 8001784:	6018      	str	r0, [r3, #0]
	    mq4dev = calculate_dev(mq4size, mq4data, mq4mean);
 8001786:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800178a:	f103 0310 	add.w	r3, r3, #16
 800178e:	3b08      	subs	r3, #8
 8001790:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001794:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001798:	4694      	mov	ip, r2
 800179a:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 800179e:	f102 0220 	add.w	r2, r2, #32
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	f000 fbe8 	bl	8001f80 <calculate_dev.7>
 80017b0:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80017b4:	f103 0314 	add.w	r3, r3, #20
 80017b8:	6018      	str	r0, [r3, #0]
	    mq4median = calculate_median(mq4size, mq4data);
 80017ba:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80017be:	f103 0310 	add.w	r3, r3, #16
 80017c2:	3b08      	subs	r3, #8
 80017c4:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 80017c8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80017cc:	4694      	mov	ip, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	f000 fc5f 	bl	8002098 <calculate_median.8>
 80017da:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80017de:	f103 0308 	add.w	r3, r3, #8
 80017e2:	6018      	str	r0, [r3, #0]
	    replace_zscores(mq4size, mq4data, mq4mean, mq4dev, mq4median);
 80017e4:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80017e8:	f101 0110 	add.w	r1, r1, #16
 80017ec:	3908      	subs	r1, #8
 80017ee:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 80017f2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80017f6:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80017fa:	f103 0308 	add.w	r3, r3, #8
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	4694      	mov	ip, r2
 8001804:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001808:	f103 0314 	add.w	r3, r3, #20
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001812:	f102 0220 	add.w	r2, r2, #32
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	f507 503e 	add.w	r0, r7, #12160	; 0x2f80
 800181c:	6800      	ldr	r0, [r0, #0]
 800181e:	f000 fc07 	bl	8002030 <replace_zscores.3>
	    insert_sort(mq4data, mq4size);
 8001822:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001826:	f103 0310 	add.w	r3, r3, #16
 800182a:	3b08      	subs	r3, #8
 800182c:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001830:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001834:	4694      	mov	ip, r2
 8001836:	f507 523e 	add.w	r2, r7, #12160	; 0x2f80
 800183a:	6811      	ldr	r1, [r2, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fb5c 	bl	8001efa <insert_sort.4>
	    //recalculate values
	    mq4mean = calculate_mean(mq4size, mq4data);
 8001842:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001846:	f103 0310 	add.w	r3, r3, #16
 800184a:	3b08      	subs	r3, #8
 800184c:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001850:	e008      	b.n	8001864 <main+0x67c>
 8001852:	bf00      	nop
 8001854:	40020000 	.word	0x40020000
 8001858:	20000098 	.word	0x20000098
 800185c:	080073e8 	.word	0x080073e8
 8001860:	08007418 	.word	0x08007418
 8001864:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001868:	4694      	mov	ip, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	f000 fb5e 	bl	8001f32 <calculate_mean.6>
 8001876:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 800187a:	f103 0320 	add.w	r3, r3, #32
 800187e:	6018      	str	r0, [r3, #0]
	    mq4dev = calculate_dev(mq4size, mq4data, mq4mean);
 8001880:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001884:	f103 0310 	add.w	r3, r3, #16
 8001888:	3b08      	subs	r3, #8
 800188a:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 800188e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001892:	4694      	mov	ip, r2
 8001894:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001898:	f102 0220 	add.w	r2, r2, #32
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4619      	mov	r1, r3
 80018a0:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	f000 fb6b 	bl	8001f80 <calculate_dev.7>
 80018aa:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80018ae:	f103 0314 	add.w	r3, r3, #20
 80018b2:	6018      	str	r0, [r3, #0]
	    mq4median = calculate_median(mq4size, mq4data);
 80018b4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80018b8:	f103 0310 	add.w	r3, r3, #16
 80018bc:	3b08      	subs	r3, #8
 80018be:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 80018c2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80018c6:	4694      	mov	ip, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f507 533e 	add.w	r3, r7, #12160	; 0x2f80
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	f000 fbe2 	bl	8002098 <calculate_median.8>
 80018d4:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80018d8:	f103 0308 	add.w	r3, r3, #8
 80018dc:	6018      	str	r0, [r3, #0]

	    //Calculate MQ135 Data
	    insert_sort(mq135data, mq135size);
 80018de:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 80018e2:	3b08      	subs	r3, #8
 80018e4:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 80018e8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80018ec:	4694      	mov	ip, r2
 80018ee:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80018f2:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80018f6:	6811      	ldr	r1, [r2, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fafe 	bl	8001efa <insert_sort.4>
	    mq135mean = calculate_mean(mq135size, mq135data);
 80018fe:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8001902:	3b08      	subs	r3, #8
 8001904:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001908:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800190c:	4694      	mov	ip, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001914:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	f000 fb0a 	bl	8001f32 <calculate_mean.6>
 800191e:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001922:	f103 031c 	add.w	r3, r3, #28
 8001926:	6018      	str	r0, [r3, #0]
	    mq135dev = calculate_dev(mq135size, mq135data, mq135mean);
 8001928:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800192c:	3b08      	subs	r3, #8
 800192e:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001932:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001936:	4694      	mov	ip, r2
 8001938:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 800193c:	f102 021c 	add.w	r2, r2, #28
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	4619      	mov	r1, r3
 8001944:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001948:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f000 fb17 	bl	8001f80 <calculate_dev.7>
 8001952:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001956:	f103 0310 	add.w	r3, r3, #16
 800195a:	6018      	str	r0, [r3, #0]
	    mq135median = calculate_median(mq135size, mq135data);
 800195c:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8001960:	3b08      	subs	r3, #8
 8001962:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001966:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800196a:	4694      	mov	ip, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001972:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	f000 fb8e 	bl	8002098 <calculate_median.8>
 800197c:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001980:	f103 0304 	add.w	r3, r3, #4
 8001984:	6018      	str	r0, [r3, #0]
	    replace_zscores(mq135size, mq135data, mq135mean, mq135dev, mq135median); insert_sort(mq135data, mq135size);
 8001986:	f507 617f 	add.w	r1, r7, #4080	; 0xff0
 800198a:	3908      	subs	r1, #8
 800198c:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001990:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001994:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001998:	f103 0304 	add.w	r3, r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	4694      	mov	ip, r2
 80019a2:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80019a6:	f103 0310 	add.w	r3, r3, #16
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80019b0:	f102 021c 	add.w	r2, r2, #28
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	f507 503d 	add.w	r0, r7, #12096	; 0x2f40
 80019ba:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	f000 fb36 	bl	8002030 <replace_zscores.3>
 80019c4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 80019c8:	3b08      	subs	r3, #8
 80019ca:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 80019ce:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80019d2:	4694      	mov	ip, r2
 80019d4:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 80019d8:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80019dc:	6811      	ldr	r1, [r2, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fa8b 	bl	8001efa <insert_sort.4>
	     //recalculate values
	    mq135mean = calculate_mean(mq135size, mq135data);
 80019e4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 80019e8:	3b08      	subs	r3, #8
 80019ea:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 80019ee:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80019f2:	4694      	mov	ip, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80019fa:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	f000 fa97 	bl	8001f32 <calculate_mean.6>
 8001a04:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001a08:	f103 031c 	add.w	r3, r3, #28
 8001a0c:	6018      	str	r0, [r3, #0]
	    mq135dev = calculate_dev(mq135size, mq135data, mq135mean);
 8001a0e:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8001a12:	3b08      	subs	r3, #8
 8001a14:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001a18:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001a1c:	4694      	mov	ip, r2
 8001a1e:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001a22:	f102 021c 	add.w	r2, r2, #28
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001a2e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	f000 faa4 	bl	8001f80 <calculate_dev.7>
 8001a38:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001a3c:	f103 0310 	add.w	r3, r3, #16
 8001a40:	6018      	str	r0, [r3, #0]
	    mq135median = calculate_median(mq135size, mq135data);
 8001a42:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8001a46:	3b08      	subs	r3, #8
 8001a48:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001a4c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001a50:	4694      	mov	ip, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001a58:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	f000 fb1b 	bl	8002098 <calculate_median.8>
 8001a62:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001a66:	f103 0304 	add.w	r3, r3, #4
 8001a6a:	6018      	str	r0, [r3, #0]

	    //Calculate MQ136 data
	    insert_sort(mq136data, mq136size);
 8001a6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a70:	3b08      	subs	r3, #8
 8001a72:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001a76:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001a7a:	4694      	mov	ip, r2
 8001a7c:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001a80:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001a84:	6811      	ldr	r1, [r2, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fa37 	bl	8001efa <insert_sort.4>
	    mq136mean = calculate_mean(mq136size, mq136data);
 8001a8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a90:	3b08      	subs	r3, #8
 8001a92:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001a96:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001a9a:	4694      	mov	ip, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001aa2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f000 fa43 	bl	8001f32 <calculate_mean.6>
 8001aac:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001ab0:	f103 0318 	add.w	r3, r3, #24
 8001ab4:	6018      	str	r0, [r3, #0]
	    mq136dev = calculate_dev(mq136size, mq136data, mq136mean);
 8001ab6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aba:	3b08      	subs	r3, #8
 8001abc:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001ac0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001aca:	f102 0218 	add.w	r2, r2, #24
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001ad6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	f000 fa50 	bl	8001f80 <calculate_dev.7>
 8001ae0:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001ae4:	f103 030c 	add.w	r3, r3, #12
 8001ae8:	6018      	str	r0, [r3, #0]
	    mq136median = calculate_median(mq136size, mq136data);
 8001aea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aee:	3b08      	subs	r3, #8
 8001af0:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001af4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001af8:	4694      	mov	ip, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001b00:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f000 fac7 	bl	8002098 <calculate_median.8>
 8001b0a:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001b0e:	6018      	str	r0, [r3, #0]
	    replace_zscores(mq136size, mq136data, mq136mean, mq136dev, mq136median); insert_sort(mq136data, mq136size);
 8001b10:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b14:	3908      	subs	r1, #8
 8001b16:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001b1a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001b1e:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	4694      	mov	ip, r2
 8001b28:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001b2c:	f103 030c 	add.w	r3, r3, #12
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001b36:	f102 0218 	add.w	r2, r2, #24
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	f507 503d 	add.w	r0, r7, #12096	; 0x2f40
 8001b40:	f100 0038 	add.w	r0, r0, #56	; 0x38
 8001b44:	6800      	ldr	r0, [r0, #0]
 8001b46:	f000 fa73 	bl	8002030 <replace_zscores.3>
 8001b4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b4e:	3b08      	subs	r3, #8
 8001b50:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001b54:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001b58:	4694      	mov	ip, r2
 8001b5a:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001b5e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001b62:	6811      	ldr	r1, [r2, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f9c8 	bl	8001efa <insert_sort.4>
	    //recalculate values
	    mq136mean = calculate_mean(mq136size, mq136data);
 8001b6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b6e:	3b08      	subs	r3, #8
 8001b70:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001b74:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001b78:	4694      	mov	ip, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001b80:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	f000 f9d4 	bl	8001f32 <calculate_mean.6>
 8001b8a:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001b8e:	f103 0318 	add.w	r3, r3, #24
 8001b92:	6018      	str	r0, [r3, #0]
	    mq136dev = calculate_dev(mq136size, mq136data, mq136mean);
 8001b94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b98:	3b08      	subs	r3, #8
 8001b9a:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001b9e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001ba2:	4694      	mov	ip, r2
 8001ba4:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001ba8:	f102 0218 	add.w	r2, r2, #24
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001bb4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	f000 f9e1 	bl	8001f80 <calculate_dev.7>
 8001bbe:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001bc2:	f103 030c 	add.w	r3, r3, #12
 8001bc6:	6018      	str	r0, [r3, #0]
	    mq136median = calculate_median(mq136size, mq136data);
 8001bc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bcc:	3b08      	subs	r3, #8
 8001bce:	f507 523c 	add.w	r2, r7, #12032	; 0x2f00
 8001bd2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001bd6:	4694      	mov	ip, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001bde:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	f000 fa58 	bl	8002098 <calculate_median.8>
 8001be8:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001bec:	6018      	str	r0, [r3, #0]

	    printf("PRINTING DATA \n");
 8001bee:	486f      	ldr	r0, [pc, #444]	; (8001dac <main+0xbc4>)
 8001bf0:	f004 fb78 	bl	80062e4 <puts>
	      for(int k = 0; k < mq136size; k++){
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001bfa:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e032      	b.n	8001c68 <main+0xa80>
	        printf("MQ136: %d PPM | MQ136: %d PPM | MQ136: %d PPM \n", mq136data[k], mq136data[k], mq136data[k]);
 8001c02:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8001c06:	f6a3 7348 	subw	r3, r3, #3912	; 0xf48
 8001c0a:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001c0e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c18:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8001c1c:	f6a3 7348 	subw	r3, r3, #3912	; 0xf48
 8001c20:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001c24:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001c2e:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8001c32:	f6a3 7348 	subw	r3, r3, #3912	; 0xf48
 8001c36:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001c3a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	4602      	mov	r2, r0
 8001c46:	485a      	ldr	r0, [pc, #360]	; (8001db0 <main+0xbc8>)
 8001c48:	f004 fade 	bl	8006208 <iprintf>
	        printf("\n");
 8001c4c:	200a      	movs	r0, #10
 8001c4e:	f004 faed 	bl	800622c <putchar>
	      for(int k = 0; k < mq136size; k++){
 8001c52:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001c56:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001c62:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001c6c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001c76:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbc0      	blt.n	8001c02 <main+0xa1a>
	      }

	    printf("MQ4 ->  Mean: %d, Deviation: %d, Median: %d \n", mq4mean, mq4dev, mq4median);
 8001c80:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001c84:	f103 0308 	add.w	r3, r3, #8
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001c8e:	f102 0214 	add.w	r2, r2, #20
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	f507 513d 	add.w	r1, r7, #12096	; 0x2f40
 8001c98:	f101 0120 	add.w	r1, r1, #32
 8001c9c:	6809      	ldr	r1, [r1, #0]
 8001c9e:	4845      	ldr	r0, [pc, #276]	; (8001db4 <main+0xbcc>)
 8001ca0:	f004 fab2 	bl	8006208 <iprintf>
	    printf("MQ135 -> Mean: %d, Deviation: %d, Median: %d \n", mq135mean, mq135dev, mq135median);
 8001ca4:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001ca8:	f103 0304 	add.w	r3, r3, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001cb2:	f102 0210 	add.w	r2, r2, #16
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	f507 513d 	add.w	r1, r7, #12096	; 0x2f40
 8001cbc:	f101 011c 	add.w	r1, r1, #28
 8001cc0:	6809      	ldr	r1, [r1, #0]
 8001cc2:	483d      	ldr	r0, [pc, #244]	; (8001db8 <main+0xbd0>)
 8001cc4:	f004 faa0 	bl	8006208 <iprintf>
	    printf("MQ136 -> Mean: %d, Deviation: %d, Median: %d \n", mq136mean, mq136dev, mq136median);
 8001cc8:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001cd2:	f102 020c 	add.w	r2, r2, #12
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	f507 513d 	add.w	r1, r7, #12096	; 0x2f40
 8001cdc:	f101 0118 	add.w	r1, r1, #24
 8001ce0:	6809      	ldr	r1, [r1, #0]
 8001ce2:	4836      	ldr	r0, [pc, #216]	; (8001dbc <main+0xbd4>)
 8001ce4:	f004 fa90 	bl	8006208 <iprintf>

	    int gas = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001cee:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001cf2:	6013      	str	r3, [r2, #0]
	    if (mq4median > 1500){
 8001cf4:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001cf8:	f103 0308 	add.w	r3, r3, #8
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d02:	4293      	cmp	r3, r2
 8001d04:	dd05      	ble.n	8001d12 <main+0xb2a>
	    	gas = 4;
 8001d06:	2304      	movs	r3, #4
 8001d08:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001d0c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001d10:	6013      	str	r3, [r2, #0]

	    }
	    if (mq4median > 40){
 8001d12:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001d16:	f103 0308 	add.w	r3, r3, #8
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b28      	cmp	r3, #40	; 0x28
 8001d1e:	dd05      	ble.n	8001d2c <main+0xb44>
	    	gas = 136;
 8001d20:	2388      	movs	r3, #136	; 0x88
 8001d22:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001d26:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001d2a:	6013      	str	r3, [r2, #0]
	    }
	    if (mq135median > 500){
 8001d2c:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001d30:	f103 0304 	add.w	r3, r3, #4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d3a:	dd05      	ble.n	8001d48 <main+0xb60>
	    	gas = 135;
 8001d3c:	2387      	movs	r3, #135	; 0x87
 8001d3e:	f507 523d 	add.w	r2, r7, #12096	; 0x2f40
 8001d42:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001d46:	6013      	str	r3, [r2, #0]
	    }
	    if (gas == 0){
 8001d48:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8001d4c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d123      	bne.n	8001d9e <main+0xbb6>
	  	 Lcd_clear(&lcd);
 8001d56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d5a:	3b38      	subs	r3, #56	; 0x38
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f94f 	bl	8001000 <Lcd_clear>
	  	 Lcd_cursor(&lcd, 0,1);
 8001d62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d66:	3b38      	subs	r3, #56	; 0x38
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f92d 	bl	8000fcc <Lcd_cursor>
	  	 Lcd_string(&lcd, "No Spoilage");
 8001d72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d76:	3b38      	subs	r3, #56	; 0x38
 8001d78:	4911      	ldr	r1, [pc, #68]	; (8001dc0 <main+0xbd8>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f906 	bl	8000f8c <Lcd_string>
	  	 Lcd_cursor(&lcd, 1,1);
 8001d80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d84:	3b38      	subs	r3, #56	; 0x38
 8001d86:	2201      	movs	r2, #1
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f91e 	bl	8000fcc <Lcd_cursor>
	  	 Lcd_string(&lcd, "Detected! :)");
 8001d90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d94:	3b38      	subs	r3, #56	; 0x38
 8001d96:	490b      	ldr	r1, [pc, #44]	; (8001dc4 <main+0xbdc>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f8f7 	bl	8000f8c <Lcd_string>
 8001d9e:	2300      	movs	r3, #0
	    }


  /* USER CODE END 3 */
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	f507 573e 	add.w	r7, r7, #12160	; 0x2f80
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	0800742c 	.word	0x0800742c
 8001db0:	0800743c 	.word	0x0800743c
 8001db4:	0800746c 	.word	0x0800746c
 8001db8:	0800749c 	.word	0x0800749c
 8001dbc:	080074cc 	.word	0x080074cc
 8001dc0:	080074fc 	.word	0x080074fc
 8001dc4:	08007508 	.word	0x08007508

08001dc8 <ADC_Select_CH1.1>:
  {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	f8c7 c004 	str.w	ip, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  	  sConfig.Channel = ADC_CHANNEL_1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = 1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001de8:	2304      	movs	r3, #4
 8001dea:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <ADC_Select_CH1.1+0x44>)
 8001df4:	f001 f816 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <ADC_Select_CH1.1+0x3a>
  	    Error_Handler();
 8001dfe:	f000 fbab 	bl	8002558 <Error_Handler>
  }
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000098 	.word	0x20000098

08001e10 <ADC_Select_CH4.2>:
  {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	f8c7 c004 	str.w	ip, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
  	  sConfig.Channel = ADC_CHANNEL_1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = 1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001e30:	2305      	movs	r3, #5
 8001e32:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <ADC_Select_CH4.2+0x44>)
 8001e3c:	f000 fff2 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <ADC_Select_CH4.2+0x3a>
  	    Error_Handler();
 8001e46:	f000 fb87 	bl	8002558 <Error_Handler>
  }
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000098 	.word	0x20000098

08001e58 <insert.5>:
  void insert(int array[],int size){
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	f8c7 c004 	str.w	ip, [r7, #4]
        double value = array[size-1];
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb5c 	bl	8000534 <__aeabi_i2d>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	e9c7 2304 	strd	r2, r3, [r7, #16]
        int k = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
        for(k = size-1;(k>0) && (array[k-1] > value); k--){
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e00f      	b.n	8001eb0 <insert.5+0x58>
            array[k] = array[k-1];
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e96:	3b01      	subs	r3, #1
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	68f9      	ldr	r1, [r7, #12]
 8001ea4:	440b      	add	r3, r1
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	601a      	str	r2, [r3, #0]
        for(k = size-1;(k>0) && (array[k-1] > value); k--){
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	dd13      	ble.n	8001ede <insert.5+0x86>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb34 	bl	8000534 <__aeabi_i2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ed4:	f7fe fe0a 	bl	8000aec <__aeabi_dcmplt>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1d8      	bne.n	8001e90 <insert.5+0x38>
        array[k] = value;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	18d4      	adds	r4, r2, r3
 8001ee6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eea:	f7fe fe3d 	bl	8000b68 <__aeabi_d2iz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6023      	str	r3, [r4, #0]
    }
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}

08001efa <insert_sort.4>:
    void insert_sort(int array[],int size){
 8001efa:	b590      	push	{r4, r7, lr}
 8001efc:	b087      	sub	sp, #28
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	4664      	mov	r4, ip
 8001f06:	f8c7 c004 	str.w	ip, [r7, #4]
        for(int k = 2; k <= size; k++){
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e007      	b.n	8001f20 <insert_sort.4+0x26>
            insert(array, k);
 8001f10:	46a4      	mov	ip, r4
 8001f12:	6979      	ldr	r1, [r7, #20]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff ff9f 	bl	8001e58 <insert.5>
        for(int k = 2; k <= size; k++){
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	ddf3      	ble.n	8001f10 <insert_sort.4+0x16>
    }
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}

08001f32 <calculate_mean.6>:
    int calculate_mean(int size, int array[]){
 8001f32:	b480      	push	{r7}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	f8c7 c004 	str.w	ip, [r7, #4]
      int mean = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
      for(int k = 0; k < size; k++){
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	e00a      	b.n	8001f60 <calculate_mean.6+0x2e>
          mean += array[k];
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	4413      	add	r3, r2
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	4413      	add	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
      for(int k = 0; k < size; k++){
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf0      	blt.n	8001f4a <calculate_mean.6+0x18>
      mean = mean/size;
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
      return mean;
 8001f72:	697b      	ldr	r3, [r7, #20]
    }
 8001f74:	4618      	mov	r0, r3
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <calculate_dev.7>:
    int calculate_dev(int size, int array[], int mean) {
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	f8c7 c000 	str.w	ip, [r7]
        int dev = 0.0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
        for (int k = 0; k < size; k++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	e027      	b.n	8001fea <calculate_dev.7+0x6a>
            dev += pow(array[k] - mean, 2);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fac3 	bl	8000534 <__aeabi_i2d>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002028 <calculate_dev.7+0xa8>
 8001fb6:	ec43 2b10 	vmov	d0, r2, r3
 8001fba:	f003 f8df 	bl	800517c <pow>
 8001fbe:	ec55 4b10 	vmov	r4, r5, d0
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7fe fab6 	bl	8000534 <__aeabi_i2d>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f7fe f964 	bl	800029c <__adddf3>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fdc4 	bl	8000b68 <__aeabi_d2iz>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	617b      	str	r3, [r7, #20]
        for (int k = 0; k < size; k++) {
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbd3      	blt.n	8001f9a <calculate_dev.7+0x1a>
        dev = sqrt(dev / (size - 1));
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa99 	bl	8000534 <__aeabi_i2d>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	ec43 2b10 	vmov	d0, r2, r3
 800200a:	f003 f927 	bl	800525c <sqrt>
 800200e:	ec53 2b10 	vmov	r2, r3, d0
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	f7fe fda7 	bl	8000b68 <__aeabi_d2iz>
 800201a:	4603      	mov	r3, r0
 800201c:	617b      	str	r3, [r7, #20]
        return dev;
 800201e:	697b      	ldr	r3, [r7, #20]
    }
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bdb0      	pop	{r4, r5, r7, pc}
 8002028:	00000000 	.word	0x00000000
 800202c:	40000000 	.word	0x40000000

08002030 <replace_zscores.3>:
    void replace_zscores(int size, int array[], int mean, int dev, int median){
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6178      	str	r0, [r7, #20]
 8002038:	6139      	str	r1, [r7, #16]
 800203a:	60fa      	str	r2, [r7, #12]
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	f8c7 c004 	str.w	ip, [r7, #4]
      int zscore = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
      for(int k = 0; k<size; k++){
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e01a      	b.n	8002082 <replace_zscores.3+0x52>
          zscore = (array[k]-mean)/dev;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad2      	subs	r2, r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002060:	61bb      	str	r3, [r7, #24]
          if((zscore > 2) || (zscore < -2)){
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b02      	cmp	r3, #2
 8002066:	dc03      	bgt.n	8002070 <replace_zscores.3+0x40>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f113 0f02 	cmn.w	r3, #2
 800206e:	da05      	bge.n	800207c <replace_zscores.3+0x4c>
              array[k] = median;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207a:	601a      	str	r2, [r3, #0]
      for(int k = 0; k<size; k++){
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3301      	adds	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbe0      	blt.n	800204c <replace_zscores.3+0x1c>
    }
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3724      	adds	r7, #36	; 0x24
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <calculate_median.8>:
    int calculate_median(int size, int array[]){
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	f8c7 c004 	str.w	ip, [r7, #4]
      int median = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
      for(int k = 0; k < size; k++){
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	e02a      	b.n	8002106 <calculate_median.8+0x6e>
          if((size%2) == 0){
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <calculate_median.8+0x54>
              median = (array[(size/2)]+array[(size/2)-1])/2;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0fda      	lsrs	r2, r3, #31
 80020be:	4413      	add	r3, r2
 80020c0:	105b      	asrs	r3, r3, #1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	4413      	add	r3, r2
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	0fd9      	lsrs	r1, r3, #31
 80020ce:	440b      	add	r3, r1
 80020d0:	105b      	asrs	r3, r3, #1
 80020d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020d6:	3b01      	subs	r3, #1
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	440b      	add	r3, r1
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	0fda      	lsrs	r2, r3, #31
 80020e4:	4413      	add	r3, r2
 80020e6:	105b      	asrs	r3, r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e009      	b.n	8002100 <calculate_median.8+0x68>
              median = array[(size-1)/2];
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	0fda      	lsrs	r2, r3, #31
 80020f2:	4413      	add	r3, r2
 80020f4:	105b      	asrs	r3, r3, #1
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	617b      	str	r3, [r7, #20]
      for(int k = 0; k < size; k++){
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	3301      	adds	r3, #1
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	429a      	cmp	r2, r3
 800210c:	dbd0      	blt.n	80020b0 <calculate_median.8+0x18>
      return median;
 800210e:	697b      	ldr	r3, [r7, #20]
    }
 8002110:	4618      	mov	r0, r3
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b094      	sub	sp, #80	; 0x50
 8002120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002122:	f107 0320 	add.w	r3, r7, #32
 8002126:	2230      	movs	r2, #48	; 0x30
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f004 f8e2 	bl	80062f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <SystemClock_Config+0xcc>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <SystemClock_Config+0xcc>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	6413      	str	r3, [r2, #64]	; 0x40
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <SystemClock_Config+0xcc>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <SystemClock_Config+0xd0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <SystemClock_Config+0xd0>)
 800216a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <SystemClock_Config+0xd0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800217c:	2302      	movs	r3, #2
 800217e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002180:	2301      	movs	r3, #1
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002184:	2310      	movs	r3, #16
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002188:	2302      	movs	r3, #2
 800218a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800218c:	2300      	movs	r3, #0
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002190:	2308      	movs	r3, #8
 8002192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002194:	2354      	movs	r3, #84	; 0x54
 8002196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002198:	2302      	movs	r3, #2
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800219c:	2304      	movs	r3, #4
 800219e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	4618      	mov	r0, r3
 80021a6:	f001 fe31 	bl	8003e0c <HAL_RCC_OscConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021b0:	f000 f9d2 	bl	8002558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b4:	230f      	movs	r3, #15
 80021b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b8:	2302      	movs	r3, #2
 80021ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	2102      	movs	r1, #2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f002 f893 	bl	80042fc <HAL_RCC_ClockConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021dc:	f000 f9bc 	bl	8002558 <Error_Handler>
  }
}
 80021e0:	bf00      	nop
 80021e2:	3750      	adds	r7, #80	; 0x50
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000

080021f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021f6:	463b      	mov	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002204:	4a31      	ldr	r2, [pc, #196]	; (80022cc <MX_ADC1_Init+0xdc>)
 8002206:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <MX_ADC1_Init+0xd8>)
 800220a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800220e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002216:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002218:	2201      	movs	r2, #1
 800221a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <MX_ADC1_Init+0xd8>)
 800221e:	2201      	movs	r2, #1
 8002220:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800222a:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <MX_ADC1_Init+0xd8>)
 800222c:	2200      	movs	r2, #0
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002232:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <MX_ADC1_Init+0xe0>)
 8002234:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <MX_ADC1_Init+0xd8>)
 800223e:	2203      	movs	r2, #3
 8002240:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800224a:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <MX_ADC1_Init+0xd8>)
 800224c:	2201      	movs	r2, #1
 800224e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002250:	481d      	ldr	r0, [pc, #116]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002252:	f000 fc23 	bl	8002a9c <HAL_ADC_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800225c:	f000 f97c 	bl	8002558 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002260:	2300      	movs	r3, #0
 8002262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002264:	2301      	movs	r3, #1
 8002266:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002268:	2302      	movs	r3, #2
 800226a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800226c:	463b      	mov	r3, r7
 800226e:	4619      	mov	r1, r3
 8002270:	4815      	ldr	r0, [pc, #84]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002272:	f000 fdd7 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800227c:	f000 f96c 	bl	8002558 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002280:	2301      	movs	r3, #1
 8002282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002284:	2302      	movs	r3, #2
 8002286:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002288:	2304      	movs	r3, #4
 800228a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800228c:	463b      	mov	r3, r7
 800228e:	4619      	mov	r1, r3
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_ADC1_Init+0xd8>)
 8002292:	f000 fdc7 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800229c:	f000 f95c 	bl	8002558 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80022a4:	2303      	movs	r3, #3
 80022a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ac:	463b      	mov	r3, r7
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_ADC1_Init+0xd8>)
 80022b2:	f000 fdb7 	bl	8002e24 <HAL_ADC_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80022bc:	f000 f94c 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000098 	.word	0x20000098
 80022cc:	40012000 	.word	0x40012000
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e8:	463b      	mov	r3, r7
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <MX_TIM2_Init+0x94>)
 80022f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <MX_TIM2_Init+0x94>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <MX_TIM2_Init+0x94>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <MX_TIM2_Init+0x94>)
 8002306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <MX_TIM2_Init+0x94>)
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <MX_TIM2_Init+0x94>)
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002318:	4813      	ldr	r0, [pc, #76]	; (8002368 <MX_TIM2_Init+0x94>)
 800231a:	f002 f9cf 	bl	80046bc <HAL_TIM_Base_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002324:	f000 f918 	bl	8002558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	4619      	mov	r1, r3
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <MX_TIM2_Init+0x94>)
 8002336:	f002 fa10 	bl	800475a <HAL_TIM_ConfigClockSource>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002340:	f000 f90a 	bl	8002558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002344:	2300      	movs	r3, #0
 8002346:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800234c:	463b      	mov	r3, r7
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_TIM2_Init+0x94>)
 8002352:	f002 fbe3 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800235c:	f000 f8fc 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000140 	.word	0x20000140

0800236c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <MX_USART2_UART_Init+0x50>)
 8002374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800237c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002392:	220c      	movs	r2, #12
 8002394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 80023a4:	f002 fc28 	bl	8004bf8 <HAL_UART_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ae:	f000 f8d3 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000188 	.word	0x20000188
 80023bc:	40004400 	.word	0x40004400

080023c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_DMA_Init+0x3c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <MX_DMA_Init+0x3c>)
 80023d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_DMA_Init+0x3c>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	2038      	movs	r0, #56	; 0x38
 80023e8:	f001 f815 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023ec:	2038      	movs	r0, #56	; 0x38
 80023ee:	f001 f82e 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800

08002400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <MX_GPIO_Init+0x110>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a3c      	ldr	r2, [pc, #240]	; (8002510 <MX_GPIO_Init+0x110>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <MX_GPIO_Init+0x110>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <MX_GPIO_Init+0x110>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a35      	ldr	r2, [pc, #212]	; (8002510 <MX_GPIO_Init+0x110>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b33      	ldr	r3, [pc, #204]	; (8002510 <MX_GPIO_Init+0x110>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <MX_GPIO_Init+0x110>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a2e      	ldr	r2, [pc, #184]	; (8002510 <MX_GPIO_Init+0x110>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <MX_GPIO_Init+0x110>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	21e0      	movs	r1, #224	; 0xe0
 800246e:	4829      	ldr	r0, [pc, #164]	; (8002514 <MX_GPIO_Init+0x114>)
 8002470:	f001 fc8e 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002474:	2200      	movs	r2, #0
 8002476:	2180      	movs	r1, #128	; 0x80
 8002478:	4827      	ldr	r0, [pc, #156]	; (8002518 <MX_GPIO_Init+0x118>)
 800247a:	f001 fc89 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	2170      	movs	r1, #112	; 0x70
 8002482:	4826      	ldr	r0, [pc, #152]	; (800251c <MX_GPIO_Init+0x11c>)
 8002484:	f001 fc84 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800248c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	4619      	mov	r1, r3
 800249e:	481e      	ldr	r0, [pc, #120]	; (8002518 <MX_GPIO_Init+0x118>)
 80024a0:	f001 fada 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024a4:	23e0      	movs	r3, #224	; 0xe0
 80024a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	4619      	mov	r1, r3
 80024ba:	4816      	ldr	r0, [pc, #88]	; (8002514 <MX_GPIO_Init+0x114>)
 80024bc:	f001 facc 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	4619      	mov	r1, r3
 80024d6:	4810      	ldr	r0, [pc, #64]	; (8002518 <MX_GPIO_Init+0x118>)
 80024d8:	f001 fabe 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80024dc:	2370      	movs	r3, #112	; 0x70
 80024de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	4619      	mov	r1, r3
 80024f2:	480a      	ldr	r0, [pc, #40]	; (800251c <MX_GPIO_Init+0x11c>)
 80024f4:	f001 fab0 	bl	8003a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2100      	movs	r1, #0
 80024fc:	2028      	movs	r0, #40	; 0x28
 80024fe:	f000 ff8a 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002502:	2028      	movs	r0, #40	; 0x28
 8002504:	f000 ffa3 	bl	800344e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002508:	bf00      	nop
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	40020000 	.word	0x40020000
 8002518:	40020800 	.word	0x40020800
 800251c:	40020400 	.word	0x40020400

08002520 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e009      	b.n	8002546 <_write+0x26>
  {
	ITM_SendChar(*ptr++);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	60ba      	str	r2, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fe08 	bl	8001150 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	dbf1      	blt.n	8002532 <_write+0x12>
  }
  return len;
 800254e:	687b      	ldr	r3, [r7, #4]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800255c:	b672      	cpsid	i
}
 800255e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002560:	e7fe      	b.n	8002560 <Error_Handler+0x8>
	...

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <HAL_MspInit+0x4c>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_MspInit+0x4c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_MspInit+0x4c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_MspInit+0x4c>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_MspInit+0x4c>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2e      	ldr	r2, [pc, #184]	; (800268c <HAL_ADC_MspInit+0xd8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d156      	bne.n	8002684 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_ADC_MspInit+0xdc>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	4a2c      	ldr	r2, [pc, #176]	; (8002690 <HAL_ADC_MspInit+0xdc>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_ADC_MspInit+0xdc>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_ADC_MspInit+0xdc>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a25      	ldr	r2, [pc, #148]	; (8002690 <HAL_ADC_MspInit+0xdc>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b23      	ldr	r3, [pc, #140]	; (8002690 <HAL_ADC_MspInit+0xdc>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = sensor136_Pin|GPIO_PIN_1|GPIO_PIN_4;
 800260e:	2313      	movs	r3, #19
 8002610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002612:	2303      	movs	r3, #3
 8002614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	481c      	ldr	r0, [pc, #112]	; (8002694 <HAL_ADC_MspInit+0xe0>)
 8002622:	f001 fa19 	bl	8003a58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 8002628:	4a1c      	ldr	r2, [pc, #112]	; (800269c <HAL_ADC_MspInit+0xe8>)
 800262a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 8002640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002644:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 8002648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800264c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 8002650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002654:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002668:	480b      	ldr	r0, [pc, #44]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 800266a:	f000 ff0b 	bl	8003484 <HAL_DMA_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002674:	f7ff ff70 	bl	8002558 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a07      	ldr	r2, [pc, #28]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
 800267e:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_ADC_MspInit+0xe4>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40012000 	.word	0x40012000
 8002690:	40023800 	.word	0x40023800
 8002694:	40020000 	.word	0x40020000
 8002698:	200000e0 	.word	0x200000e0
 800269c:	40026410 	.word	0x40026410

080026a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d10d      	bne.n	80026ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_TIM_Base_MspInit+0x3c>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a08      	ldr	r2, [pc, #32]	; (80026dc <HAL_TIM_Base_MspInit+0x3c>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_TIM_Base_MspInit+0x3c>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a19      	ldr	r2, [pc, #100]	; (8002764 <HAL_UART_MspInit+0x84>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d12b      	bne.n	800275a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_UART_MspInit+0x88>)
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800273a:	230c      	movs	r3, #12
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800274a:	2307      	movs	r3, #7
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <HAL_UART_MspInit+0x8c>)
 8002756:	f001 f97f 	bl	8003a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	; 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40004400 	.word	0x40004400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000

08002770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <NMI_Handler+0x4>

08002776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <HardFault_Handler+0x4>

0800277c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <MemManage_Handler+0x4>

08002782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002786:	e7fe      	b.n	8002786 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800278c:	e7fe      	b.n	800278c <UsageFault_Handler+0x4>

0800278e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027bc:	f000 f92a 	bl	8002a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027cc:	f001 fafa 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <DMA2_Stream0_IRQHandler+0x10>)
 80027da:	f000 ff01 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200000e0 	.word	0x200000e0

080027e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e00a      	b.n	8002810 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027fa:	f3af 8000 	nop.w
 80027fe:	4601      	mov	r1, r0
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	60ba      	str	r2, [r7, #8]
 8002806:	b2ca      	uxtb	r2, r1
 8002808:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3301      	adds	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	dbf0      	blt.n	80027fa <_read+0x12>
  }

  return len;
 8002818:	687b      	ldr	r3, [r7, #4]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800284a:	605a      	str	r2, [r3, #4]
  return 0;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_isatty>:

int _isatty(int file)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <_sbrk+0x5c>)
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <_sbrk+0x60>)
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <_sbrk+0x64>)
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <_sbrk+0x68>)
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d207      	bcs.n	80028cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028bc:	f003 fd22 	bl	8006304 <__errno>
 80028c0:	4603      	mov	r3, r0
 80028c2:	220c      	movs	r2, #12
 80028c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ca:	e009      	b.n	80028e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <_sbrk+0x64>)
 80028dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20018000 	.word	0x20018000
 80028ec:	00000400 	.word	0x00000400
 80028f0:	200001cc 	.word	0x200001cc
 80028f4:	20000320 	.word	0x20000320

080028f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <SystemInit+0x20>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <SystemInit+0x20>)
 8002904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800291c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002922:	490e      	ldr	r1, [pc, #56]	; (800295c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002938:	4c0b      	ldr	r4, [pc, #44]	; (8002968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002946:	f7ff ffd7 	bl	80028f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294a:	f003 fce1 	bl	8006310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294e:	f7fe fc4b 	bl	80011e8 <main>
  bx  lr    
 8002952:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002954:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800295c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002960:	080075cc 	.word	0x080075cc
  ldr r2, =_sbss
 8002964:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002968:	20000320 	.word	0x20000320

0800296c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC_IRQHandler>
	...

08002970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_Init+0x40>)
 800297a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_Init+0x40>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_Init+0x40>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002998:	2003      	movs	r0, #3
 800299a:	f000 fd31 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299e:	200f      	movs	r0, #15
 80029a0:	f000 f808 	bl	80029b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a4:	f7ff fdde 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_InitTick+0x54>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x58>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fd49 	bl	800346a <HAL_SYSTICK_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00e      	b.n	8002a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b0f      	cmp	r3, #15
 80029e6:	d80a      	bhi.n	80029fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e8:	2200      	movs	r2, #0
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f0:	f000 fd11 	bl	8003416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_InitTick+0x5c>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	20000004 	.word	0x20000004

08002a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_IncTick+0x20>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_IncTick+0x24>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_IncTick+0x24>)
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000008 	.word	0x20000008
 8002a38:	200001d0 	.word	0x200001d0

08002a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_GetTick+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200001d0 	.word	0x200001d0

08002a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff ffee 	bl	8002a3c <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a6c:	d005      	beq.n	8002a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_Delay+0x44>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a7a:	bf00      	nop
 8002a7c:	f7ff ffde 	bl	8002a3c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d8f7      	bhi.n	8002a7c <HAL_Delay+0x28>
  {
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000008 	.word	0x20000008

08002a9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e033      	b.n	8002b1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fd7a 	bl	80025b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d118      	bne.n	8002b0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ae2:	f023 0302 	bic.w	r3, r3, #2
 8002ae6:	f043 0202 	orr.w	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 faba 	bl	8003068 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
 8002b0a:	e001      	b.n	8002b10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_Start+0x1a>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e097      	b.n	8002c6e <HAL_ADC_Start+0x14a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d018      	beq.n	8002b86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b64:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <HAL_ADC_Start+0x158>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a45      	ldr	r2, [pc, #276]	; (8002c80 <HAL_ADC_Start+0x15c>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0c9a      	lsrs	r2, r3, #18
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b78:	e002      	b.n	8002b80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d15f      	bne.n	8002c54 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd2:	d106      	bne.n	8002be2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	f023 0206 	bic.w	r2, r3, #6
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf0:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_ADC_Start+0x160>)
 8002bf2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bfc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d129      	bne.n	8002c6c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	e020      	b.n	8002c6c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <HAL_ADC_Start+0x164>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d11b      	bne.n	8002c6c <HAL_ADC_Start+0x148>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d114      	bne.n	8002c6c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	e00b      	b.n	8002c6c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f043 0210 	orr.w	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	431bde83 	.word	0x431bde83
 8002c84:	40012300 	.word	0x40012300
 8002c88:	40012000 	.word	0x40012000

08002c8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_Stop+0x16>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e021      	b.n	8002ce6 <HAL_ADC_Stop+0x5a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0e:	d113      	bne.n	8002d38 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1e:	d10b      	bne.n	8002d38 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e063      	b.n	8002e00 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d38:	f7ff fe80 	bl	8002a3c <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d3e:	e021      	b.n	8002d84 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d46:	d01d      	beq.n	8002d84 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_ADC_PollForConversion+0x6c>
 8002d4e:	f7ff fe75 	bl	8002a3c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d212      	bcs.n	8002d84 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d00b      	beq.n	8002d84 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f043 0204 	orr.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e03d      	b.n	8002e00 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d1d6      	bne.n	8002d40 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f06f 0212 	mvn.w	r2, #18
 8002d9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d123      	bne.n	8002dfe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d11f      	bne.n	8002dfe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d111      	bne.n	8002dfe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1c>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e105      	b.n	800304c <HAL_ADC_ConfigChannel+0x228>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b09      	cmp	r3, #9
 8002e4e:	d925      	bls.n	8002e9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68d9      	ldr	r1, [r3, #12]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	3b1e      	subs	r3, #30
 8002e66:	2207      	movs	r2, #7
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	400a      	ands	r2, r1
 8002e74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68d9      	ldr	r1, [r3, #12]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	4618      	mov	r0, r3
 8002e88:	4603      	mov	r3, r0
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4403      	add	r3, r0
 8002e8e:	3b1e      	subs	r3, #30
 8002e90:	409a      	lsls	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	e022      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6919      	ldr	r1, [r3, #16]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6919      	ldr	r1, [r3, #16]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4403      	add	r3, r0
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d824      	bhi.n	8002f34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b05      	subs	r3, #5
 8002efc:	221f      	movs	r2, #31
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	400a      	ands	r2, r1
 8002f0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4618      	mov	r0, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	3b05      	subs	r3, #5
 8002f26:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	635a      	str	r2, [r3, #52]	; 0x34
 8002f32:	e04c      	b.n	8002fce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d824      	bhi.n	8002f86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b23      	subs	r3, #35	; 0x23
 8002f4e:	221f      	movs	r2, #31
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43da      	mvns	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	3b23      	subs	r3, #35	; 0x23
 8002f78:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
 8002f84:	e023      	b.n	8002fce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	3b41      	subs	r3, #65	; 0x41
 8002f98:	221f      	movs	r2, #31
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3b41      	subs	r3, #65	; 0x41
 8002fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_ADC_ConfigChannel+0x234>)
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a21      	ldr	r2, [pc, #132]	; (800305c <HAL_ADC_ConfigChannel+0x238>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x1cc>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b12      	cmp	r3, #18
 8002fe2:	d105      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a19      	ldr	r2, [pc, #100]	; (800305c <HAL_ADC_ConfigChannel+0x238>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d123      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x21e>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d003      	beq.n	800300a <HAL_ADC_ConfigChannel+0x1e6>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b11      	cmp	r3, #17
 8003008:	d11b      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b10      	cmp	r3, #16
 800301c:	d111      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_ADC_ConfigChannel+0x23c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a10      	ldr	r2, [pc, #64]	; (8003064 <HAL_ADC_ConfigChannel+0x240>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	0c9a      	lsrs	r2, r3, #18
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003034:	e002      	b.n	800303c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3b01      	subs	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f9      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40012300 	.word	0x40012300
 800305c:	40012000 	.word	0x40012000
 8003060:	20000000 	.word	0x20000000
 8003064:	431bde83 	.word	0x431bde83

08003068 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003070:	4b79      	ldr	r3, [pc, #484]	; (8003258 <ADC_Init+0x1f0>)
 8003072:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800309c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	021a      	lsls	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	4a58      	ldr	r2, [pc, #352]	; (800325c <ADC_Init+0x1f4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d022      	beq.n	8003146 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800310e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6899      	ldr	r1, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6899      	ldr	r1, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e00f      	b.n	8003166 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003164:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0202 	bic.w	r2, r2, #2
 8003174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7e1b      	ldrb	r3, [r3, #24]
 8003180:	005a      	lsls	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01b      	beq.n	80031cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	3b01      	subs	r3, #1
 80031c0:	035a      	lsls	r2, r3, #13
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	e007      	b.n	80031dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	051a      	lsls	r2, r3, #20
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800321e:	025a      	lsls	r2, r3, #9
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	029a      	lsls	r2, r3, #10
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40012300 	.word	0x40012300
 800325c:	0f000001 	.word	0x0f000001

08003260 <__NVIC_SetPriorityGrouping>:
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800328c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003292:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	60d3      	str	r3, [r2, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_GetPriorityGrouping>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4907      	ldr	r1, [pc, #28]	; (80032fc <__NVIC_EnableIRQ+0x38>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPriority>:
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db0a      	blt.n	800332a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	490c      	ldr	r1, [pc, #48]	; (800334c <__NVIC_SetPriority+0x4c>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	440b      	add	r3, r1
 8003324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003328:	e00a      	b.n	8003340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4908      	ldr	r1, [pc, #32]	; (8003350 <__NVIC_SetPriority+0x50>)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3b04      	subs	r3, #4
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	440b      	add	r3, r1
 800333e:	761a      	strb	r2, [r3, #24]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <NVIC_EncodePriority>:
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf28      	it	cs
 8003372:	2304      	movcs	r3, #4
 8003374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3304      	adds	r3, #4
 800337a:	2b06      	cmp	r3, #6
 800337c:	d902      	bls.n	8003384 <NVIC_EncodePriority+0x30>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3b03      	subs	r3, #3
 8003382:	e000      	b.n	8003386 <NVIC_EncodePriority+0x32>
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	401a      	ands	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800339c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43d9      	mvns	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	4313      	orrs	r3, r2
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <SysTick_Config>:
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033cc:	d301      	bcc.n	80033d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00f      	b.n	80033f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <SysTick_Config+0x40>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	210f      	movs	r1, #15
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033e0:	f7ff ff8e 	bl	8003300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <SysTick_Config+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <SysTick_Config+0x40>)
 80033ec:	2207      	movs	r2, #7
 80033ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000e010 	.word	0xe000e010

08003400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff29 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003428:	f7ff ff3e 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 800342c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7ff ff8e 	bl	8003354 <NVIC_EncodePriority>
 8003438:	4602      	mov	r2, r0
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff5d 	bl	8003300 <__NVIC_SetPriority>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff31 	bl	80032c4 <__NVIC_EnableIRQ>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffa2 	bl	80033bc <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003490:	f7ff fad4 	bl	8002a3c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e099      	b.n	80035d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c0:	e00f      	b.n	80034e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c2:	f7ff fabb 	bl	8002a3c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d908      	bls.n	80034e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2203      	movs	r2, #3
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e078      	b.n	80035d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e8      	bne.n	80034c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_DMA_Init+0x158>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2b04      	cmp	r3, #4
 800353a:	d107      	bne.n	800354c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4313      	orrs	r3, r2
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0307 	bic.w	r3, r3, #7
 8003562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2b04      	cmp	r3, #4
 8003574:	d117      	bne.n	80035a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f9e9 	bl	8003960 <DMA_CheckFifoParam>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2240      	movs	r2, #64	; 0x40
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035a2:	2301      	movs	r3, #1
 80035a4:	e016      	b.n	80035d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f9a0 	bl	80038f4 <DMA_CalcBaseAndBitshift>
 80035b4:	4603      	mov	r3, r0
 80035b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	223f      	movs	r2, #63	; 0x3f
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	f010803f 	.word	0xf010803f

080035e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035ec:	4b8e      	ldr	r3, [pc, #568]	; (8003828 <HAL_DMA_IRQHandler+0x248>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a8e      	ldr	r2, [pc, #568]	; (800382c <HAL_DMA_IRQHandler+0x24c>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	2208      	movs	r2, #8
 800360c:	409a      	lsls	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01a      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	2208      	movs	r2, #8
 800363a:	409a      	lsls	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	2201      	movs	r2, #1
 8003670:	409a      	lsls	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2204      	movs	r2, #4
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	2204      	movs	r2, #4
 80036a6:	409a      	lsls	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2210      	movs	r2, #16
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d043      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d03c      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	2210      	movs	r2, #16
 80036dc:	409a      	lsls	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d024      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e01f      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01b      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
 8003720:	e016      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0208 	bic.w	r2, r2, #8
 800373e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	2220      	movs	r2, #32
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 808f 	beq.w	8003880 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8087 	beq.w	8003880 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	2220      	movs	r2, #32
 8003778:	409a      	lsls	r2, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b05      	cmp	r3, #5
 8003788:	d136      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0216 	bic.w	r2, r2, #22
 8003798:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_DMA_IRQHandler+0x1da>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	223f      	movs	r2, #63	; 0x3f
 80037d0:	409a      	lsls	r2, r3
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d07e      	beq.n	80038ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
        }
        return;
 80037f6:	e079      	b.n	80038ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01d      	beq.n	8003842 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	2b00      	cmp	r3, #0
 800381a:	d031      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e02c      	b.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
 8003826:	bf00      	nop
 8003828:	20000000 	.word	0x20000000
 800382c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d023      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e01e      	b.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10f      	bne.n	8003870 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0210 	bic.w	r2, r2, #16
 800385e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	2b00      	cmp	r3, #0
 8003886:	d032      	beq.n	80038ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d022      	beq.n	80038da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2205      	movs	r2, #5
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d307      	bcc.n	80038c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f2      	bne.n	80038ac <HAL_DMA_IRQHandler+0x2cc>
 80038c6:	e000      	b.n	80038ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
 80038ea:	e000      	b.n	80038ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80038ec:	bf00      	nop
    }
  }
}
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	3b10      	subs	r3, #16
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <DMA_CalcBaseAndBitshift+0x64>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800390e:	4a13      	ldr	r2, [pc, #76]	; (800395c <DMA_CalcBaseAndBitshift+0x68>)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b03      	cmp	r3, #3
 8003920:	d909      	bls.n	8003936 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	1d1a      	adds	r2, r3, #4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	659a      	str	r2, [r3, #88]	; 0x58
 8003934:	e007      	b.n	8003946 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	aaaaaaab 	.word	0xaaaaaaab
 800395c:	0800754c 	.word	0x0800754c

08003960 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11f      	bne.n	80039ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d856      	bhi.n	8003a2e <DMA_CheckFifoParam+0xce>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <DMA_CheckFifoParam+0x28>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	08003999 	.word	0x08003999
 800398c:	080039ab 	.word	0x080039ab
 8003990:	08003999 	.word	0x08003999
 8003994:	08003a2f 	.word	0x08003a2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d046      	beq.n	8003a32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a8:	e043      	b.n	8003a32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039b2:	d140      	bne.n	8003a36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b8:	e03d      	b.n	8003a36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	d121      	bne.n	8003a08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d837      	bhi.n	8003a3a <DMA_CheckFifoParam+0xda>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <DMA_CheckFifoParam+0x70>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039e7 	.word	0x080039e7
 80039d8:	080039e1 	.word	0x080039e1
 80039dc:	080039f9 	.word	0x080039f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e030      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d025      	beq.n	8003a3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f6:	e022      	b.n	8003a3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a00:	d11f      	bne.n	8003a42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a06:	e01c      	b.n	8003a42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d903      	bls.n	8003a16 <DMA_CheckFifoParam+0xb6>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d003      	beq.n	8003a1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a14:	e018      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1a:	e015      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2c:	e00b      	b.n	8003a46 <DMA_CheckFifoParam+0xe6>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e00a      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a32:	bf00      	nop
 8003a34:	e008      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a36:	bf00      	nop
 8003a38:	e006      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e004      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a46:	bf00      	nop
    }
  } 
  
  return status; 
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop

08003a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e159      	b.n	8003d28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a74:	2201      	movs	r2, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	f040 8148 	bne.w	8003d22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d005      	beq.n	8003aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d130      	bne.n	8003b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 0201 	and.w	r2, r3, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d017      	beq.n	8003b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2203      	movs	r2, #3
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d123      	bne.n	8003b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	08da      	lsrs	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3208      	adds	r2, #8
 8003b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	08da      	lsrs	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3208      	adds	r2, #8
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0203 	and.w	r2, r3, #3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a2 	beq.w	8003d22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	4b57      	ldr	r3, [pc, #348]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	4a56      	ldr	r2, [pc, #344]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bec:	6453      	str	r3, [r2, #68]	; 0x44
 8003bee:	4b54      	ldr	r3, [pc, #336]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfa:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_GPIO_Init+0x2ec>)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	3302      	adds	r3, #2
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a49      	ldr	r2, [pc, #292]	; (8003d48 <HAL_GPIO_Init+0x2f0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d019      	beq.n	8003c5a <HAL_GPIO_Init+0x202>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a48      	ldr	r2, [pc, #288]	; (8003d4c <HAL_GPIO_Init+0x2f4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_GPIO_Init+0x1fe>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a47      	ldr	r2, [pc, #284]	; (8003d50 <HAL_GPIO_Init+0x2f8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00d      	beq.n	8003c52 <HAL_GPIO_Init+0x1fa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a46      	ldr	r2, [pc, #280]	; (8003d54 <HAL_GPIO_Init+0x2fc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <HAL_GPIO_Init+0x1f6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a45      	ldr	r2, [pc, #276]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_GPIO_Init+0x1f2>
 8003c46:	2304      	movs	r3, #4
 8003c48:	e008      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	e006      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e004      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e002      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f002 0203 	and.w	r2, r2, #3
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	4093      	lsls	r3, r2
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c6c:	4935      	ldr	r1, [pc, #212]	; (8003d44 <HAL_GPIO_Init+0x2ec>)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	089b      	lsrs	r3, r3, #2
 8003c72:	3302      	adds	r3, #2
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c7a:	4b38      	ldr	r3, [pc, #224]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9e:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca4:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc8:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cce:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf8:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d1c:	4a0f      	ldr	r2, [pc, #60]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	f67f aea2 	bls.w	8003a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40013800 	.word	0x40013800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40020400 	.word	0x40020400
 8003d50:	40020800 	.word	0x40020800
 8003d54:	40020c00 	.word	0x40020c00
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40013c00 	.word	0x40013c00

08003d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	887b      	ldrh	r3, [r7, #2]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	e001      	b.n	8003d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da0:	787b      	ldrb	r3, [r7, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dac:	e003      	b.n	8003db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	041a      	lsls	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	619a      	str	r2, [r3, #24]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dda:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f806 	bl	8003df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40013c00 	.word	0x40013c00

08003df4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e267      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d075      	beq.n	8003f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e2a:	4b88      	ldr	r3, [pc, #544]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d00c      	beq.n	8003e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e36:	4b85      	ldr	r3, [pc, #532]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d112      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e42:	4b82      	ldr	r3, [pc, #520]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	4b7e      	ldr	r3, [pc, #504]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05b      	beq.n	8003f14 <HAL_RCC_OscConfig+0x108>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d157      	bne.n	8003f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e242      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d106      	bne.n	8003e80 <HAL_RCC_OscConfig+0x74>
 8003e72:	4b76      	ldr	r3, [pc, #472]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a75      	ldr	r2, [pc, #468]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e01d      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x98>
 8003e8a:	4b70      	ldr	r3, [pc, #448]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6f      	ldr	r2, [pc, #444]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b6d      	ldr	r3, [pc, #436]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a6c      	ldr	r2, [pc, #432]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003ea4:	4b69      	ldr	r3, [pc, #420]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a68      	ldr	r2, [pc, #416]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b66      	ldr	r3, [pc, #408]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a65      	ldr	r2, [pc, #404]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fdba 	bl	8002a3c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fe fdb6 	bl	8002a3c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e207      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	4b5b      	ldr	r3, [pc, #364]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0xc0>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fe fda6 	bl	8002a3c <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fe fda2 	bl	8002a3c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	; 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e1f3      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f06:	4b51      	ldr	r3, [pc, #324]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xe8>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d063      	beq.n	8003fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f22:	4b4a      	ldr	r3, [pc, #296]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2e:	4b47      	ldr	r3, [pc, #284]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d11c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3a:	4b44      	ldr	r3, [pc, #272]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d116      	bne.n	8003f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	4b41      	ldr	r3, [pc, #260]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_RCC_OscConfig+0x152>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e1c7      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4937      	ldr	r1, [pc, #220]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f72:	e03a      	b.n	8003fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f7c:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_RCC_OscConfig+0x244>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fe fd5b 	bl	8002a3c <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f8a:	f7fe fd57 	bl	8002a3c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e1a8      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b28      	ldr	r3, [pc, #160]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4925      	ldr	r1, [pc, #148]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]
 8003fbc:	e015      	b.n	8003fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_OscConfig+0x244>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fd3a 	bl	8002a3c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fcc:	f7fe fd36 	bl	8002a3c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e187      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d036      	beq.n	8004064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <HAL_RCC_OscConfig+0x248>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7fe fd1a 	bl	8002a3c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400c:	f7fe fd16 	bl	8002a3c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e167      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_OscConfig+0x240>)
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x200>
 800402a:	e01b      	b.n	8004064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_OscConfig+0x248>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004032:	f7fe fd03 	bl	8002a3c <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	e00e      	b.n	8004058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800403a:	f7fe fcff 	bl	8002a3c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d907      	bls.n	8004058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e150      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
 800404c:	40023800 	.word	0x40023800
 8004050:	42470000 	.word	0x42470000
 8004054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	4b88      	ldr	r3, [pc, #544]	; (800427c <HAL_RCC_OscConfig+0x470>)
 800405a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1ea      	bne.n	800403a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8097 	beq.w	80041a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004072:	2300      	movs	r3, #0
 8004074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004076:	4b81      	ldr	r3, [pc, #516]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	4b7d      	ldr	r3, [pc, #500]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a7c      	ldr	r2, [pc, #496]	; (800427c <HAL_RCC_OscConfig+0x470>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b7a      	ldr	r3, [pc, #488]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b77      	ldr	r3, [pc, #476]	; (8004280 <HAL_RCC_OscConfig+0x474>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d118      	bne.n	80040e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ae:	4b74      	ldr	r3, [pc, #464]	; (8004280 <HAL_RCC_OscConfig+0x474>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a73      	ldr	r2, [pc, #460]	; (8004280 <HAL_RCC_OscConfig+0x474>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ba:	f7fe fcbf 	bl	8002a3c <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c2:	f7fe fcbb 	bl	8002a3c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e10c      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d4:	4b6a      	ldr	r3, [pc, #424]	; (8004280 <HAL_RCC_OscConfig+0x474>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x2ea>
 80040e8:	4b64      	ldr	r3, [pc, #400]	; (800427c <HAL_RCC_OscConfig+0x470>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_RCC_OscConfig+0x470>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
 80040f4:	e01c      	b.n	8004130 <HAL_RCC_OscConfig+0x324>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x30c>
 80040fe:	4b5f      	ldr	r3, [pc, #380]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	4a5e      	ldr	r2, [pc, #376]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004104:	f043 0304 	orr.w	r3, r3, #4
 8004108:	6713      	str	r3, [r2, #112]	; 0x70
 800410a:	4b5c      	ldr	r3, [pc, #368]	; (800427c <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a5b      	ldr	r2, [pc, #364]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0x324>
 8004118:	4b58      	ldr	r3, [pc, #352]	; (800427c <HAL_RCC_OscConfig+0x470>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	4a57      	ldr	r2, [pc, #348]	; (800427c <HAL_RCC_OscConfig+0x470>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	6713      	str	r3, [r2, #112]	; 0x70
 8004124:	4b55      	ldr	r3, [pc, #340]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	4a54      	ldr	r2, [pc, #336]	; (800427c <HAL_RCC_OscConfig+0x470>)
 800412a:	f023 0304 	bic.w	r3, r3, #4
 800412e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d015      	beq.n	8004164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fe fc80 	bl	8002a3c <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fe fc7c 	bl	8002a3c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	; 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0cb      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	4b49      	ldr	r3, [pc, #292]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ee      	beq.n	8004140 <HAL_RCC_OscConfig+0x334>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7fe fc6a 	bl	8002a3c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fe fc66 	bl	8002a3c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e0b5      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004182:	4b3e      	ldr	r3, [pc, #248]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1ee      	bne.n	800416c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004194:	4b39      	ldr	r3, [pc, #228]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	4a38      	ldr	r2, [pc, #224]	; (800427c <HAL_RCC_OscConfig+0x470>)
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80a1 	beq.w	80042ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041aa:	4b34      	ldr	r3, [pc, #208]	; (800427c <HAL_RCC_OscConfig+0x470>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d05c      	beq.n	8004270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d141      	bne.n	8004242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_RCC_OscConfig+0x478>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fe fc3a 	bl	8002a3c <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fe fc36 	bl	8002a3c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e087      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	4b27      	ldr	r3, [pc, #156]	; (800427c <HAL_RCC_OscConfig+0x470>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	061b      	lsls	r3, r3, #24
 800420e:	491b      	ldr	r1, [pc, #108]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x478>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fe fc0f 	bl	8002a3c <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe fc0b 	bl	8002a3c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e05c      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004234:	4b11      	ldr	r3, [pc, #68]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x416>
 8004240:	e054      	b.n	80042ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_RCC_OscConfig+0x478>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fe fbf8 	bl	8002a3c <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004250:	f7fe fbf4 	bl	8002a3c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e045      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCC_OscConfig+0x470>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x444>
 800426e:	e03d      	b.n	80042ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d107      	bne.n	8004288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e038      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
 800427c:	40023800 	.word	0x40023800
 8004280:	40007000 	.word	0x40007000
 8004284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <HAL_RCC_OscConfig+0x4ec>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d028      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d121      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d11a      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d111      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	3b01      	subs	r3, #1
 80042d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800

080042fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0cc      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b68      	ldr	r3, [pc, #416]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d90c      	bls.n	8004338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0b8      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a58      	ldr	r2, [pc, #352]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800435a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	494d      	ldr	r1, [pc, #308]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d044      	beq.n	800441c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d119      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e07f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e06f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e067      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4934      	ldr	r1, [pc, #208]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fe fb26 	bl	8002a3c <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fe fb22 	bl	8002a3c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d20c      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e032      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4916      	ldr	r1, [pc, #88]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004482:	f000 f821 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490a      	ldr	r1, [pc, #40]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fa86 	bl	80029b4 <HAL_InitTick>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023c00 	.word	0x40023c00
 80044b8:	40023800 	.word	0x40023800
 80044bc:	08007534 	.word	0x08007534
 80044c0:	20000000 	.word	0x20000000
 80044c4:	20000004 	.word	0x20000004

080044c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044cc:	b090      	sub	sp, #64	; 0x40
 80044ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
 80044d4:	2300      	movs	r3, #0
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d8:	2300      	movs	r3, #0
 80044da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e0:	4b59      	ldr	r3, [pc, #356]	; (8004648 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d00d      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x40>
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	f200 80a1 	bhi.w	8004634 <HAL_RCC_GetSysClockFreq+0x16c>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x34>
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x3a>
 80044fa:	e09b      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b53      	ldr	r3, [pc, #332]	; (800464c <HAL_RCC_GetSysClockFreq+0x184>)
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004500:	e09b      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004502:	4b53      	ldr	r3, [pc, #332]	; (8004650 <HAL_RCC_GetSysClockFreq+0x188>)
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004506:	e098      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004508:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <HAL_RCC_GetSysClockFreq+0x180>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004512:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <HAL_RCC_GetSysClockFreq+0x180>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d028      	beq.n	8004570 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451e:	4b4a      	ldr	r3, [pc, #296]	; (8004648 <HAL_RCC_GetSysClockFreq+0x180>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	099b      	lsrs	r3, r3, #6
 8004524:	2200      	movs	r2, #0
 8004526:	623b      	str	r3, [r7, #32]
 8004528:	627a      	str	r2, [r7, #36]	; 0x24
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004530:	2100      	movs	r1, #0
 8004532:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCC_GetSysClockFreq+0x188>)
 8004534:	fb03 f201 	mul.w	r2, r3, r1
 8004538:	2300      	movs	r3, #0
 800453a:	fb00 f303 	mul.w	r3, r0, r3
 800453e:	4413      	add	r3, r2
 8004540:	4a43      	ldr	r2, [pc, #268]	; (8004650 <HAL_RCC_GetSysClockFreq+0x188>)
 8004542:	fba0 1202 	umull	r1, r2, r0, r2
 8004546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004548:	460a      	mov	r2, r1
 800454a:	62ba      	str	r2, [r7, #40]	; 0x28
 800454c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454e:	4413      	add	r3, r2
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004554:	2200      	movs	r2, #0
 8004556:	61bb      	str	r3, [r7, #24]
 8004558:	61fa      	str	r2, [r7, #28]
 800455a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800455e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004562:	f7fc fb29 	bl	8000bb8 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4613      	mov	r3, r2
 800456c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456e:	e053      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004570:	4b35      	ldr	r3, [pc, #212]	; (8004648 <HAL_RCC_GetSysClockFreq+0x180>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	099b      	lsrs	r3, r3, #6
 8004576:	2200      	movs	r2, #0
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	617a      	str	r2, [r7, #20]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004582:	f04f 0b00 	mov.w	fp, #0
 8004586:	4652      	mov	r2, sl
 8004588:	465b      	mov	r3, fp
 800458a:	f04f 0000 	mov.w	r0, #0
 800458e:	f04f 0100 	mov.w	r1, #0
 8004592:	0159      	lsls	r1, r3, #5
 8004594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004598:	0150      	lsls	r0, r2, #5
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	ebb2 080a 	subs.w	r8, r2, sl
 80045a2:	eb63 090b 	sbc.w	r9, r3, fp
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045ba:	ebb2 0408 	subs.w	r4, r2, r8
 80045be:	eb63 0509 	sbc.w	r5, r3, r9
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	00eb      	lsls	r3, r5, #3
 80045cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045d0:	00e2      	lsls	r2, r4, #3
 80045d2:	4614      	mov	r4, r2
 80045d4:	461d      	mov	r5, r3
 80045d6:	eb14 030a 	adds.w	r3, r4, sl
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	eb45 030b 	adc.w	r3, r5, fp
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ee:	4629      	mov	r1, r5
 80045f0:	028b      	lsls	r3, r1, #10
 80045f2:	4621      	mov	r1, r4
 80045f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045f8:	4621      	mov	r1, r4
 80045fa:	028a      	lsls	r2, r1, #10
 80045fc:	4610      	mov	r0, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004602:	2200      	movs	r2, #0
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	60fa      	str	r2, [r7, #12]
 8004608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800460c:	f7fc fad4 	bl	8000bb8 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4613      	mov	r3, r2
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_GetSysClockFreq+0x180>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	3301      	adds	r3, #1
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004628:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004632:	e002      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <HAL_RCC_GetSysClockFreq+0x184>)
 8004636:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800463c:	4618      	mov	r0, r3
 800463e:	3740      	adds	r7, #64	; 0x40
 8004640:	46bd      	mov	sp, r7
 8004642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800
 800464c:	00f42400 	.word	0x00f42400
 8004650:	017d7840 	.word	0x017d7840

08004654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <HAL_RCC_GetHCLKFreq+0x14>)
 800465a:	681b      	ldr	r3, [r3, #0]
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000000 	.word	0x20000000

0800466c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004670:	f7ff fff0 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0a9b      	lsrs	r3, r3, #10
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4903      	ldr	r1, [pc, #12]	; (8004690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40023800 	.word	0x40023800
 8004690:	08007544 	.word	0x08007544

08004694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004698:	f7ff ffdc 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	0b5b      	lsrs	r3, r3, #13
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4903      	ldr	r1, [pc, #12]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	08007544 	.word	0x08007544

080046bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e041      	b.n	8004752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fd ffdc 	bl	80026a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f000 f8f4 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_TIM_ConfigClockSource+0x1c>
 8004772:	2302      	movs	r3, #2
 8004774:	e0b4      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x186>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004794:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800479c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ae:	d03e      	beq.n	800482e <HAL_TIM_ConfigClockSource+0xd4>
 80047b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b4:	f200 8087 	bhi.w	80048c6 <HAL_TIM_ConfigClockSource+0x16c>
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047bc:	f000 8086 	beq.w	80048cc <HAL_TIM_ConfigClockSource+0x172>
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	d87f      	bhi.n	80048c6 <HAL_TIM_ConfigClockSource+0x16c>
 80047c6:	2b70      	cmp	r3, #112	; 0x70
 80047c8:	d01a      	beq.n	8004800 <HAL_TIM_ConfigClockSource+0xa6>
 80047ca:	2b70      	cmp	r3, #112	; 0x70
 80047cc:	d87b      	bhi.n	80048c6 <HAL_TIM_ConfigClockSource+0x16c>
 80047ce:	2b60      	cmp	r3, #96	; 0x60
 80047d0:	d050      	beq.n	8004874 <HAL_TIM_ConfigClockSource+0x11a>
 80047d2:	2b60      	cmp	r3, #96	; 0x60
 80047d4:	d877      	bhi.n	80048c6 <HAL_TIM_ConfigClockSource+0x16c>
 80047d6:	2b50      	cmp	r3, #80	; 0x50
 80047d8:	d03c      	beq.n	8004854 <HAL_TIM_ConfigClockSource+0xfa>
 80047da:	2b50      	cmp	r3, #80	; 0x50
 80047dc:	d873      	bhi.n	80048c6 <HAL_TIM_ConfigClockSource+0x16c>
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d058      	beq.n	8004894 <HAL_TIM_ConfigClockSource+0x13a>
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d86f      	bhi.n	80048c6 <HAL_TIM_ConfigClockSource+0x16c>
 80047e6:	2b30      	cmp	r3, #48	; 0x30
 80047e8:	d064      	beq.n	80048b4 <HAL_TIM_ConfigClockSource+0x15a>
 80047ea:	2b30      	cmp	r3, #48	; 0x30
 80047ec:	d86b      	bhi.n	80048c6 <HAL_TIM_ConfigClockSource+0x16c>
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d060      	beq.n	80048b4 <HAL_TIM_ConfigClockSource+0x15a>
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d867      	bhi.n	80048c6 <HAL_TIM_ConfigClockSource+0x16c>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d05c      	beq.n	80048b4 <HAL_TIM_ConfigClockSource+0x15a>
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d05a      	beq.n	80048b4 <HAL_TIM_ConfigClockSource+0x15a>
 80047fe:	e062      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6899      	ldr	r1, [r3, #8]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f000 f964 	bl	8004adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004822:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	609a      	str	r2, [r3, #8]
      break;
 800482c:	e04f      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6899      	ldr	r1, [r3, #8]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f000 f94d 	bl	8004adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004850:	609a      	str	r2, [r3, #8]
      break;
 8004852:	e03c      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	6859      	ldr	r1, [r3, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	461a      	mov	r2, r3
 8004862:	f000 f8c1 	bl	80049e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2150      	movs	r1, #80	; 0x50
 800486c:	4618      	mov	r0, r3
 800486e:	f000 f91a 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 8004872:	e02c      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	6859      	ldr	r1, [r3, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	461a      	mov	r2, r3
 8004882:	f000 f8e0 	bl	8004a46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2160      	movs	r1, #96	; 0x60
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f90a 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 8004892:	e01c      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	461a      	mov	r2, r3
 80048a2:	f000 f8a1 	bl	80049e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2140      	movs	r1, #64	; 0x40
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 f8fa 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 80048b2:	e00c      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f000 f8f1 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 80048c4:	e003      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
      break;
 80048ca:	e000      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048de:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a34      	ldr	r2, [pc, #208]	; (80049cc <TIM_Base_SetConfig+0xe4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00f      	beq.n	8004920 <TIM_Base_SetConfig+0x38>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d00b      	beq.n	8004920 <TIM_Base_SetConfig+0x38>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a31      	ldr	r2, [pc, #196]	; (80049d0 <TIM_Base_SetConfig+0xe8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <TIM_Base_SetConfig+0x38>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a30      	ldr	r2, [pc, #192]	; (80049d4 <TIM_Base_SetConfig+0xec>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_Base_SetConfig+0x38>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a2f      	ldr	r2, [pc, #188]	; (80049d8 <TIM_Base_SetConfig+0xf0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d108      	bne.n	8004932 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a25      	ldr	r2, [pc, #148]	; (80049cc <TIM_Base_SetConfig+0xe4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01b      	beq.n	8004972 <TIM_Base_SetConfig+0x8a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	d017      	beq.n	8004972 <TIM_Base_SetConfig+0x8a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <TIM_Base_SetConfig+0xe8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <TIM_Base_SetConfig+0x8a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <TIM_Base_SetConfig+0xec>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00f      	beq.n	8004972 <TIM_Base_SetConfig+0x8a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <TIM_Base_SetConfig+0xf0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00b      	beq.n	8004972 <TIM_Base_SetConfig+0x8a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <TIM_Base_SetConfig+0xf4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <TIM_Base_SetConfig+0x8a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <TIM_Base_SetConfig+0xf8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_Base_SetConfig+0x8a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <TIM_Base_SetConfig+0xfc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d108      	bne.n	8004984 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a08      	ldr	r2, [pc, #32]	; (80049cc <TIM_Base_SetConfig+0xe4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d103      	bne.n	80049b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	615a      	str	r2, [r3, #20]
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800
 80049d8:	40000c00 	.word	0x40000c00
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40014400 	.word	0x40014400
 80049e4:	40014800 	.word	0x40014800

080049e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 030a 	bic.w	r3, r3, #10
 8004a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b087      	sub	sp, #28
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0210 	bic.w	r2, r3, #16
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	031b      	lsls	r3, r3, #12
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f043 0307 	orr.w	r3, r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	609a      	str	r2, [r3, #8]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	021a      	lsls	r2, r3, #8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e050      	b.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d018      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b80:	d013      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a16      	ldr	r2, [pc, #88]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d009      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40014000 	.word	0x40014000

08004bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e03f      	b.n	8004c8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fd fd5e 	bl	80026e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2224      	movs	r2, #36	; 0x24
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f829 	bl	8004c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c98:	b0c0      	sub	sp, #256	; 0x100
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	68d9      	ldr	r1, [r3, #12]
 8004cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	ea40 0301 	orr.w	r3, r0, r1
 8004cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cec:	f021 010c 	bic.w	r1, r1, #12
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	6999      	ldr	r1, [r3, #24]
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	ea40 0301 	orr.w	r3, r0, r1
 8004d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b8f      	ldr	r3, [pc, #572]	; (8004f60 <UART_SetConfig+0x2cc>)
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d005      	beq.n	8004d34 <UART_SetConfig+0xa0>
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b8d      	ldr	r3, [pc, #564]	; (8004f64 <UART_SetConfig+0x2d0>)
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d104      	bne.n	8004d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d34:	f7ff fcae 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 8004d38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d3c:	e003      	b.n	8004d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d3e:	f7ff fc95 	bl	800466c <HAL_RCC_GetPCLK1Freq>
 8004d42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d50:	f040 810c 	bne.w	8004f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d66:	4622      	mov	r2, r4
 8004d68:	462b      	mov	r3, r5
 8004d6a:	1891      	adds	r1, r2, r2
 8004d6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d6e:	415b      	adcs	r3, r3
 8004d70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d76:	4621      	mov	r1, r4
 8004d78:	eb12 0801 	adds.w	r8, r2, r1
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	eb43 0901 	adc.w	r9, r3, r1
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d96:	4690      	mov	r8, r2
 8004d98:	4699      	mov	r9, r3
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	eb18 0303 	adds.w	r3, r8, r3
 8004da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004da4:	462b      	mov	r3, r5
 8004da6:	eb49 0303 	adc.w	r3, r9, r3
 8004daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	18db      	adds	r3, r3, r3
 8004dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8004dc8:	4613      	mov	r3, r2
 8004dca:	eb42 0303 	adc.w	r3, r2, r3
 8004dce:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dd8:	f7fb feee 	bl	8000bb8 <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4b61      	ldr	r3, [pc, #388]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004de2:	fba3 2302 	umull	r2, r3, r3, r2
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	011c      	lsls	r4, r3, #4
 8004dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004df4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	1891      	adds	r1, r2, r2
 8004e02:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e04:	415b      	adcs	r3, r3
 8004e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8004e12:	4649      	mov	r1, r9
 8004e14:	eb43 0b01 	adc.w	fp, r3, r1
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e2c:	4692      	mov	sl, r2
 8004e2e:	469b      	mov	fp, r3
 8004e30:	4643      	mov	r3, r8
 8004e32:	eb1a 0303 	adds.w	r3, sl, r3
 8004e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	18db      	adds	r3, r3, r3
 8004e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5e:	4613      	mov	r3, r2
 8004e60:	eb42 0303 	adc.w	r3, r2, r3
 8004e64:	647b      	str	r3, [r7, #68]	; 0x44
 8004e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e6e:	f7fb fea3 	bl	8000bb8 <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4611      	mov	r1, r2
 8004e78:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	2264      	movs	r2, #100	; 0x64
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	1acb      	subs	r3, r1, r3
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e8e:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004e90:	fba3 2302 	umull	r2, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e9c:	441c      	add	r4, r3
 8004e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	1891      	adds	r1, r2, r2
 8004eb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eb8:	415b      	adcs	r3, r3
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	1851      	adds	r1, r2, r1
 8004ec4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	414b      	adcs	r3, r1
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ed8:	4659      	mov	r1, fp
 8004eda:	00cb      	lsls	r3, r1, #3
 8004edc:	4651      	mov	r1, sl
 8004ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ee2:	4651      	mov	r1, sl
 8004ee4:	00ca      	lsls	r2, r1, #3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4603      	mov	r3, r0
 8004eec:	4642      	mov	r2, r8
 8004eee:	189b      	adds	r3, r3, r2
 8004ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	460a      	mov	r2, r1
 8004ef8:	eb42 0303 	adc.w	r3, r2, r3
 8004efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f14:	460b      	mov	r3, r1
 8004f16:	18db      	adds	r3, r3, r3
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	eb42 0303 	adc.w	r3, r2, r3
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f2a:	f7fb fe45 	bl	8000bb8 <__aeabi_uldivmod>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004f34:	fba3 1302 	umull	r1, r3, r3, r2
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	2164      	movs	r1, #100	; 0x64
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	3332      	adds	r3, #50	; 0x32
 8004f46:	4a08      	ldr	r2, [pc, #32]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	f003 0207 	and.w	r2, r3, #7
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4422      	add	r2, r4
 8004f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f5c:	e106      	b.n	800516c <UART_SetConfig+0x4d8>
 8004f5e:	bf00      	nop
 8004f60:	40011000 	.word	0x40011000
 8004f64:	40011400 	.word	0x40011400
 8004f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f7e:	4642      	mov	r2, r8
 8004f80:	464b      	mov	r3, r9
 8004f82:	1891      	adds	r1, r2, r2
 8004f84:	6239      	str	r1, [r7, #32]
 8004f86:	415b      	adcs	r3, r3
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f8e:	4641      	mov	r1, r8
 8004f90:	1854      	adds	r4, r2, r1
 8004f92:	4649      	mov	r1, r9
 8004f94:	eb43 0501 	adc.w	r5, r3, r1
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	00eb      	lsls	r3, r5, #3
 8004fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fa6:	00e2      	lsls	r2, r4, #3
 8004fa8:	4614      	mov	r4, r2
 8004faa:	461d      	mov	r5, r3
 8004fac:	4643      	mov	r3, r8
 8004fae:	18e3      	adds	r3, r4, r3
 8004fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	eb45 0303 	adc.w	r3, r5, r3
 8004fba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fda:	4629      	mov	r1, r5
 8004fdc:	008b      	lsls	r3, r1, #2
 8004fde:	4621      	mov	r1, r4
 8004fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	008a      	lsls	r2, r1, #2
 8004fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fec:	f7fb fde4 	bl	8000bb8 <__aeabi_uldivmod>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4b60      	ldr	r3, [pc, #384]	; (8005178 <UART_SetConfig+0x4e4>)
 8004ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	011c      	lsls	r4, r3, #4
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005008:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800500c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	1891      	adds	r1, r2, r2
 8005016:	61b9      	str	r1, [r7, #24]
 8005018:	415b      	adcs	r3, r3
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005020:	4641      	mov	r1, r8
 8005022:	1851      	adds	r1, r2, r1
 8005024:	6139      	str	r1, [r7, #16]
 8005026:	4649      	mov	r1, r9
 8005028:	414b      	adcs	r3, r1
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005038:	4659      	mov	r1, fp
 800503a:	00cb      	lsls	r3, r1, #3
 800503c:	4651      	mov	r1, sl
 800503e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005042:	4651      	mov	r1, sl
 8005044:	00ca      	lsls	r2, r1, #3
 8005046:	4610      	mov	r0, r2
 8005048:	4619      	mov	r1, r3
 800504a:	4603      	mov	r3, r0
 800504c:	4642      	mov	r2, r8
 800504e:	189b      	adds	r3, r3, r2
 8005050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005054:	464b      	mov	r3, r9
 8005056:	460a      	mov	r2, r1
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	67bb      	str	r3, [r7, #120]	; 0x78
 800506a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005078:	4649      	mov	r1, r9
 800507a:	008b      	lsls	r3, r1, #2
 800507c:	4641      	mov	r1, r8
 800507e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005082:	4641      	mov	r1, r8
 8005084:	008a      	lsls	r2, r1, #2
 8005086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800508a:	f7fb fd95 	bl	8000bb8 <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4611      	mov	r1, r2
 8005094:	4b38      	ldr	r3, [pc, #224]	; (8005178 <UART_SetConfig+0x4e4>)
 8005096:	fba3 2301 	umull	r2, r3, r3, r1
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	2264      	movs	r2, #100	; 0x64
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	1acb      	subs	r3, r1, r3
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	3332      	adds	r3, #50	; 0x32
 80050a8:	4a33      	ldr	r2, [pc, #204]	; (8005178 <UART_SetConfig+0x4e4>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b4:	441c      	add	r4, r3
 80050b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ba:	2200      	movs	r2, #0
 80050bc:	673b      	str	r3, [r7, #112]	; 0x70
 80050be:	677a      	str	r2, [r7, #116]	; 0x74
 80050c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050c4:	4642      	mov	r2, r8
 80050c6:	464b      	mov	r3, r9
 80050c8:	1891      	adds	r1, r2, r2
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	415b      	adcs	r3, r3
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050d4:	4641      	mov	r1, r8
 80050d6:	1851      	adds	r1, r2, r1
 80050d8:	6039      	str	r1, [r7, #0]
 80050da:	4649      	mov	r1, r9
 80050dc:	414b      	adcs	r3, r1
 80050de:	607b      	str	r3, [r7, #4]
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050ec:	4659      	mov	r1, fp
 80050ee:	00cb      	lsls	r3, r1, #3
 80050f0:	4651      	mov	r1, sl
 80050f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f6:	4651      	mov	r1, sl
 80050f8:	00ca      	lsls	r2, r1, #3
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	4642      	mov	r2, r8
 8005102:	189b      	adds	r3, r3, r2
 8005104:	66bb      	str	r3, [r7, #104]	; 0x68
 8005106:	464b      	mov	r3, r9
 8005108:	460a      	mov	r2, r1
 800510a:	eb42 0303 	adc.w	r3, r2, r3
 800510e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	663b      	str	r3, [r7, #96]	; 0x60
 800511a:	667a      	str	r2, [r7, #100]	; 0x64
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005128:	4649      	mov	r1, r9
 800512a:	008b      	lsls	r3, r1, #2
 800512c:	4641      	mov	r1, r8
 800512e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005132:	4641      	mov	r1, r8
 8005134:	008a      	lsls	r2, r1, #2
 8005136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800513a:	f7fb fd3d 	bl	8000bb8 <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <UART_SetConfig+0x4e4>)
 8005144:	fba3 1302 	umull	r1, r3, r3, r2
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	2164      	movs	r1, #100	; 0x64
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	3332      	adds	r3, #50	; 0x32
 8005156:	4a08      	ldr	r2, [pc, #32]	; (8005178 <UART_SetConfig+0x4e4>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	f003 020f 	and.w	r2, r3, #15
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4422      	add	r2, r4
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	bf00      	nop
 800516e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005172:	46bd      	mov	sp, r7
 8005174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005178:	51eb851f 	.word	0x51eb851f

0800517c <pow>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	ed2d 8b02 	vpush	{d8}
 8005182:	eeb0 8a40 	vmov.f32	s16, s0
 8005186:	eef0 8a60 	vmov.f32	s17, s1
 800518a:	ec55 4b11 	vmov	r4, r5, d1
 800518e:	f000 f977 	bl	8005480 <__ieee754_pow>
 8005192:	4622      	mov	r2, r4
 8005194:	462b      	mov	r3, r5
 8005196:	4620      	mov	r0, r4
 8005198:	4629      	mov	r1, r5
 800519a:	ec57 6b10 	vmov	r6, r7, d0
 800519e:	f7fb fccd 	bl	8000b3c <__aeabi_dcmpun>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d13b      	bne.n	800521e <pow+0xa2>
 80051a6:	ec51 0b18 	vmov	r0, r1, d8
 80051aa:	2200      	movs	r2, #0
 80051ac:	2300      	movs	r3, #0
 80051ae:	f7fb fc93 	bl	8000ad8 <__aeabi_dcmpeq>
 80051b2:	b1b8      	cbz	r0, 80051e4 <pow+0x68>
 80051b4:	2200      	movs	r2, #0
 80051b6:	2300      	movs	r3, #0
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb fc8c 	bl	8000ad8 <__aeabi_dcmpeq>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d146      	bne.n	8005252 <pow+0xd6>
 80051c4:	ec45 4b10 	vmov	d0, r4, r5
 80051c8:	f000 f874 	bl	80052b4 <finite>
 80051cc:	b338      	cbz	r0, 800521e <pow+0xa2>
 80051ce:	2200      	movs	r2, #0
 80051d0:	2300      	movs	r3, #0
 80051d2:	4620      	mov	r0, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	f7fb fc89 	bl	8000aec <__aeabi_dcmplt>
 80051da:	b300      	cbz	r0, 800521e <pow+0xa2>
 80051dc:	f001 f892 	bl	8006304 <__errno>
 80051e0:	2322      	movs	r3, #34	; 0x22
 80051e2:	e01b      	b.n	800521c <pow+0xa0>
 80051e4:	ec47 6b10 	vmov	d0, r6, r7
 80051e8:	f000 f864 	bl	80052b4 <finite>
 80051ec:	b9e0      	cbnz	r0, 8005228 <pow+0xac>
 80051ee:	eeb0 0a48 	vmov.f32	s0, s16
 80051f2:	eef0 0a68 	vmov.f32	s1, s17
 80051f6:	f000 f85d 	bl	80052b4 <finite>
 80051fa:	b1a8      	cbz	r0, 8005228 <pow+0xac>
 80051fc:	ec45 4b10 	vmov	d0, r4, r5
 8005200:	f000 f858 	bl	80052b4 <finite>
 8005204:	b180      	cbz	r0, 8005228 <pow+0xac>
 8005206:	4632      	mov	r2, r6
 8005208:	463b      	mov	r3, r7
 800520a:	4630      	mov	r0, r6
 800520c:	4639      	mov	r1, r7
 800520e:	f7fb fc95 	bl	8000b3c <__aeabi_dcmpun>
 8005212:	2800      	cmp	r0, #0
 8005214:	d0e2      	beq.n	80051dc <pow+0x60>
 8005216:	f001 f875 	bl	8006304 <__errno>
 800521a:	2321      	movs	r3, #33	; 0x21
 800521c:	6003      	str	r3, [r0, #0]
 800521e:	ecbd 8b02 	vpop	{d8}
 8005222:	ec47 6b10 	vmov	d0, r6, r7
 8005226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	4630      	mov	r0, r6
 800522e:	4639      	mov	r1, r7
 8005230:	f7fb fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8005234:	2800      	cmp	r0, #0
 8005236:	d0f2      	beq.n	800521e <pow+0xa2>
 8005238:	eeb0 0a48 	vmov.f32	s0, s16
 800523c:	eef0 0a68 	vmov.f32	s1, s17
 8005240:	f000 f838 	bl	80052b4 <finite>
 8005244:	2800      	cmp	r0, #0
 8005246:	d0ea      	beq.n	800521e <pow+0xa2>
 8005248:	ec45 4b10 	vmov	d0, r4, r5
 800524c:	f000 f832 	bl	80052b4 <finite>
 8005250:	e7c3      	b.n	80051da <pow+0x5e>
 8005252:	4f01      	ldr	r7, [pc, #4]	; (8005258 <pow+0xdc>)
 8005254:	2600      	movs	r6, #0
 8005256:	e7e2      	b.n	800521e <pow+0xa2>
 8005258:	3ff00000 	.word	0x3ff00000

0800525c <sqrt>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	ed2d 8b02 	vpush	{d8}
 8005262:	ec55 4b10 	vmov	r4, r5, d0
 8005266:	f000 f831 	bl	80052cc <__ieee754_sqrt>
 800526a:	4622      	mov	r2, r4
 800526c:	462b      	mov	r3, r5
 800526e:	4620      	mov	r0, r4
 8005270:	4629      	mov	r1, r5
 8005272:	eeb0 8a40 	vmov.f32	s16, s0
 8005276:	eef0 8a60 	vmov.f32	s17, s1
 800527a:	f7fb fc5f 	bl	8000b3c <__aeabi_dcmpun>
 800527e:	b990      	cbnz	r0, 80052a6 <sqrt+0x4a>
 8005280:	2200      	movs	r2, #0
 8005282:	2300      	movs	r3, #0
 8005284:	4620      	mov	r0, r4
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb fc30 	bl	8000aec <__aeabi_dcmplt>
 800528c:	b158      	cbz	r0, 80052a6 <sqrt+0x4a>
 800528e:	f001 f839 	bl	8006304 <__errno>
 8005292:	2321      	movs	r3, #33	; 0x21
 8005294:	6003      	str	r3, [r0, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	2300      	movs	r3, #0
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	f7fb fadd 	bl	800085c <__aeabi_ddiv>
 80052a2:	ec41 0b18 	vmov	d8, r0, r1
 80052a6:	eeb0 0a48 	vmov.f32	s0, s16
 80052aa:	eef0 0a68 	vmov.f32	s1, s17
 80052ae:	ecbd 8b02 	vpop	{d8}
 80052b2:	bd38      	pop	{r3, r4, r5, pc}

080052b4 <finite>:
 80052b4:	b082      	sub	sp, #8
 80052b6:	ed8d 0b00 	vstr	d0, [sp]
 80052ba:	9801      	ldr	r0, [sp, #4]
 80052bc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80052c0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80052c4:	0fc0      	lsrs	r0, r0, #31
 80052c6:	b002      	add	sp, #8
 80052c8:	4770      	bx	lr
	...

080052cc <__ieee754_sqrt>:
 80052cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d0:	ec55 4b10 	vmov	r4, r5, d0
 80052d4:	4e67      	ldr	r6, [pc, #412]	; (8005474 <__ieee754_sqrt+0x1a8>)
 80052d6:	43ae      	bics	r6, r5
 80052d8:	ee10 0a10 	vmov	r0, s0
 80052dc:	ee10 2a10 	vmov	r2, s0
 80052e0:	4629      	mov	r1, r5
 80052e2:	462b      	mov	r3, r5
 80052e4:	d10d      	bne.n	8005302 <__ieee754_sqrt+0x36>
 80052e6:	f7fb f98f 	bl	8000608 <__aeabi_dmul>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4620      	mov	r0, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	f7fa ffd3 	bl	800029c <__adddf3>
 80052f6:	4604      	mov	r4, r0
 80052f8:	460d      	mov	r5, r1
 80052fa:	ec45 4b10 	vmov	d0, r4, r5
 80052fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005302:	2d00      	cmp	r5, #0
 8005304:	dc0b      	bgt.n	800531e <__ieee754_sqrt+0x52>
 8005306:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800530a:	4326      	orrs	r6, r4
 800530c:	d0f5      	beq.n	80052fa <__ieee754_sqrt+0x2e>
 800530e:	b135      	cbz	r5, 800531e <__ieee754_sqrt+0x52>
 8005310:	f7fa ffc2 	bl	8000298 <__aeabi_dsub>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	f7fb faa0 	bl	800085c <__aeabi_ddiv>
 800531c:	e7eb      	b.n	80052f6 <__ieee754_sqrt+0x2a>
 800531e:	1509      	asrs	r1, r1, #20
 8005320:	f000 808d 	beq.w	800543e <__ieee754_sqrt+0x172>
 8005324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005328:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800532c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005330:	07c9      	lsls	r1, r1, #31
 8005332:	bf5c      	itt	pl
 8005334:	005b      	lslpl	r3, r3, #1
 8005336:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800533a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800533e:	bf58      	it	pl
 8005340:	0052      	lslpl	r2, r2, #1
 8005342:	2500      	movs	r5, #0
 8005344:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005348:	1076      	asrs	r6, r6, #1
 800534a:	0052      	lsls	r2, r2, #1
 800534c:	f04f 0e16 	mov.w	lr, #22
 8005350:	46ac      	mov	ip, r5
 8005352:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005356:	eb0c 0001 	add.w	r0, ip, r1
 800535a:	4298      	cmp	r0, r3
 800535c:	bfde      	ittt	le
 800535e:	1a1b      	suble	r3, r3, r0
 8005360:	eb00 0c01 	addle.w	ip, r0, r1
 8005364:	186d      	addle	r5, r5, r1
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	f1be 0e01 	subs.w	lr, lr, #1
 800536c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005370:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005374:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005378:	d1ed      	bne.n	8005356 <__ieee754_sqrt+0x8a>
 800537a:	4674      	mov	r4, lr
 800537c:	2720      	movs	r7, #32
 800537e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005382:	4563      	cmp	r3, ip
 8005384:	eb01 000e 	add.w	r0, r1, lr
 8005388:	dc02      	bgt.n	8005390 <__ieee754_sqrt+0xc4>
 800538a:	d113      	bne.n	80053b4 <__ieee754_sqrt+0xe8>
 800538c:	4290      	cmp	r0, r2
 800538e:	d811      	bhi.n	80053b4 <__ieee754_sqrt+0xe8>
 8005390:	2800      	cmp	r0, #0
 8005392:	eb00 0e01 	add.w	lr, r0, r1
 8005396:	da57      	bge.n	8005448 <__ieee754_sqrt+0x17c>
 8005398:	f1be 0f00 	cmp.w	lr, #0
 800539c:	db54      	blt.n	8005448 <__ieee754_sqrt+0x17c>
 800539e:	f10c 0801 	add.w	r8, ip, #1
 80053a2:	eba3 030c 	sub.w	r3, r3, ip
 80053a6:	4290      	cmp	r0, r2
 80053a8:	bf88      	it	hi
 80053aa:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80053ae:	1a12      	subs	r2, r2, r0
 80053b0:	440c      	add	r4, r1
 80053b2:	46c4      	mov	ip, r8
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	3f01      	subs	r7, #1
 80053b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80053bc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80053c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80053c4:	d1dd      	bne.n	8005382 <__ieee754_sqrt+0xb6>
 80053c6:	4313      	orrs	r3, r2
 80053c8:	d01b      	beq.n	8005402 <__ieee754_sqrt+0x136>
 80053ca:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005478 <__ieee754_sqrt+0x1ac>
 80053ce:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800547c <__ieee754_sqrt+0x1b0>
 80053d2:	e9da 0100 	ldrd	r0, r1, [sl]
 80053d6:	e9db 2300 	ldrd	r2, r3, [fp]
 80053da:	f7fa ff5d 	bl	8000298 <__aeabi_dsub>
 80053de:	e9da 8900 	ldrd	r8, r9, [sl]
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4640      	mov	r0, r8
 80053e8:	4649      	mov	r1, r9
 80053ea:	f7fb fb89 	bl	8000b00 <__aeabi_dcmple>
 80053ee:	b140      	cbz	r0, 8005402 <__ieee754_sqrt+0x136>
 80053f0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80053f4:	e9da 0100 	ldrd	r0, r1, [sl]
 80053f8:	e9db 2300 	ldrd	r2, r3, [fp]
 80053fc:	d126      	bne.n	800544c <__ieee754_sqrt+0x180>
 80053fe:	3501      	adds	r5, #1
 8005400:	463c      	mov	r4, r7
 8005402:	106a      	asrs	r2, r5, #1
 8005404:	0863      	lsrs	r3, r4, #1
 8005406:	07e9      	lsls	r1, r5, #31
 8005408:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800540c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005410:	bf48      	it	mi
 8005412:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005416:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800541a:	461c      	mov	r4, r3
 800541c:	e76d      	b.n	80052fa <__ieee754_sqrt+0x2e>
 800541e:	0ad3      	lsrs	r3, r2, #11
 8005420:	3815      	subs	r0, #21
 8005422:	0552      	lsls	r2, r2, #21
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0fa      	beq.n	800541e <__ieee754_sqrt+0x152>
 8005428:	02dc      	lsls	r4, r3, #11
 800542a:	d50a      	bpl.n	8005442 <__ieee754_sqrt+0x176>
 800542c:	f1c1 0420 	rsb	r4, r1, #32
 8005430:	fa22 f404 	lsr.w	r4, r2, r4
 8005434:	1e4d      	subs	r5, r1, #1
 8005436:	408a      	lsls	r2, r1
 8005438:	4323      	orrs	r3, r4
 800543a:	1b41      	subs	r1, r0, r5
 800543c:	e772      	b.n	8005324 <__ieee754_sqrt+0x58>
 800543e:	4608      	mov	r0, r1
 8005440:	e7f0      	b.n	8005424 <__ieee754_sqrt+0x158>
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	3101      	adds	r1, #1
 8005446:	e7ef      	b.n	8005428 <__ieee754_sqrt+0x15c>
 8005448:	46e0      	mov	r8, ip
 800544a:	e7aa      	b.n	80053a2 <__ieee754_sqrt+0xd6>
 800544c:	f7fa ff26 	bl	800029c <__adddf3>
 8005450:	e9da 8900 	ldrd	r8, r9, [sl]
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4640      	mov	r0, r8
 800545a:	4649      	mov	r1, r9
 800545c:	f7fb fb46 	bl	8000aec <__aeabi_dcmplt>
 8005460:	b120      	cbz	r0, 800546c <__ieee754_sqrt+0x1a0>
 8005462:	1ca0      	adds	r0, r4, #2
 8005464:	bf08      	it	eq
 8005466:	3501      	addeq	r5, #1
 8005468:	3402      	adds	r4, #2
 800546a:	e7ca      	b.n	8005402 <__ieee754_sqrt+0x136>
 800546c:	3401      	adds	r4, #1
 800546e:	f024 0401 	bic.w	r4, r4, #1
 8005472:	e7c6      	b.n	8005402 <__ieee754_sqrt+0x136>
 8005474:	7ff00000 	.word	0x7ff00000
 8005478:	20000010 	.word	0x20000010
 800547c:	20000018 	.word	0x20000018

08005480 <__ieee754_pow>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	ed2d 8b06 	vpush	{d8-d10}
 8005488:	b089      	sub	sp, #36	; 0x24
 800548a:	ed8d 1b00 	vstr	d1, [sp]
 800548e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005492:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005496:	ea58 0102 	orrs.w	r1, r8, r2
 800549a:	ec57 6b10 	vmov	r6, r7, d0
 800549e:	d115      	bne.n	80054cc <__ieee754_pow+0x4c>
 80054a0:	19b3      	adds	r3, r6, r6
 80054a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80054a6:	4152      	adcs	r2, r2
 80054a8:	4299      	cmp	r1, r3
 80054aa:	4b89      	ldr	r3, [pc, #548]	; (80056d0 <__ieee754_pow+0x250>)
 80054ac:	4193      	sbcs	r3, r2
 80054ae:	f080 84d1 	bcs.w	8005e54 <__ieee754_pow+0x9d4>
 80054b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054b6:	4630      	mov	r0, r6
 80054b8:	4639      	mov	r1, r7
 80054ba:	f7fa feef 	bl	800029c <__adddf3>
 80054be:	ec41 0b10 	vmov	d0, r0, r1
 80054c2:	b009      	add	sp, #36	; 0x24
 80054c4:	ecbd 8b06 	vpop	{d8-d10}
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	4b81      	ldr	r3, [pc, #516]	; (80056d4 <__ieee754_pow+0x254>)
 80054ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80054d2:	429c      	cmp	r4, r3
 80054d4:	ee10 aa10 	vmov	sl, s0
 80054d8:	463d      	mov	r5, r7
 80054da:	dc06      	bgt.n	80054ea <__ieee754_pow+0x6a>
 80054dc:	d101      	bne.n	80054e2 <__ieee754_pow+0x62>
 80054de:	2e00      	cmp	r6, #0
 80054e0:	d1e7      	bne.n	80054b2 <__ieee754_pow+0x32>
 80054e2:	4598      	cmp	r8, r3
 80054e4:	dc01      	bgt.n	80054ea <__ieee754_pow+0x6a>
 80054e6:	d10f      	bne.n	8005508 <__ieee754_pow+0x88>
 80054e8:	b172      	cbz	r2, 8005508 <__ieee754_pow+0x88>
 80054ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80054ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80054f2:	ea55 050a 	orrs.w	r5, r5, sl
 80054f6:	d1dc      	bne.n	80054b2 <__ieee754_pow+0x32>
 80054f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80054fc:	18db      	adds	r3, r3, r3
 80054fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005502:	4152      	adcs	r2, r2
 8005504:	429d      	cmp	r5, r3
 8005506:	e7d0      	b.n	80054aa <__ieee754_pow+0x2a>
 8005508:	2d00      	cmp	r5, #0
 800550a:	da3b      	bge.n	8005584 <__ieee754_pow+0x104>
 800550c:	4b72      	ldr	r3, [pc, #456]	; (80056d8 <__ieee754_pow+0x258>)
 800550e:	4598      	cmp	r8, r3
 8005510:	dc51      	bgt.n	80055b6 <__ieee754_pow+0x136>
 8005512:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005516:	4598      	cmp	r8, r3
 8005518:	f340 84ab 	ble.w	8005e72 <__ieee754_pow+0x9f2>
 800551c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005520:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005524:	2b14      	cmp	r3, #20
 8005526:	dd0f      	ble.n	8005548 <__ieee754_pow+0xc8>
 8005528:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800552c:	fa22 f103 	lsr.w	r1, r2, r3
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	4293      	cmp	r3, r2
 8005536:	f040 849c 	bne.w	8005e72 <__ieee754_pow+0x9f2>
 800553a:	f001 0101 	and.w	r1, r1, #1
 800553e:	f1c1 0302 	rsb	r3, r1, #2
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	b182      	cbz	r2, 8005568 <__ieee754_pow+0xe8>
 8005546:	e05f      	b.n	8005608 <__ieee754_pow+0x188>
 8005548:	2a00      	cmp	r2, #0
 800554a:	d15b      	bne.n	8005604 <__ieee754_pow+0x184>
 800554c:	f1c3 0314 	rsb	r3, r3, #20
 8005550:	fa48 f103 	asr.w	r1, r8, r3
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	4543      	cmp	r3, r8
 800555a:	f040 8487 	bne.w	8005e6c <__ieee754_pow+0x9ec>
 800555e:	f001 0101 	and.w	r1, r1, #1
 8005562:	f1c1 0302 	rsb	r3, r1, #2
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	4b5c      	ldr	r3, [pc, #368]	; (80056dc <__ieee754_pow+0x25c>)
 800556a:	4598      	cmp	r8, r3
 800556c:	d132      	bne.n	80055d4 <__ieee754_pow+0x154>
 800556e:	f1b9 0f00 	cmp.w	r9, #0
 8005572:	f280 8477 	bge.w	8005e64 <__ieee754_pow+0x9e4>
 8005576:	4959      	ldr	r1, [pc, #356]	; (80056dc <__ieee754_pow+0x25c>)
 8005578:	4632      	mov	r2, r6
 800557a:	463b      	mov	r3, r7
 800557c:	2000      	movs	r0, #0
 800557e:	f7fb f96d 	bl	800085c <__aeabi_ddiv>
 8005582:	e79c      	b.n	80054be <__ieee754_pow+0x3e>
 8005584:	2300      	movs	r3, #0
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	2a00      	cmp	r2, #0
 800558a:	d13d      	bne.n	8005608 <__ieee754_pow+0x188>
 800558c:	4b51      	ldr	r3, [pc, #324]	; (80056d4 <__ieee754_pow+0x254>)
 800558e:	4598      	cmp	r8, r3
 8005590:	d1ea      	bne.n	8005568 <__ieee754_pow+0xe8>
 8005592:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005596:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800559a:	ea53 030a 	orrs.w	r3, r3, sl
 800559e:	f000 8459 	beq.w	8005e54 <__ieee754_pow+0x9d4>
 80055a2:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <__ieee754_pow+0x260>)
 80055a4:	429c      	cmp	r4, r3
 80055a6:	dd08      	ble.n	80055ba <__ieee754_pow+0x13a>
 80055a8:	f1b9 0f00 	cmp.w	r9, #0
 80055ac:	f2c0 8456 	blt.w	8005e5c <__ieee754_pow+0x9dc>
 80055b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055b4:	e783      	b.n	80054be <__ieee754_pow+0x3e>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e7e5      	b.n	8005586 <__ieee754_pow+0x106>
 80055ba:	f1b9 0f00 	cmp.w	r9, #0
 80055be:	f04f 0000 	mov.w	r0, #0
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	f6bf af7a 	bge.w	80054be <__ieee754_pow+0x3e>
 80055ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80055ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055d2:	e774      	b.n	80054be <__ieee754_pow+0x3e>
 80055d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80055d8:	d106      	bne.n	80055e8 <__ieee754_pow+0x168>
 80055da:	4632      	mov	r2, r6
 80055dc:	463b      	mov	r3, r7
 80055de:	4630      	mov	r0, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	f7fb f811 	bl	8000608 <__aeabi_dmul>
 80055e6:	e76a      	b.n	80054be <__ieee754_pow+0x3e>
 80055e8:	4b3e      	ldr	r3, [pc, #248]	; (80056e4 <__ieee754_pow+0x264>)
 80055ea:	4599      	cmp	r9, r3
 80055ec:	d10c      	bne.n	8005608 <__ieee754_pow+0x188>
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	db0a      	blt.n	8005608 <__ieee754_pow+0x188>
 80055f2:	ec47 6b10 	vmov	d0, r6, r7
 80055f6:	b009      	add	sp, #36	; 0x24
 80055f8:	ecbd 8b06 	vpop	{d8-d10}
 80055fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	f7ff be64 	b.w	80052cc <__ieee754_sqrt>
 8005604:	2300      	movs	r3, #0
 8005606:	9304      	str	r3, [sp, #16]
 8005608:	ec47 6b10 	vmov	d0, r6, r7
 800560c:	f000 fc92 	bl	8005f34 <fabs>
 8005610:	ec51 0b10 	vmov	r0, r1, d0
 8005614:	f1ba 0f00 	cmp.w	sl, #0
 8005618:	d129      	bne.n	800566e <__ieee754_pow+0x1ee>
 800561a:	b124      	cbz	r4, 8005626 <__ieee754_pow+0x1a6>
 800561c:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <__ieee754_pow+0x25c>)
 800561e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005622:	429a      	cmp	r2, r3
 8005624:	d123      	bne.n	800566e <__ieee754_pow+0x1ee>
 8005626:	f1b9 0f00 	cmp.w	r9, #0
 800562a:	da05      	bge.n	8005638 <__ieee754_pow+0x1b8>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	2000      	movs	r0, #0
 8005632:	492a      	ldr	r1, [pc, #168]	; (80056dc <__ieee754_pow+0x25c>)
 8005634:	f7fb f912 	bl	800085c <__aeabi_ddiv>
 8005638:	2d00      	cmp	r5, #0
 800563a:	f6bf af40 	bge.w	80054be <__ieee754_pow+0x3e>
 800563e:	9b04      	ldr	r3, [sp, #16]
 8005640:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005644:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005648:	431c      	orrs	r4, r3
 800564a:	d108      	bne.n	800565e <__ieee754_pow+0x1de>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f7fa fe20 	bl	8000298 <__aeabi_dsub>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	e78f      	b.n	800557e <__ieee754_pow+0xfe>
 800565e:	9b04      	ldr	r3, [sp, #16]
 8005660:	2b01      	cmp	r3, #1
 8005662:	f47f af2c 	bne.w	80054be <__ieee754_pow+0x3e>
 8005666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800566a:	4619      	mov	r1, r3
 800566c:	e727      	b.n	80054be <__ieee754_pow+0x3e>
 800566e:	0feb      	lsrs	r3, r5, #31
 8005670:	3b01      	subs	r3, #1
 8005672:	9306      	str	r3, [sp, #24]
 8005674:	9a06      	ldr	r2, [sp, #24]
 8005676:	9b04      	ldr	r3, [sp, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	d102      	bne.n	8005682 <__ieee754_pow+0x202>
 800567c:	4632      	mov	r2, r6
 800567e:	463b      	mov	r3, r7
 8005680:	e7e6      	b.n	8005650 <__ieee754_pow+0x1d0>
 8005682:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <__ieee754_pow+0x268>)
 8005684:	4598      	cmp	r8, r3
 8005686:	f340 80fb 	ble.w	8005880 <__ieee754_pow+0x400>
 800568a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800568e:	4598      	cmp	r8, r3
 8005690:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <__ieee754_pow+0x260>)
 8005692:	dd0c      	ble.n	80056ae <__ieee754_pow+0x22e>
 8005694:	429c      	cmp	r4, r3
 8005696:	dc0f      	bgt.n	80056b8 <__ieee754_pow+0x238>
 8005698:	f1b9 0f00 	cmp.w	r9, #0
 800569c:	da0f      	bge.n	80056be <__ieee754_pow+0x23e>
 800569e:	2000      	movs	r0, #0
 80056a0:	b009      	add	sp, #36	; 0x24
 80056a2:	ecbd 8b06 	vpop	{d8-d10}
 80056a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	f000 bc3a 	b.w	8005f22 <__math_oflow>
 80056ae:	429c      	cmp	r4, r3
 80056b0:	dbf2      	blt.n	8005698 <__ieee754_pow+0x218>
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <__ieee754_pow+0x25c>)
 80056b4:	429c      	cmp	r4, r3
 80056b6:	dd19      	ble.n	80056ec <__ieee754_pow+0x26c>
 80056b8:	f1b9 0f00 	cmp.w	r9, #0
 80056bc:	dcef      	bgt.n	800569e <__ieee754_pow+0x21e>
 80056be:	2000      	movs	r0, #0
 80056c0:	b009      	add	sp, #36	; 0x24
 80056c2:	ecbd 8b06 	vpop	{d8-d10}
 80056c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	f000 bc21 	b.w	8005f10 <__math_uflow>
 80056ce:	bf00      	nop
 80056d0:	fff00000 	.word	0xfff00000
 80056d4:	7ff00000 	.word	0x7ff00000
 80056d8:	433fffff 	.word	0x433fffff
 80056dc:	3ff00000 	.word	0x3ff00000
 80056e0:	3fefffff 	.word	0x3fefffff
 80056e4:	3fe00000 	.word	0x3fe00000
 80056e8:	41e00000 	.word	0x41e00000
 80056ec:	4b60      	ldr	r3, [pc, #384]	; (8005870 <__ieee754_pow+0x3f0>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	f7fa fdd2 	bl	8000298 <__aeabi_dsub>
 80056f4:	a354      	add	r3, pc, #336	; (adr r3, 8005848 <__ieee754_pow+0x3c8>)
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	4604      	mov	r4, r0
 80056fc:	460d      	mov	r5, r1
 80056fe:	f7fa ff83 	bl	8000608 <__aeabi_dmul>
 8005702:	a353      	add	r3, pc, #332	; (adr r3, 8005850 <__ieee754_pow+0x3d0>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	4606      	mov	r6, r0
 800570a:	460f      	mov	r7, r1
 800570c:	4620      	mov	r0, r4
 800570e:	4629      	mov	r1, r5
 8005710:	f7fa ff7a 	bl	8000608 <__aeabi_dmul>
 8005714:	4b57      	ldr	r3, [pc, #348]	; (8005874 <__ieee754_pow+0x3f4>)
 8005716:	4682      	mov	sl, r0
 8005718:	468b      	mov	fp, r1
 800571a:	2200      	movs	r2, #0
 800571c:	4620      	mov	r0, r4
 800571e:	4629      	mov	r1, r5
 8005720:	f7fa ff72 	bl	8000608 <__aeabi_dmul>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	a14b      	add	r1, pc, #300	; (adr r1, 8005858 <__ieee754_pow+0x3d8>)
 800572a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800572e:	f7fa fdb3 	bl	8000298 <__aeabi_dsub>
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	f7fa ff67 	bl	8000608 <__aeabi_dmul>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	2000      	movs	r0, #0
 8005740:	494d      	ldr	r1, [pc, #308]	; (8005878 <__ieee754_pow+0x3f8>)
 8005742:	f7fa fda9 	bl	8000298 <__aeabi_dsub>
 8005746:	4622      	mov	r2, r4
 8005748:	4680      	mov	r8, r0
 800574a:	4689      	mov	r9, r1
 800574c:	462b      	mov	r3, r5
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fa ff59 	bl	8000608 <__aeabi_dmul>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4640      	mov	r0, r8
 800575c:	4649      	mov	r1, r9
 800575e:	f7fa ff53 	bl	8000608 <__aeabi_dmul>
 8005762:	a33f      	add	r3, pc, #252	; (adr r3, 8005860 <__ieee754_pow+0x3e0>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa ff4e 	bl	8000608 <__aeabi_dmul>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4650      	mov	r0, sl
 8005772:	4659      	mov	r1, fp
 8005774:	f7fa fd90 	bl	8000298 <__aeabi_dsub>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4680      	mov	r8, r0
 800577e:	4689      	mov	r9, r1
 8005780:	4630      	mov	r0, r6
 8005782:	4639      	mov	r1, r7
 8005784:	f7fa fd8a 	bl	800029c <__adddf3>
 8005788:	2000      	movs	r0, #0
 800578a:	4632      	mov	r2, r6
 800578c:	463b      	mov	r3, r7
 800578e:	4604      	mov	r4, r0
 8005790:	460d      	mov	r5, r1
 8005792:	f7fa fd81 	bl	8000298 <__aeabi_dsub>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4640      	mov	r0, r8
 800579c:	4649      	mov	r1, r9
 800579e:	f7fa fd7b 	bl	8000298 <__aeabi_dsub>
 80057a2:	9b04      	ldr	r3, [sp, #16]
 80057a4:	9a06      	ldr	r2, [sp, #24]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	4682      	mov	sl, r0
 80057ac:	468b      	mov	fp, r1
 80057ae:	f040 81e7 	bne.w	8005b80 <__ieee754_pow+0x700>
 80057b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005868 <__ieee754_pow+0x3e8>
 80057b6:	eeb0 8a47 	vmov.f32	s16, s14
 80057ba:	eef0 8a67 	vmov.f32	s17, s15
 80057be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057c2:	2600      	movs	r6, #0
 80057c4:	4632      	mov	r2, r6
 80057c6:	463b      	mov	r3, r7
 80057c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057cc:	f7fa fd64 	bl	8000298 <__aeabi_dsub>
 80057d0:	4622      	mov	r2, r4
 80057d2:	462b      	mov	r3, r5
 80057d4:	f7fa ff18 	bl	8000608 <__aeabi_dmul>
 80057d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057dc:	4680      	mov	r8, r0
 80057de:	4689      	mov	r9, r1
 80057e0:	4650      	mov	r0, sl
 80057e2:	4659      	mov	r1, fp
 80057e4:	f7fa ff10 	bl	8000608 <__aeabi_dmul>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4640      	mov	r0, r8
 80057ee:	4649      	mov	r1, r9
 80057f0:	f7fa fd54 	bl	800029c <__adddf3>
 80057f4:	4632      	mov	r2, r6
 80057f6:	463b      	mov	r3, r7
 80057f8:	4680      	mov	r8, r0
 80057fa:	4689      	mov	r9, r1
 80057fc:	4620      	mov	r0, r4
 80057fe:	4629      	mov	r1, r5
 8005800:	f7fa ff02 	bl	8000608 <__aeabi_dmul>
 8005804:	460b      	mov	r3, r1
 8005806:	4604      	mov	r4, r0
 8005808:	460d      	mov	r5, r1
 800580a:	4602      	mov	r2, r0
 800580c:	4649      	mov	r1, r9
 800580e:	4640      	mov	r0, r8
 8005810:	f7fa fd44 	bl	800029c <__adddf3>
 8005814:	4b19      	ldr	r3, [pc, #100]	; (800587c <__ieee754_pow+0x3fc>)
 8005816:	4299      	cmp	r1, r3
 8005818:	ec45 4b19 	vmov	d9, r4, r5
 800581c:	4606      	mov	r6, r0
 800581e:	460f      	mov	r7, r1
 8005820:	468b      	mov	fp, r1
 8005822:	f340 82f0 	ble.w	8005e06 <__ieee754_pow+0x986>
 8005826:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800582a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800582e:	4303      	orrs	r3, r0
 8005830:	f000 81e4 	beq.w	8005bfc <__ieee754_pow+0x77c>
 8005834:	ec51 0b18 	vmov	r0, r1, d8
 8005838:	2200      	movs	r2, #0
 800583a:	2300      	movs	r3, #0
 800583c:	f7fb f956 	bl	8000aec <__aeabi_dcmplt>
 8005840:	3800      	subs	r0, #0
 8005842:	bf18      	it	ne
 8005844:	2001      	movne	r0, #1
 8005846:	e72b      	b.n	80056a0 <__ieee754_pow+0x220>
 8005848:	60000000 	.word	0x60000000
 800584c:	3ff71547 	.word	0x3ff71547
 8005850:	f85ddf44 	.word	0xf85ddf44
 8005854:	3e54ae0b 	.word	0x3e54ae0b
 8005858:	55555555 	.word	0x55555555
 800585c:	3fd55555 	.word	0x3fd55555
 8005860:	652b82fe 	.word	0x652b82fe
 8005864:	3ff71547 	.word	0x3ff71547
 8005868:	00000000 	.word	0x00000000
 800586c:	bff00000 	.word	0xbff00000
 8005870:	3ff00000 	.word	0x3ff00000
 8005874:	3fd00000 	.word	0x3fd00000
 8005878:	3fe00000 	.word	0x3fe00000
 800587c:	408fffff 	.word	0x408fffff
 8005880:	4bd5      	ldr	r3, [pc, #852]	; (8005bd8 <__ieee754_pow+0x758>)
 8005882:	402b      	ands	r3, r5
 8005884:	2200      	movs	r2, #0
 8005886:	b92b      	cbnz	r3, 8005894 <__ieee754_pow+0x414>
 8005888:	4bd4      	ldr	r3, [pc, #848]	; (8005bdc <__ieee754_pow+0x75c>)
 800588a:	f7fa febd 	bl	8000608 <__aeabi_dmul>
 800588e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005892:	460c      	mov	r4, r1
 8005894:	1523      	asrs	r3, r4, #20
 8005896:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800589a:	4413      	add	r3, r2
 800589c:	9305      	str	r3, [sp, #20]
 800589e:	4bd0      	ldr	r3, [pc, #832]	; (8005be0 <__ieee754_pow+0x760>)
 80058a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80058a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80058a8:	429c      	cmp	r4, r3
 80058aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80058ae:	dd08      	ble.n	80058c2 <__ieee754_pow+0x442>
 80058b0:	4bcc      	ldr	r3, [pc, #816]	; (8005be4 <__ieee754_pow+0x764>)
 80058b2:	429c      	cmp	r4, r3
 80058b4:	f340 8162 	ble.w	8005b7c <__ieee754_pow+0x6fc>
 80058b8:	9b05      	ldr	r3, [sp, #20]
 80058ba:	3301      	adds	r3, #1
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80058c2:	2400      	movs	r4, #0
 80058c4:	00e3      	lsls	r3, r4, #3
 80058c6:	9307      	str	r3, [sp, #28]
 80058c8:	4bc7      	ldr	r3, [pc, #796]	; (8005be8 <__ieee754_pow+0x768>)
 80058ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058ce:	ed93 7b00 	vldr	d7, [r3]
 80058d2:	4629      	mov	r1, r5
 80058d4:	ec53 2b17 	vmov	r2, r3, d7
 80058d8:	eeb0 9a47 	vmov.f32	s18, s14
 80058dc:	eef0 9a67 	vmov.f32	s19, s15
 80058e0:	4682      	mov	sl, r0
 80058e2:	f7fa fcd9 	bl	8000298 <__aeabi_dsub>
 80058e6:	4652      	mov	r2, sl
 80058e8:	4606      	mov	r6, r0
 80058ea:	460f      	mov	r7, r1
 80058ec:	462b      	mov	r3, r5
 80058ee:	ec51 0b19 	vmov	r0, r1, d9
 80058f2:	f7fa fcd3 	bl	800029c <__adddf3>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	2000      	movs	r0, #0
 80058fc:	49bb      	ldr	r1, [pc, #748]	; (8005bec <__ieee754_pow+0x76c>)
 80058fe:	f7fa ffad 	bl	800085c <__aeabi_ddiv>
 8005902:	ec41 0b1a 	vmov	d10, r0, r1
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4630      	mov	r0, r6
 800590c:	4639      	mov	r1, r7
 800590e:	f7fa fe7b 	bl	8000608 <__aeabi_dmul>
 8005912:	2300      	movs	r3, #0
 8005914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800591e:	46ab      	mov	fp, r5
 8005920:	106d      	asrs	r5, r5, #1
 8005922:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005926:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800592a:	ec41 0b18 	vmov	d8, r0, r1
 800592e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005932:	2200      	movs	r2, #0
 8005934:	4640      	mov	r0, r8
 8005936:	4649      	mov	r1, r9
 8005938:	4614      	mov	r4, r2
 800593a:	461d      	mov	r5, r3
 800593c:	f7fa fe64 	bl	8000608 <__aeabi_dmul>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4630      	mov	r0, r6
 8005946:	4639      	mov	r1, r7
 8005948:	f7fa fca6 	bl	8000298 <__aeabi_dsub>
 800594c:	ec53 2b19 	vmov	r2, r3, d9
 8005950:	4606      	mov	r6, r0
 8005952:	460f      	mov	r7, r1
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	f7fa fc9e 	bl	8000298 <__aeabi_dsub>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4650      	mov	r0, sl
 8005962:	4659      	mov	r1, fp
 8005964:	f7fa fc98 	bl	8000298 <__aeabi_dsub>
 8005968:	4642      	mov	r2, r8
 800596a:	464b      	mov	r3, r9
 800596c:	f7fa fe4c 	bl	8000608 <__aeabi_dmul>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4630      	mov	r0, r6
 8005976:	4639      	mov	r1, r7
 8005978:	f7fa fc8e 	bl	8000298 <__aeabi_dsub>
 800597c:	ec53 2b1a 	vmov	r2, r3, d10
 8005980:	f7fa fe42 	bl	8000608 <__aeabi_dmul>
 8005984:	ec53 2b18 	vmov	r2, r3, d8
 8005988:	ec41 0b19 	vmov	d9, r0, r1
 800598c:	ec51 0b18 	vmov	r0, r1, d8
 8005990:	f7fa fe3a 	bl	8000608 <__aeabi_dmul>
 8005994:	a37c      	add	r3, pc, #496	; (adr r3, 8005b88 <__ieee754_pow+0x708>)
 8005996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599a:	4604      	mov	r4, r0
 800599c:	460d      	mov	r5, r1
 800599e:	f7fa fe33 	bl	8000608 <__aeabi_dmul>
 80059a2:	a37b      	add	r3, pc, #492	; (adr r3, 8005b90 <__ieee754_pow+0x710>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fa fc78 	bl	800029c <__adddf3>
 80059ac:	4622      	mov	r2, r4
 80059ae:	462b      	mov	r3, r5
 80059b0:	f7fa fe2a 	bl	8000608 <__aeabi_dmul>
 80059b4:	a378      	add	r3, pc, #480	; (adr r3, 8005b98 <__ieee754_pow+0x718>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f7fa fc6f 	bl	800029c <__adddf3>
 80059be:	4622      	mov	r2, r4
 80059c0:	462b      	mov	r3, r5
 80059c2:	f7fa fe21 	bl	8000608 <__aeabi_dmul>
 80059c6:	a376      	add	r3, pc, #472	; (adr r3, 8005ba0 <__ieee754_pow+0x720>)
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f7fa fc66 	bl	800029c <__adddf3>
 80059d0:	4622      	mov	r2, r4
 80059d2:	462b      	mov	r3, r5
 80059d4:	f7fa fe18 	bl	8000608 <__aeabi_dmul>
 80059d8:	a373      	add	r3, pc, #460	; (adr r3, 8005ba8 <__ieee754_pow+0x728>)
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f7fa fc5d 	bl	800029c <__adddf3>
 80059e2:	4622      	mov	r2, r4
 80059e4:	462b      	mov	r3, r5
 80059e6:	f7fa fe0f 	bl	8000608 <__aeabi_dmul>
 80059ea:	a371      	add	r3, pc, #452	; (adr r3, 8005bb0 <__ieee754_pow+0x730>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f7fa fc54 	bl	800029c <__adddf3>
 80059f4:	4622      	mov	r2, r4
 80059f6:	4606      	mov	r6, r0
 80059f8:	460f      	mov	r7, r1
 80059fa:	462b      	mov	r3, r5
 80059fc:	4620      	mov	r0, r4
 80059fe:	4629      	mov	r1, r5
 8005a00:	f7fa fe02 	bl	8000608 <__aeabi_dmul>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fa fdfc 	bl	8000608 <__aeabi_dmul>
 8005a10:	4642      	mov	r2, r8
 8005a12:	4604      	mov	r4, r0
 8005a14:	460d      	mov	r5, r1
 8005a16:	464b      	mov	r3, r9
 8005a18:	ec51 0b18 	vmov	r0, r1, d8
 8005a1c:	f7fa fc3e 	bl	800029c <__adddf3>
 8005a20:	ec53 2b19 	vmov	r2, r3, d9
 8005a24:	f7fa fdf0 	bl	8000608 <__aeabi_dmul>
 8005a28:	4622      	mov	r2, r4
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	f7fa fc36 	bl	800029c <__adddf3>
 8005a30:	4642      	mov	r2, r8
 8005a32:	4682      	mov	sl, r0
 8005a34:	468b      	mov	fp, r1
 8005a36:	464b      	mov	r3, r9
 8005a38:	4640      	mov	r0, r8
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	f7fa fde4 	bl	8000608 <__aeabi_dmul>
 8005a40:	4b6b      	ldr	r3, [pc, #428]	; (8005bf0 <__ieee754_pow+0x770>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	f7fa fc28 	bl	800029c <__adddf3>
 8005a4c:	4652      	mov	r2, sl
 8005a4e:	465b      	mov	r3, fp
 8005a50:	f7fa fc24 	bl	800029c <__adddf3>
 8005a54:	2000      	movs	r0, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	460d      	mov	r5, r1
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4640      	mov	r0, r8
 8005a60:	4649      	mov	r1, r9
 8005a62:	f7fa fdd1 	bl	8000608 <__aeabi_dmul>
 8005a66:	4b62      	ldr	r3, [pc, #392]	; (8005bf0 <__ieee754_pow+0x770>)
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4629      	mov	r1, r5
 8005a72:	f7fa fc11 	bl	8000298 <__aeabi_dsub>
 8005a76:	4632      	mov	r2, r6
 8005a78:	463b      	mov	r3, r7
 8005a7a:	f7fa fc0d 	bl	8000298 <__aeabi_dsub>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4650      	mov	r0, sl
 8005a84:	4659      	mov	r1, fp
 8005a86:	f7fa fc07 	bl	8000298 <__aeabi_dsub>
 8005a8a:	ec53 2b18 	vmov	r2, r3, d8
 8005a8e:	f7fa fdbb 	bl	8000608 <__aeabi_dmul>
 8005a92:	4622      	mov	r2, r4
 8005a94:	4606      	mov	r6, r0
 8005a96:	460f      	mov	r7, r1
 8005a98:	462b      	mov	r3, r5
 8005a9a:	ec51 0b19 	vmov	r0, r1, d9
 8005a9e:	f7fa fdb3 	bl	8000608 <__aeabi_dmul>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	f7fa fbf7 	bl	800029c <__adddf3>
 8005aae:	4606      	mov	r6, r0
 8005ab0:	460f      	mov	r7, r1
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	4649      	mov	r1, r9
 8005aba:	f7fa fbef 	bl	800029c <__adddf3>
 8005abe:	a33e      	add	r3, pc, #248	; (adr r3, 8005bb8 <__ieee754_pow+0x738>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	460d      	mov	r5, r1
 8005aca:	f7fa fd9d 	bl	8000608 <__aeabi_dmul>
 8005ace:	4642      	mov	r2, r8
 8005ad0:	ec41 0b18 	vmov	d8, r0, r1
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f7fa fbdd 	bl	8000298 <__aeabi_dsub>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	f7fa fbd7 	bl	8000298 <__aeabi_dsub>
 8005aea:	a335      	add	r3, pc, #212	; (adr r3, 8005bc0 <__ieee754_pow+0x740>)
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f7fa fd8a 	bl	8000608 <__aeabi_dmul>
 8005af4:	a334      	add	r3, pc, #208	; (adr r3, 8005bc8 <__ieee754_pow+0x748>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	4606      	mov	r6, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	4620      	mov	r0, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	f7fa fd81 	bl	8000608 <__aeabi_dmul>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	f7fa fbc5 	bl	800029c <__adddf3>
 8005b12:	9a07      	ldr	r2, [sp, #28]
 8005b14:	4b37      	ldr	r3, [pc, #220]	; (8005bf4 <__ieee754_pow+0x774>)
 8005b16:	4413      	add	r3, r2
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f7fa fbbe 	bl	800029c <__adddf3>
 8005b20:	4682      	mov	sl, r0
 8005b22:	9805      	ldr	r0, [sp, #20]
 8005b24:	468b      	mov	fp, r1
 8005b26:	f7fa fd05 	bl	8000534 <__aeabi_i2d>
 8005b2a:	9a07      	ldr	r2, [sp, #28]
 8005b2c:	4b32      	ldr	r3, [pc, #200]	; (8005bf8 <__ieee754_pow+0x778>)
 8005b2e:	4413      	add	r3, r2
 8005b30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b34:	4606      	mov	r6, r0
 8005b36:	460f      	mov	r7, r1
 8005b38:	4652      	mov	r2, sl
 8005b3a:	465b      	mov	r3, fp
 8005b3c:	ec51 0b18 	vmov	r0, r1, d8
 8005b40:	f7fa fbac 	bl	800029c <__adddf3>
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	f7fa fba8 	bl	800029c <__adddf3>
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	463b      	mov	r3, r7
 8005b50:	f7fa fba4 	bl	800029c <__adddf3>
 8005b54:	2000      	movs	r0, #0
 8005b56:	4632      	mov	r2, r6
 8005b58:	463b      	mov	r3, r7
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	460d      	mov	r5, r1
 8005b5e:	f7fa fb9b 	bl	8000298 <__aeabi_dsub>
 8005b62:	4642      	mov	r2, r8
 8005b64:	464b      	mov	r3, r9
 8005b66:	f7fa fb97 	bl	8000298 <__aeabi_dsub>
 8005b6a:	ec53 2b18 	vmov	r2, r3, d8
 8005b6e:	f7fa fb93 	bl	8000298 <__aeabi_dsub>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4650      	mov	r0, sl
 8005b78:	4659      	mov	r1, fp
 8005b7a:	e610      	b.n	800579e <__ieee754_pow+0x31e>
 8005b7c:	2401      	movs	r4, #1
 8005b7e:	e6a1      	b.n	80058c4 <__ieee754_pow+0x444>
 8005b80:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005bd0 <__ieee754_pow+0x750>
 8005b84:	e617      	b.n	80057b6 <__ieee754_pow+0x336>
 8005b86:	bf00      	nop
 8005b88:	4a454eef 	.word	0x4a454eef
 8005b8c:	3fca7e28 	.word	0x3fca7e28
 8005b90:	93c9db65 	.word	0x93c9db65
 8005b94:	3fcd864a 	.word	0x3fcd864a
 8005b98:	a91d4101 	.word	0xa91d4101
 8005b9c:	3fd17460 	.word	0x3fd17460
 8005ba0:	518f264d 	.word	0x518f264d
 8005ba4:	3fd55555 	.word	0x3fd55555
 8005ba8:	db6fabff 	.word	0xdb6fabff
 8005bac:	3fdb6db6 	.word	0x3fdb6db6
 8005bb0:	33333303 	.word	0x33333303
 8005bb4:	3fe33333 	.word	0x3fe33333
 8005bb8:	e0000000 	.word	0xe0000000
 8005bbc:	3feec709 	.word	0x3feec709
 8005bc0:	dc3a03fd 	.word	0xdc3a03fd
 8005bc4:	3feec709 	.word	0x3feec709
 8005bc8:	145b01f5 	.word	0x145b01f5
 8005bcc:	be3e2fe0 	.word	0xbe3e2fe0
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	3ff00000 	.word	0x3ff00000
 8005bd8:	7ff00000 	.word	0x7ff00000
 8005bdc:	43400000 	.word	0x43400000
 8005be0:	0003988e 	.word	0x0003988e
 8005be4:	000bb679 	.word	0x000bb679
 8005be8:	08007558 	.word	0x08007558
 8005bec:	3ff00000 	.word	0x3ff00000
 8005bf0:	40080000 	.word	0x40080000
 8005bf4:	08007578 	.word	0x08007578
 8005bf8:	08007568 	.word	0x08007568
 8005bfc:	a3b3      	add	r3, pc, #716	; (adr r3, 8005ecc <__ieee754_pow+0xa4c>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f7fa fb49 	bl	800029c <__adddf3>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	ec41 0b1a 	vmov	d10, r0, r1
 8005c10:	462b      	mov	r3, r5
 8005c12:	4630      	mov	r0, r6
 8005c14:	4639      	mov	r1, r7
 8005c16:	f7fa fb3f 	bl	8000298 <__aeabi_dsub>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	ec51 0b1a 	vmov	r0, r1, d10
 8005c22:	f7fa ff81 	bl	8000b28 <__aeabi_dcmpgt>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f47f ae04 	bne.w	8005834 <__ieee754_pow+0x3b4>
 8005c2c:	4aa2      	ldr	r2, [pc, #648]	; (8005eb8 <__ieee754_pow+0xa38>)
 8005c2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f340 8107 	ble.w	8005e46 <__ieee754_pow+0x9c6>
 8005c38:	151b      	asrs	r3, r3, #20
 8005c3a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005c3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005c42:	fa4a fa03 	asr.w	sl, sl, r3
 8005c46:	44da      	add	sl, fp
 8005c48:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005c4c:	489b      	ldr	r0, [pc, #620]	; (8005ebc <__ieee754_pow+0xa3c>)
 8005c4e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005c52:	4108      	asrs	r0, r1
 8005c54:	ea00 030a 	and.w	r3, r0, sl
 8005c58:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005c5c:	f1c1 0114 	rsb	r1, r1, #20
 8005c60:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005c64:	fa4a fa01 	asr.w	sl, sl, r1
 8005c68:	f1bb 0f00 	cmp.w	fp, #0
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	4620      	mov	r0, r4
 8005c72:	4629      	mov	r1, r5
 8005c74:	bfb8      	it	lt
 8005c76:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c7a:	f7fa fb0d 	bl	8000298 <__aeabi_dsub>
 8005c7e:	ec41 0b19 	vmov	d9, r0, r1
 8005c82:	4642      	mov	r2, r8
 8005c84:	464b      	mov	r3, r9
 8005c86:	ec51 0b19 	vmov	r0, r1, d9
 8005c8a:	f7fa fb07 	bl	800029c <__adddf3>
 8005c8e:	a37a      	add	r3, pc, #488	; (adr r3, 8005e78 <__ieee754_pow+0x9f8>)
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	2000      	movs	r0, #0
 8005c96:	4604      	mov	r4, r0
 8005c98:	460d      	mov	r5, r1
 8005c9a:	f7fa fcb5 	bl	8000608 <__aeabi_dmul>
 8005c9e:	ec53 2b19 	vmov	r2, r3, d9
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	460f      	mov	r7, r1
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa faf5 	bl	8000298 <__aeabi_dsub>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	f7fa faef 	bl	8000298 <__aeabi_dsub>
 8005cba:	a371      	add	r3, pc, #452	; (adr r3, 8005e80 <__ieee754_pow+0xa00>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fca2 	bl	8000608 <__aeabi_dmul>
 8005cc4:	a370      	add	r3, pc, #448	; (adr r3, 8005e88 <__ieee754_pow+0xa08>)
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	4680      	mov	r8, r0
 8005ccc:	4689      	mov	r9, r1
 8005cce:	4620      	mov	r0, r4
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f7fa fc99 	bl	8000608 <__aeabi_dmul>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4640      	mov	r0, r8
 8005cdc:	4649      	mov	r1, r9
 8005cde:	f7fa fadd 	bl	800029c <__adddf3>
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	460d      	mov	r5, r1
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4630      	mov	r0, r6
 8005cec:	4639      	mov	r1, r7
 8005cee:	f7fa fad5 	bl	800029c <__adddf3>
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	4680      	mov	r8, r0
 8005cf8:	4689      	mov	r9, r1
 8005cfa:	f7fa facd 	bl	8000298 <__aeabi_dsub>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4620      	mov	r0, r4
 8005d04:	4629      	mov	r1, r5
 8005d06:	f7fa fac7 	bl	8000298 <__aeabi_dsub>
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	460f      	mov	r7, r1
 8005d10:	464b      	mov	r3, r9
 8005d12:	4640      	mov	r0, r8
 8005d14:	4649      	mov	r1, r9
 8005d16:	f7fa fc77 	bl	8000608 <__aeabi_dmul>
 8005d1a:	a35d      	add	r3, pc, #372	; (adr r3, 8005e90 <__ieee754_pow+0xa10>)
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	4604      	mov	r4, r0
 8005d22:	460d      	mov	r5, r1
 8005d24:	f7fa fc70 	bl	8000608 <__aeabi_dmul>
 8005d28:	a35b      	add	r3, pc, #364	; (adr r3, 8005e98 <__ieee754_pow+0xa18>)
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f7fa fab3 	bl	8000298 <__aeabi_dsub>
 8005d32:	4622      	mov	r2, r4
 8005d34:	462b      	mov	r3, r5
 8005d36:	f7fa fc67 	bl	8000608 <__aeabi_dmul>
 8005d3a:	a359      	add	r3, pc, #356	; (adr r3, 8005ea0 <__ieee754_pow+0xa20>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa faac 	bl	800029c <__adddf3>
 8005d44:	4622      	mov	r2, r4
 8005d46:	462b      	mov	r3, r5
 8005d48:	f7fa fc5e 	bl	8000608 <__aeabi_dmul>
 8005d4c:	a356      	add	r3, pc, #344	; (adr r3, 8005ea8 <__ieee754_pow+0xa28>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f7fa faa1 	bl	8000298 <__aeabi_dsub>
 8005d56:	4622      	mov	r2, r4
 8005d58:	462b      	mov	r3, r5
 8005d5a:	f7fa fc55 	bl	8000608 <__aeabi_dmul>
 8005d5e:	a354      	add	r3, pc, #336	; (adr r3, 8005eb0 <__ieee754_pow+0xa30>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f7fa fa9a 	bl	800029c <__adddf3>
 8005d68:	4622      	mov	r2, r4
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	f7fa fc4c 	bl	8000608 <__aeabi_dmul>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4640      	mov	r0, r8
 8005d76:	4649      	mov	r1, r9
 8005d78:	f7fa fa8e 	bl	8000298 <__aeabi_dsub>
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	460d      	mov	r5, r1
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa fc3e 	bl	8000608 <__aeabi_dmul>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	ec41 0b19 	vmov	d9, r0, r1
 8005d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7fa fa7d 	bl	8000298 <__aeabi_dsub>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	ec51 0b19 	vmov	r0, r1, d9
 8005da6:	f7fa fd59 	bl	800085c <__aeabi_ddiv>
 8005daa:	4632      	mov	r2, r6
 8005dac:	4604      	mov	r4, r0
 8005dae:	460d      	mov	r5, r1
 8005db0:	463b      	mov	r3, r7
 8005db2:	4640      	mov	r0, r8
 8005db4:	4649      	mov	r1, r9
 8005db6:	f7fa fc27 	bl	8000608 <__aeabi_dmul>
 8005dba:	4632      	mov	r2, r6
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	f7fa fa6d 	bl	800029c <__adddf3>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	4629      	mov	r1, r5
 8005dca:	f7fa fa65 	bl	8000298 <__aeabi_dsub>
 8005dce:	4642      	mov	r2, r8
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	f7fa fa61 	bl	8000298 <__aeabi_dsub>
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4939      	ldr	r1, [pc, #228]	; (8005ec0 <__ieee754_pow+0xa40>)
 8005ddc:	2000      	movs	r0, #0
 8005dde:	f7fa fa5b 	bl	8000298 <__aeabi_dsub>
 8005de2:	ec41 0b10 	vmov	d0, r0, r1
 8005de6:	ee10 3a90 	vmov	r3, s1
 8005dea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df2:	da2b      	bge.n	8005e4c <__ieee754_pow+0x9cc>
 8005df4:	4650      	mov	r0, sl
 8005df6:	f000 f8a7 	bl	8005f48 <scalbn>
 8005dfa:	ec51 0b10 	vmov	r0, r1, d0
 8005dfe:	ec53 2b18 	vmov	r2, r3, d8
 8005e02:	f7ff bbee 	b.w	80055e2 <__ieee754_pow+0x162>
 8005e06:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <__ieee754_pow+0xa44>)
 8005e08:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005e0c:	429e      	cmp	r6, r3
 8005e0e:	f77f af0d 	ble.w	8005c2c <__ieee754_pow+0x7ac>
 8005e12:	4b2d      	ldr	r3, [pc, #180]	; (8005ec8 <__ieee754_pow+0xa48>)
 8005e14:	440b      	add	r3, r1
 8005e16:	4303      	orrs	r3, r0
 8005e18:	d009      	beq.n	8005e2e <__ieee754_pow+0x9ae>
 8005e1a:	ec51 0b18 	vmov	r0, r1, d8
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2300      	movs	r3, #0
 8005e22:	f7fa fe63 	bl	8000aec <__aeabi_dcmplt>
 8005e26:	3800      	subs	r0, #0
 8005e28:	bf18      	it	ne
 8005e2a:	2001      	movne	r0, #1
 8005e2c:	e448      	b.n	80056c0 <__ieee754_pow+0x240>
 8005e2e:	4622      	mov	r2, r4
 8005e30:	462b      	mov	r3, r5
 8005e32:	f7fa fa31 	bl	8000298 <__aeabi_dsub>
 8005e36:	4642      	mov	r2, r8
 8005e38:	464b      	mov	r3, r9
 8005e3a:	f7fa fe6b 	bl	8000b14 <__aeabi_dcmpge>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f43f aef4 	beq.w	8005c2c <__ieee754_pow+0x7ac>
 8005e44:	e7e9      	b.n	8005e1a <__ieee754_pow+0x99a>
 8005e46:	f04f 0a00 	mov.w	sl, #0
 8005e4a:	e71a      	b.n	8005c82 <__ieee754_pow+0x802>
 8005e4c:	ec51 0b10 	vmov	r0, r1, d0
 8005e50:	4619      	mov	r1, r3
 8005e52:	e7d4      	b.n	8005dfe <__ieee754_pow+0x97e>
 8005e54:	491a      	ldr	r1, [pc, #104]	; (8005ec0 <__ieee754_pow+0xa40>)
 8005e56:	2000      	movs	r0, #0
 8005e58:	f7ff bb31 	b.w	80054be <__ieee754_pow+0x3e>
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	2100      	movs	r1, #0
 8005e60:	f7ff bb2d 	b.w	80054be <__ieee754_pow+0x3e>
 8005e64:	4630      	mov	r0, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	f7ff bb29 	b.w	80054be <__ieee754_pow+0x3e>
 8005e6c:	9204      	str	r2, [sp, #16]
 8005e6e:	f7ff bb7b 	b.w	8005568 <__ieee754_pow+0xe8>
 8005e72:	2300      	movs	r3, #0
 8005e74:	f7ff bb65 	b.w	8005542 <__ieee754_pow+0xc2>
 8005e78:	00000000 	.word	0x00000000
 8005e7c:	3fe62e43 	.word	0x3fe62e43
 8005e80:	fefa39ef 	.word	0xfefa39ef
 8005e84:	3fe62e42 	.word	0x3fe62e42
 8005e88:	0ca86c39 	.word	0x0ca86c39
 8005e8c:	be205c61 	.word	0xbe205c61
 8005e90:	72bea4d0 	.word	0x72bea4d0
 8005e94:	3e663769 	.word	0x3e663769
 8005e98:	c5d26bf1 	.word	0xc5d26bf1
 8005e9c:	3ebbbd41 	.word	0x3ebbbd41
 8005ea0:	af25de2c 	.word	0xaf25de2c
 8005ea4:	3f11566a 	.word	0x3f11566a
 8005ea8:	16bebd93 	.word	0x16bebd93
 8005eac:	3f66c16c 	.word	0x3f66c16c
 8005eb0:	5555553e 	.word	0x5555553e
 8005eb4:	3fc55555 	.word	0x3fc55555
 8005eb8:	3fe00000 	.word	0x3fe00000
 8005ebc:	fff00000 	.word	0xfff00000
 8005ec0:	3ff00000 	.word	0x3ff00000
 8005ec4:	4090cbff 	.word	0x4090cbff
 8005ec8:	3f6f3400 	.word	0x3f6f3400
 8005ecc:	652b82fe 	.word	0x652b82fe
 8005ed0:	3c971547 	.word	0x3c971547

08005ed4 <with_errno>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	460d      	mov	r5, r1
 8005eda:	4616      	mov	r6, r2
 8005edc:	f000 fa12 	bl	8006304 <__errno>
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	6006      	str	r6, [r0, #0]
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}

08005ee8 <xflow>:
 8005ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eea:	4614      	mov	r4, r2
 8005eec:	461d      	mov	r5, r3
 8005eee:	b108      	cbz	r0, 8005ef4 <xflow+0xc>
 8005ef0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ef4:	e9cd 2300 	strd	r2, r3, [sp]
 8005ef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005efc:	4620      	mov	r0, r4
 8005efe:	4629      	mov	r1, r5
 8005f00:	f7fa fb82 	bl	8000608 <__aeabi_dmul>
 8005f04:	2222      	movs	r2, #34	; 0x22
 8005f06:	b003      	add	sp, #12
 8005f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f0c:	f7ff bfe2 	b.w	8005ed4 <with_errno>

08005f10 <__math_uflow>:
 8005f10:	b508      	push	{r3, lr}
 8005f12:	2200      	movs	r2, #0
 8005f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f18:	f7ff ffe6 	bl	8005ee8 <xflow>
 8005f1c:	ec41 0b10 	vmov	d0, r0, r1
 8005f20:	bd08      	pop	{r3, pc}

08005f22 <__math_oflow>:
 8005f22:	b508      	push	{r3, lr}
 8005f24:	2200      	movs	r2, #0
 8005f26:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005f2a:	f7ff ffdd 	bl	8005ee8 <xflow>
 8005f2e:	ec41 0b10 	vmov	d0, r0, r1
 8005f32:	bd08      	pop	{r3, pc}

08005f34 <fabs>:
 8005f34:	ec51 0b10 	vmov	r0, r1, d0
 8005f38:	ee10 2a10 	vmov	r2, s0
 8005f3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f40:	ec43 2b10 	vmov	d0, r2, r3
 8005f44:	4770      	bx	lr
	...

08005f48 <scalbn>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	ec55 4b10 	vmov	r4, r5, d0
 8005f4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005f52:	4606      	mov	r6, r0
 8005f54:	462b      	mov	r3, r5
 8005f56:	b999      	cbnz	r1, 8005f80 <scalbn+0x38>
 8005f58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f5c:	4323      	orrs	r3, r4
 8005f5e:	d03f      	beq.n	8005fe0 <scalbn+0x98>
 8005f60:	4b35      	ldr	r3, [pc, #212]	; (8006038 <scalbn+0xf0>)
 8005f62:	4629      	mov	r1, r5
 8005f64:	ee10 0a10 	vmov	r0, s0
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f7fa fb4d 	bl	8000608 <__aeabi_dmul>
 8005f6e:	4b33      	ldr	r3, [pc, #204]	; (800603c <scalbn+0xf4>)
 8005f70:	429e      	cmp	r6, r3
 8005f72:	4604      	mov	r4, r0
 8005f74:	460d      	mov	r5, r1
 8005f76:	da10      	bge.n	8005f9a <scalbn+0x52>
 8005f78:	a327      	add	r3, pc, #156	; (adr r3, 8006018 <scalbn+0xd0>)
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	e01f      	b.n	8005fc0 <scalbn+0x78>
 8005f80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005f84:	4291      	cmp	r1, r2
 8005f86:	d10c      	bne.n	8005fa2 <scalbn+0x5a>
 8005f88:	ee10 2a10 	vmov	r2, s0
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa f984 	bl	800029c <__adddf3>
 8005f94:	4604      	mov	r4, r0
 8005f96:	460d      	mov	r5, r1
 8005f98:	e022      	b.n	8005fe0 <scalbn+0x98>
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005fa0:	3936      	subs	r1, #54	; 0x36
 8005fa2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005fa6:	4296      	cmp	r6, r2
 8005fa8:	dd0d      	ble.n	8005fc6 <scalbn+0x7e>
 8005faa:	2d00      	cmp	r5, #0
 8005fac:	a11c      	add	r1, pc, #112	; (adr r1, 8006020 <scalbn+0xd8>)
 8005fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fb2:	da02      	bge.n	8005fba <scalbn+0x72>
 8005fb4:	a11c      	add	r1, pc, #112	; (adr r1, 8006028 <scalbn+0xe0>)
 8005fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fba:	a319      	add	r3, pc, #100	; (adr r3, 8006020 <scalbn+0xd8>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa fb22 	bl	8000608 <__aeabi_dmul>
 8005fc4:	e7e6      	b.n	8005f94 <scalbn+0x4c>
 8005fc6:	1872      	adds	r2, r6, r1
 8005fc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005fcc:	428a      	cmp	r2, r1
 8005fce:	dcec      	bgt.n	8005faa <scalbn+0x62>
 8005fd0:	2a00      	cmp	r2, #0
 8005fd2:	dd08      	ble.n	8005fe6 <scalbn+0x9e>
 8005fd4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fe0:	ec45 4b10 	vmov	d0, r4, r5
 8005fe4:	bd70      	pop	{r4, r5, r6, pc}
 8005fe6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005fea:	da08      	bge.n	8005ffe <scalbn+0xb6>
 8005fec:	2d00      	cmp	r5, #0
 8005fee:	a10a      	add	r1, pc, #40	; (adr r1, 8006018 <scalbn+0xd0>)
 8005ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ff4:	dac0      	bge.n	8005f78 <scalbn+0x30>
 8005ff6:	a10e      	add	r1, pc, #56	; (adr r1, 8006030 <scalbn+0xe8>)
 8005ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ffc:	e7bc      	b.n	8005f78 <scalbn+0x30>
 8005ffe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006002:	3236      	adds	r2, #54	; 0x36
 8006004:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006008:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800600c:	4620      	mov	r0, r4
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <scalbn+0xf8>)
 8006010:	2200      	movs	r2, #0
 8006012:	e7d5      	b.n	8005fc0 <scalbn+0x78>
 8006014:	f3af 8000 	nop.w
 8006018:	c2f8f359 	.word	0xc2f8f359
 800601c:	01a56e1f 	.word	0x01a56e1f
 8006020:	8800759c 	.word	0x8800759c
 8006024:	7e37e43c 	.word	0x7e37e43c
 8006028:	8800759c 	.word	0x8800759c
 800602c:	fe37e43c 	.word	0xfe37e43c
 8006030:	c2f8f359 	.word	0xc2f8f359
 8006034:	81a56e1f 	.word	0x81a56e1f
 8006038:	43500000 	.word	0x43500000
 800603c:	ffff3cb0 	.word	0xffff3cb0
 8006040:	3c900000 	.word	0x3c900000

08006044 <siprintf>:
 8006044:	b40e      	push	{r1, r2, r3}
 8006046:	b500      	push	{lr}
 8006048:	b09c      	sub	sp, #112	; 0x70
 800604a:	ab1d      	add	r3, sp, #116	; 0x74
 800604c:	9002      	str	r0, [sp, #8]
 800604e:	9006      	str	r0, [sp, #24]
 8006050:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006054:	4809      	ldr	r0, [pc, #36]	; (800607c <siprintf+0x38>)
 8006056:	9107      	str	r1, [sp, #28]
 8006058:	9104      	str	r1, [sp, #16]
 800605a:	4909      	ldr	r1, [pc, #36]	; (8006080 <siprintf+0x3c>)
 800605c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006060:	9105      	str	r1, [sp, #20]
 8006062:	6800      	ldr	r0, [r0, #0]
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	a902      	add	r1, sp, #8
 8006068:	f000 f9d4 	bl	8006414 <_svfiprintf_r>
 800606c:	9b02      	ldr	r3, [sp, #8]
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	b01c      	add	sp, #112	; 0x70
 8006074:	f85d eb04 	ldr.w	lr, [sp], #4
 8006078:	b003      	add	sp, #12
 800607a:	4770      	bx	lr
 800607c:	20000078 	.word	0x20000078
 8006080:	ffff0208 	.word	0xffff0208

08006084 <std>:
 8006084:	2300      	movs	r3, #0
 8006086:	b510      	push	{r4, lr}
 8006088:	4604      	mov	r4, r0
 800608a:	e9c0 3300 	strd	r3, r3, [r0]
 800608e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006092:	6083      	str	r3, [r0, #8]
 8006094:	8181      	strh	r1, [r0, #12]
 8006096:	6643      	str	r3, [r0, #100]	; 0x64
 8006098:	81c2      	strh	r2, [r0, #14]
 800609a:	6183      	str	r3, [r0, #24]
 800609c:	4619      	mov	r1, r3
 800609e:	2208      	movs	r2, #8
 80060a0:	305c      	adds	r0, #92	; 0x5c
 80060a2:	f000 f927 	bl	80062f4 <memset>
 80060a6:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <std+0x58>)
 80060a8:	6263      	str	r3, [r4, #36]	; 0x24
 80060aa:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <std+0x5c>)
 80060ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80060ae:	4b0d      	ldr	r3, [pc, #52]	; (80060e4 <std+0x60>)
 80060b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060b2:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <std+0x64>)
 80060b4:	6323      	str	r3, [r4, #48]	; 0x30
 80060b6:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <std+0x68>)
 80060b8:	6224      	str	r4, [r4, #32]
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d006      	beq.n	80060cc <std+0x48>
 80060be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80060c2:	4294      	cmp	r4, r2
 80060c4:	d002      	beq.n	80060cc <std+0x48>
 80060c6:	33d0      	adds	r3, #208	; 0xd0
 80060c8:	429c      	cmp	r4, r3
 80060ca:	d105      	bne.n	80060d8 <std+0x54>
 80060cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d4:	f000 b940 	b.w	8006358 <__retarget_lock_init_recursive>
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	bf00      	nop
 80060dc:	08006e6d 	.word	0x08006e6d
 80060e0:	08006e8f 	.word	0x08006e8f
 80060e4:	08006ec7 	.word	0x08006ec7
 80060e8:	08006eeb 	.word	0x08006eeb
 80060ec:	200001d4 	.word	0x200001d4

080060f0 <stdio_exit_handler>:
 80060f0:	4a02      	ldr	r2, [pc, #8]	; (80060fc <stdio_exit_handler+0xc>)
 80060f2:	4903      	ldr	r1, [pc, #12]	; (8006100 <stdio_exit_handler+0x10>)
 80060f4:	4803      	ldr	r0, [pc, #12]	; (8006104 <stdio_exit_handler+0x14>)
 80060f6:	f000 b869 	b.w	80061cc <_fwalk_sglue>
 80060fa:	bf00      	nop
 80060fc:	20000020 	.word	0x20000020
 8006100:	08006e05 	.word	0x08006e05
 8006104:	2000002c 	.word	0x2000002c

08006108 <cleanup_stdio>:
 8006108:	6841      	ldr	r1, [r0, #4]
 800610a:	4b0c      	ldr	r3, [pc, #48]	; (800613c <cleanup_stdio+0x34>)
 800610c:	4299      	cmp	r1, r3
 800610e:	b510      	push	{r4, lr}
 8006110:	4604      	mov	r4, r0
 8006112:	d001      	beq.n	8006118 <cleanup_stdio+0x10>
 8006114:	f000 fe76 	bl	8006e04 <_fflush_r>
 8006118:	68a1      	ldr	r1, [r4, #8]
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <cleanup_stdio+0x38>)
 800611c:	4299      	cmp	r1, r3
 800611e:	d002      	beq.n	8006126 <cleanup_stdio+0x1e>
 8006120:	4620      	mov	r0, r4
 8006122:	f000 fe6f 	bl	8006e04 <_fflush_r>
 8006126:	68e1      	ldr	r1, [r4, #12]
 8006128:	4b06      	ldr	r3, [pc, #24]	; (8006144 <cleanup_stdio+0x3c>)
 800612a:	4299      	cmp	r1, r3
 800612c:	d004      	beq.n	8006138 <cleanup_stdio+0x30>
 800612e:	4620      	mov	r0, r4
 8006130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006134:	f000 be66 	b.w	8006e04 <_fflush_r>
 8006138:	bd10      	pop	{r4, pc}
 800613a:	bf00      	nop
 800613c:	200001d4 	.word	0x200001d4
 8006140:	2000023c 	.word	0x2000023c
 8006144:	200002a4 	.word	0x200002a4

08006148 <global_stdio_init.part.0>:
 8006148:	b510      	push	{r4, lr}
 800614a:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <global_stdio_init.part.0+0x30>)
 800614c:	4c0b      	ldr	r4, [pc, #44]	; (800617c <global_stdio_init.part.0+0x34>)
 800614e:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <global_stdio_init.part.0+0x38>)
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	4620      	mov	r0, r4
 8006154:	2200      	movs	r2, #0
 8006156:	2104      	movs	r1, #4
 8006158:	f7ff ff94 	bl	8006084 <std>
 800615c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006160:	2201      	movs	r2, #1
 8006162:	2109      	movs	r1, #9
 8006164:	f7ff ff8e 	bl	8006084 <std>
 8006168:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800616c:	2202      	movs	r2, #2
 800616e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006172:	2112      	movs	r1, #18
 8006174:	f7ff bf86 	b.w	8006084 <std>
 8006178:	2000030c 	.word	0x2000030c
 800617c:	200001d4 	.word	0x200001d4
 8006180:	080060f1 	.word	0x080060f1

08006184 <__sfp_lock_acquire>:
 8006184:	4801      	ldr	r0, [pc, #4]	; (800618c <__sfp_lock_acquire+0x8>)
 8006186:	f000 b8e8 	b.w	800635a <__retarget_lock_acquire_recursive>
 800618a:	bf00      	nop
 800618c:	20000311 	.word	0x20000311

08006190 <__sfp_lock_release>:
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <__sfp_lock_release+0x8>)
 8006192:	f000 b8e3 	b.w	800635c <__retarget_lock_release_recursive>
 8006196:	bf00      	nop
 8006198:	20000311 	.word	0x20000311

0800619c <__sinit>:
 800619c:	b510      	push	{r4, lr}
 800619e:	4604      	mov	r4, r0
 80061a0:	f7ff fff0 	bl	8006184 <__sfp_lock_acquire>
 80061a4:	6a23      	ldr	r3, [r4, #32]
 80061a6:	b11b      	cbz	r3, 80061b0 <__sinit+0x14>
 80061a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ac:	f7ff bff0 	b.w	8006190 <__sfp_lock_release>
 80061b0:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <__sinit+0x28>)
 80061b2:	6223      	str	r3, [r4, #32]
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <__sinit+0x2c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f5      	bne.n	80061a8 <__sinit+0xc>
 80061bc:	f7ff ffc4 	bl	8006148 <global_stdio_init.part.0>
 80061c0:	e7f2      	b.n	80061a8 <__sinit+0xc>
 80061c2:	bf00      	nop
 80061c4:	08006109 	.word	0x08006109
 80061c8:	2000030c 	.word	0x2000030c

080061cc <_fwalk_sglue>:
 80061cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d0:	4607      	mov	r7, r0
 80061d2:	4688      	mov	r8, r1
 80061d4:	4614      	mov	r4, r2
 80061d6:	2600      	movs	r6, #0
 80061d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061dc:	f1b9 0901 	subs.w	r9, r9, #1
 80061e0:	d505      	bpl.n	80061ee <_fwalk_sglue+0x22>
 80061e2:	6824      	ldr	r4, [r4, #0]
 80061e4:	2c00      	cmp	r4, #0
 80061e6:	d1f7      	bne.n	80061d8 <_fwalk_sglue+0xc>
 80061e8:	4630      	mov	r0, r6
 80061ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ee:	89ab      	ldrh	r3, [r5, #12]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d907      	bls.n	8006204 <_fwalk_sglue+0x38>
 80061f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061f8:	3301      	adds	r3, #1
 80061fa:	d003      	beq.n	8006204 <_fwalk_sglue+0x38>
 80061fc:	4629      	mov	r1, r5
 80061fe:	4638      	mov	r0, r7
 8006200:	47c0      	blx	r8
 8006202:	4306      	orrs	r6, r0
 8006204:	3568      	adds	r5, #104	; 0x68
 8006206:	e7e9      	b.n	80061dc <_fwalk_sglue+0x10>

08006208 <iprintf>:
 8006208:	b40f      	push	{r0, r1, r2, r3}
 800620a:	b507      	push	{r0, r1, r2, lr}
 800620c:	4906      	ldr	r1, [pc, #24]	; (8006228 <iprintf+0x20>)
 800620e:	ab04      	add	r3, sp, #16
 8006210:	6808      	ldr	r0, [r1, #0]
 8006212:	f853 2b04 	ldr.w	r2, [r3], #4
 8006216:	6881      	ldr	r1, [r0, #8]
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	f000 fa23 	bl	8006664 <_vfiprintf_r>
 800621e:	b003      	add	sp, #12
 8006220:	f85d eb04 	ldr.w	lr, [sp], #4
 8006224:	b004      	add	sp, #16
 8006226:	4770      	bx	lr
 8006228:	20000078 	.word	0x20000078

0800622c <putchar>:
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <putchar+0xc>)
 800622e:	4601      	mov	r1, r0
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	6882      	ldr	r2, [r0, #8]
 8006234:	f000 bf84 	b.w	8007140 <_putc_r>
 8006238:	20000078 	.word	0x20000078

0800623c <_puts_r>:
 800623c:	6a03      	ldr	r3, [r0, #32]
 800623e:	b570      	push	{r4, r5, r6, lr}
 8006240:	6884      	ldr	r4, [r0, #8]
 8006242:	4605      	mov	r5, r0
 8006244:	460e      	mov	r6, r1
 8006246:	b90b      	cbnz	r3, 800624c <_puts_r+0x10>
 8006248:	f7ff ffa8 	bl	800619c <__sinit>
 800624c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800624e:	07db      	lsls	r3, r3, #31
 8006250:	d405      	bmi.n	800625e <_puts_r+0x22>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	0598      	lsls	r0, r3, #22
 8006256:	d402      	bmi.n	800625e <_puts_r+0x22>
 8006258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800625a:	f000 f87e 	bl	800635a <__retarget_lock_acquire_recursive>
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	0719      	lsls	r1, r3, #28
 8006262:	d513      	bpl.n	800628c <_puts_r+0x50>
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	b18b      	cbz	r3, 800628c <_puts_r+0x50>
 8006268:	3e01      	subs	r6, #1
 800626a:	68a3      	ldr	r3, [r4, #8]
 800626c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006270:	3b01      	subs	r3, #1
 8006272:	60a3      	str	r3, [r4, #8]
 8006274:	b9e9      	cbnz	r1, 80062b2 <_puts_r+0x76>
 8006276:	2b00      	cmp	r3, #0
 8006278:	da2e      	bge.n	80062d8 <_puts_r+0x9c>
 800627a:	4622      	mov	r2, r4
 800627c:	210a      	movs	r1, #10
 800627e:	4628      	mov	r0, r5
 8006280:	f000 fe66 	bl	8006f50 <__swbuf_r>
 8006284:	3001      	adds	r0, #1
 8006286:	d007      	beq.n	8006298 <_puts_r+0x5c>
 8006288:	250a      	movs	r5, #10
 800628a:	e007      	b.n	800629c <_puts_r+0x60>
 800628c:	4621      	mov	r1, r4
 800628e:	4628      	mov	r0, r5
 8006290:	f000 fe9c 	bl	8006fcc <__swsetup_r>
 8006294:	2800      	cmp	r0, #0
 8006296:	d0e7      	beq.n	8006268 <_puts_r+0x2c>
 8006298:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800629c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800629e:	07da      	lsls	r2, r3, #31
 80062a0:	d405      	bmi.n	80062ae <_puts_r+0x72>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	059b      	lsls	r3, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_puts_r+0x72>
 80062a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062aa:	f000 f857 	bl	800635c <__retarget_lock_release_recursive>
 80062ae:	4628      	mov	r0, r5
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da04      	bge.n	80062c0 <_puts_r+0x84>
 80062b6:	69a2      	ldr	r2, [r4, #24]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	dc06      	bgt.n	80062ca <_puts_r+0x8e>
 80062bc:	290a      	cmp	r1, #10
 80062be:	d004      	beq.n	80062ca <_puts_r+0x8e>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	6022      	str	r2, [r4, #0]
 80062c6:	7019      	strb	r1, [r3, #0]
 80062c8:	e7cf      	b.n	800626a <_puts_r+0x2e>
 80062ca:	4622      	mov	r2, r4
 80062cc:	4628      	mov	r0, r5
 80062ce:	f000 fe3f 	bl	8006f50 <__swbuf_r>
 80062d2:	3001      	adds	r0, #1
 80062d4:	d1c9      	bne.n	800626a <_puts_r+0x2e>
 80062d6:	e7df      	b.n	8006298 <_puts_r+0x5c>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	250a      	movs	r5, #10
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	6022      	str	r2, [r4, #0]
 80062e0:	701d      	strb	r5, [r3, #0]
 80062e2:	e7db      	b.n	800629c <_puts_r+0x60>

080062e4 <puts>:
 80062e4:	4b02      	ldr	r3, [pc, #8]	; (80062f0 <puts+0xc>)
 80062e6:	4601      	mov	r1, r0
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	f7ff bfa7 	b.w	800623c <_puts_r>
 80062ee:	bf00      	nop
 80062f0:	20000078 	.word	0x20000078

080062f4 <memset>:
 80062f4:	4402      	add	r2, r0
 80062f6:	4603      	mov	r3, r0
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d100      	bne.n	80062fe <memset+0xa>
 80062fc:	4770      	bx	lr
 80062fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006302:	e7f9      	b.n	80062f8 <memset+0x4>

08006304 <__errno>:
 8006304:	4b01      	ldr	r3, [pc, #4]	; (800630c <__errno+0x8>)
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	20000078 	.word	0x20000078

08006310 <__libc_init_array>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	4d0d      	ldr	r5, [pc, #52]	; (8006348 <__libc_init_array+0x38>)
 8006314:	4c0d      	ldr	r4, [pc, #52]	; (800634c <__libc_init_array+0x3c>)
 8006316:	1b64      	subs	r4, r4, r5
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	2600      	movs	r6, #0
 800631c:	42a6      	cmp	r6, r4
 800631e:	d109      	bne.n	8006334 <__libc_init_array+0x24>
 8006320:	4d0b      	ldr	r5, [pc, #44]	; (8006350 <__libc_init_array+0x40>)
 8006322:	4c0c      	ldr	r4, [pc, #48]	; (8006354 <__libc_init_array+0x44>)
 8006324:	f001 f834 	bl	8007390 <_init>
 8006328:	1b64      	subs	r4, r4, r5
 800632a:	10a4      	asrs	r4, r4, #2
 800632c:	2600      	movs	r6, #0
 800632e:	42a6      	cmp	r6, r4
 8006330:	d105      	bne.n	800633e <__libc_init_array+0x2e>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	f855 3b04 	ldr.w	r3, [r5], #4
 8006338:	4798      	blx	r3
 800633a:	3601      	adds	r6, #1
 800633c:	e7ee      	b.n	800631c <__libc_init_array+0xc>
 800633e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006342:	4798      	blx	r3
 8006344:	3601      	adds	r6, #1
 8006346:	e7f2      	b.n	800632e <__libc_init_array+0x1e>
 8006348:	080075c4 	.word	0x080075c4
 800634c:	080075c4 	.word	0x080075c4
 8006350:	080075c4 	.word	0x080075c4
 8006354:	080075c8 	.word	0x080075c8

08006358 <__retarget_lock_init_recursive>:
 8006358:	4770      	bx	lr

0800635a <__retarget_lock_acquire_recursive>:
 800635a:	4770      	bx	lr

0800635c <__retarget_lock_release_recursive>:
 800635c:	4770      	bx	lr

0800635e <__ssputs_r>:
 800635e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006362:	688e      	ldr	r6, [r1, #8]
 8006364:	461f      	mov	r7, r3
 8006366:	42be      	cmp	r6, r7
 8006368:	680b      	ldr	r3, [r1, #0]
 800636a:	4682      	mov	sl, r0
 800636c:	460c      	mov	r4, r1
 800636e:	4690      	mov	r8, r2
 8006370:	d82c      	bhi.n	80063cc <__ssputs_r+0x6e>
 8006372:	898a      	ldrh	r2, [r1, #12]
 8006374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006378:	d026      	beq.n	80063c8 <__ssputs_r+0x6a>
 800637a:	6965      	ldr	r5, [r4, #20]
 800637c:	6909      	ldr	r1, [r1, #16]
 800637e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006382:	eba3 0901 	sub.w	r9, r3, r1
 8006386:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800638a:	1c7b      	adds	r3, r7, #1
 800638c:	444b      	add	r3, r9
 800638e:	106d      	asrs	r5, r5, #1
 8006390:	429d      	cmp	r5, r3
 8006392:	bf38      	it	cc
 8006394:	461d      	movcc	r5, r3
 8006396:	0553      	lsls	r3, r2, #21
 8006398:	d527      	bpl.n	80063ea <__ssputs_r+0x8c>
 800639a:	4629      	mov	r1, r5
 800639c:	f000 fa9c 	bl	80068d8 <_malloc_r>
 80063a0:	4606      	mov	r6, r0
 80063a2:	b360      	cbz	r0, 80063fe <__ssputs_r+0xa0>
 80063a4:	6921      	ldr	r1, [r4, #16]
 80063a6:	464a      	mov	r2, r9
 80063a8:	f000 ff90 	bl	80072cc <memcpy>
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	6126      	str	r6, [r4, #16]
 80063ba:	6165      	str	r5, [r4, #20]
 80063bc:	444e      	add	r6, r9
 80063be:	eba5 0509 	sub.w	r5, r5, r9
 80063c2:	6026      	str	r6, [r4, #0]
 80063c4:	60a5      	str	r5, [r4, #8]
 80063c6:	463e      	mov	r6, r7
 80063c8:	42be      	cmp	r6, r7
 80063ca:	d900      	bls.n	80063ce <__ssputs_r+0x70>
 80063cc:	463e      	mov	r6, r7
 80063ce:	6820      	ldr	r0, [r4, #0]
 80063d0:	4632      	mov	r2, r6
 80063d2:	4641      	mov	r1, r8
 80063d4:	f000 fee8 	bl	80071a8 <memmove>
 80063d8:	68a3      	ldr	r3, [r4, #8]
 80063da:	1b9b      	subs	r3, r3, r6
 80063dc:	60a3      	str	r3, [r4, #8]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	4433      	add	r3, r6
 80063e2:	6023      	str	r3, [r4, #0]
 80063e4:	2000      	movs	r0, #0
 80063e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ea:	462a      	mov	r2, r5
 80063ec:	f000 fd81 	bl	8006ef2 <_realloc_r>
 80063f0:	4606      	mov	r6, r0
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d1e0      	bne.n	80063b8 <__ssputs_r+0x5a>
 80063f6:	6921      	ldr	r1, [r4, #16]
 80063f8:	4650      	mov	r0, sl
 80063fa:	f000 ff75 	bl	80072e8 <_free_r>
 80063fe:	230c      	movs	r3, #12
 8006400:	f8ca 3000 	str.w	r3, [sl]
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006410:	e7e9      	b.n	80063e6 <__ssputs_r+0x88>
	...

08006414 <_svfiprintf_r>:
 8006414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006418:	4698      	mov	r8, r3
 800641a:	898b      	ldrh	r3, [r1, #12]
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	b09d      	sub	sp, #116	; 0x74
 8006420:	4607      	mov	r7, r0
 8006422:	460d      	mov	r5, r1
 8006424:	4614      	mov	r4, r2
 8006426:	d50e      	bpl.n	8006446 <_svfiprintf_r+0x32>
 8006428:	690b      	ldr	r3, [r1, #16]
 800642a:	b963      	cbnz	r3, 8006446 <_svfiprintf_r+0x32>
 800642c:	2140      	movs	r1, #64	; 0x40
 800642e:	f000 fa53 	bl	80068d8 <_malloc_r>
 8006432:	6028      	str	r0, [r5, #0]
 8006434:	6128      	str	r0, [r5, #16]
 8006436:	b920      	cbnz	r0, 8006442 <_svfiprintf_r+0x2e>
 8006438:	230c      	movs	r3, #12
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006440:	e0d0      	b.n	80065e4 <_svfiprintf_r+0x1d0>
 8006442:	2340      	movs	r3, #64	; 0x40
 8006444:	616b      	str	r3, [r5, #20]
 8006446:	2300      	movs	r3, #0
 8006448:	9309      	str	r3, [sp, #36]	; 0x24
 800644a:	2320      	movs	r3, #32
 800644c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006450:	f8cd 800c 	str.w	r8, [sp, #12]
 8006454:	2330      	movs	r3, #48	; 0x30
 8006456:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065fc <_svfiprintf_r+0x1e8>
 800645a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800645e:	f04f 0901 	mov.w	r9, #1
 8006462:	4623      	mov	r3, r4
 8006464:	469a      	mov	sl, r3
 8006466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800646a:	b10a      	cbz	r2, 8006470 <_svfiprintf_r+0x5c>
 800646c:	2a25      	cmp	r2, #37	; 0x25
 800646e:	d1f9      	bne.n	8006464 <_svfiprintf_r+0x50>
 8006470:	ebba 0b04 	subs.w	fp, sl, r4
 8006474:	d00b      	beq.n	800648e <_svfiprintf_r+0x7a>
 8006476:	465b      	mov	r3, fp
 8006478:	4622      	mov	r2, r4
 800647a:	4629      	mov	r1, r5
 800647c:	4638      	mov	r0, r7
 800647e:	f7ff ff6e 	bl	800635e <__ssputs_r>
 8006482:	3001      	adds	r0, #1
 8006484:	f000 80a9 	beq.w	80065da <_svfiprintf_r+0x1c6>
 8006488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800648a:	445a      	add	r2, fp
 800648c:	9209      	str	r2, [sp, #36]	; 0x24
 800648e:	f89a 3000 	ldrb.w	r3, [sl]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 80a1 	beq.w	80065da <_svfiprintf_r+0x1c6>
 8006498:	2300      	movs	r3, #0
 800649a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800649e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064a2:	f10a 0a01 	add.w	sl, sl, #1
 80064a6:	9304      	str	r3, [sp, #16]
 80064a8:	9307      	str	r3, [sp, #28]
 80064aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ae:	931a      	str	r3, [sp, #104]	; 0x68
 80064b0:	4654      	mov	r4, sl
 80064b2:	2205      	movs	r2, #5
 80064b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b8:	4850      	ldr	r0, [pc, #320]	; (80065fc <_svfiprintf_r+0x1e8>)
 80064ba:	f7f9 fe99 	bl	80001f0 <memchr>
 80064be:	9a04      	ldr	r2, [sp, #16]
 80064c0:	b9d8      	cbnz	r0, 80064fa <_svfiprintf_r+0xe6>
 80064c2:	06d0      	lsls	r0, r2, #27
 80064c4:	bf44      	itt	mi
 80064c6:	2320      	movmi	r3, #32
 80064c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064cc:	0711      	lsls	r1, r2, #28
 80064ce:	bf44      	itt	mi
 80064d0:	232b      	movmi	r3, #43	; 0x2b
 80064d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064d6:	f89a 3000 	ldrb.w	r3, [sl]
 80064da:	2b2a      	cmp	r3, #42	; 0x2a
 80064dc:	d015      	beq.n	800650a <_svfiprintf_r+0xf6>
 80064de:	9a07      	ldr	r2, [sp, #28]
 80064e0:	4654      	mov	r4, sl
 80064e2:	2000      	movs	r0, #0
 80064e4:	f04f 0c0a 	mov.w	ip, #10
 80064e8:	4621      	mov	r1, r4
 80064ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ee:	3b30      	subs	r3, #48	; 0x30
 80064f0:	2b09      	cmp	r3, #9
 80064f2:	d94d      	bls.n	8006590 <_svfiprintf_r+0x17c>
 80064f4:	b1b0      	cbz	r0, 8006524 <_svfiprintf_r+0x110>
 80064f6:	9207      	str	r2, [sp, #28]
 80064f8:	e014      	b.n	8006524 <_svfiprintf_r+0x110>
 80064fa:	eba0 0308 	sub.w	r3, r0, r8
 80064fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006502:	4313      	orrs	r3, r2
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	46a2      	mov	sl, r4
 8006508:	e7d2      	b.n	80064b0 <_svfiprintf_r+0x9c>
 800650a:	9b03      	ldr	r3, [sp, #12]
 800650c:	1d19      	adds	r1, r3, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	9103      	str	r1, [sp, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	bfbb      	ittet	lt
 8006516:	425b      	neglt	r3, r3
 8006518:	f042 0202 	orrlt.w	r2, r2, #2
 800651c:	9307      	strge	r3, [sp, #28]
 800651e:	9307      	strlt	r3, [sp, #28]
 8006520:	bfb8      	it	lt
 8006522:	9204      	strlt	r2, [sp, #16]
 8006524:	7823      	ldrb	r3, [r4, #0]
 8006526:	2b2e      	cmp	r3, #46	; 0x2e
 8006528:	d10c      	bne.n	8006544 <_svfiprintf_r+0x130>
 800652a:	7863      	ldrb	r3, [r4, #1]
 800652c:	2b2a      	cmp	r3, #42	; 0x2a
 800652e:	d134      	bne.n	800659a <_svfiprintf_r+0x186>
 8006530:	9b03      	ldr	r3, [sp, #12]
 8006532:	1d1a      	adds	r2, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	9203      	str	r2, [sp, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	bfb8      	it	lt
 800653c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006540:	3402      	adds	r4, #2
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800660c <_svfiprintf_r+0x1f8>
 8006548:	7821      	ldrb	r1, [r4, #0]
 800654a:	2203      	movs	r2, #3
 800654c:	4650      	mov	r0, sl
 800654e:	f7f9 fe4f 	bl	80001f0 <memchr>
 8006552:	b138      	cbz	r0, 8006564 <_svfiprintf_r+0x150>
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	eba0 000a 	sub.w	r0, r0, sl
 800655a:	2240      	movs	r2, #64	; 0x40
 800655c:	4082      	lsls	r2, r0
 800655e:	4313      	orrs	r3, r2
 8006560:	3401      	adds	r4, #1
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006568:	4825      	ldr	r0, [pc, #148]	; (8006600 <_svfiprintf_r+0x1ec>)
 800656a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800656e:	2206      	movs	r2, #6
 8006570:	f7f9 fe3e 	bl	80001f0 <memchr>
 8006574:	2800      	cmp	r0, #0
 8006576:	d038      	beq.n	80065ea <_svfiprintf_r+0x1d6>
 8006578:	4b22      	ldr	r3, [pc, #136]	; (8006604 <_svfiprintf_r+0x1f0>)
 800657a:	bb1b      	cbnz	r3, 80065c4 <_svfiprintf_r+0x1b0>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	3307      	adds	r3, #7
 8006580:	f023 0307 	bic.w	r3, r3, #7
 8006584:	3308      	adds	r3, #8
 8006586:	9303      	str	r3, [sp, #12]
 8006588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658a:	4433      	add	r3, r6
 800658c:	9309      	str	r3, [sp, #36]	; 0x24
 800658e:	e768      	b.n	8006462 <_svfiprintf_r+0x4e>
 8006590:	fb0c 3202 	mla	r2, ip, r2, r3
 8006594:	460c      	mov	r4, r1
 8006596:	2001      	movs	r0, #1
 8006598:	e7a6      	b.n	80064e8 <_svfiprintf_r+0xd4>
 800659a:	2300      	movs	r3, #0
 800659c:	3401      	adds	r4, #1
 800659e:	9305      	str	r3, [sp, #20]
 80065a0:	4619      	mov	r1, r3
 80065a2:	f04f 0c0a 	mov.w	ip, #10
 80065a6:	4620      	mov	r0, r4
 80065a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ac:	3a30      	subs	r2, #48	; 0x30
 80065ae:	2a09      	cmp	r2, #9
 80065b0:	d903      	bls.n	80065ba <_svfiprintf_r+0x1a6>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0c6      	beq.n	8006544 <_svfiprintf_r+0x130>
 80065b6:	9105      	str	r1, [sp, #20]
 80065b8:	e7c4      	b.n	8006544 <_svfiprintf_r+0x130>
 80065ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80065be:	4604      	mov	r4, r0
 80065c0:	2301      	movs	r3, #1
 80065c2:	e7f0      	b.n	80065a6 <_svfiprintf_r+0x192>
 80065c4:	ab03      	add	r3, sp, #12
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	462a      	mov	r2, r5
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <_svfiprintf_r+0x1f4>)
 80065cc:	a904      	add	r1, sp, #16
 80065ce:	4638      	mov	r0, r7
 80065d0:	f3af 8000 	nop.w
 80065d4:	1c42      	adds	r2, r0, #1
 80065d6:	4606      	mov	r6, r0
 80065d8:	d1d6      	bne.n	8006588 <_svfiprintf_r+0x174>
 80065da:	89ab      	ldrh	r3, [r5, #12]
 80065dc:	065b      	lsls	r3, r3, #25
 80065de:	f53f af2d 	bmi.w	800643c <_svfiprintf_r+0x28>
 80065e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065e4:	b01d      	add	sp, #116	; 0x74
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ea:	ab03      	add	r3, sp, #12
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	462a      	mov	r2, r5
 80065f0:	4b05      	ldr	r3, [pc, #20]	; (8006608 <_svfiprintf_r+0x1f4>)
 80065f2:	a904      	add	r1, sp, #16
 80065f4:	4638      	mov	r0, r7
 80065f6:	f000 fa5d 	bl	8006ab4 <_printf_i>
 80065fa:	e7eb      	b.n	80065d4 <_svfiprintf_r+0x1c0>
 80065fc:	08007588 	.word	0x08007588
 8006600:	08007592 	.word	0x08007592
 8006604:	00000000 	.word	0x00000000
 8006608:	0800635f 	.word	0x0800635f
 800660c:	0800758e 	.word	0x0800758e

08006610 <__sfputc_r>:
 8006610:	6893      	ldr	r3, [r2, #8]
 8006612:	3b01      	subs	r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	b410      	push	{r4}
 8006618:	6093      	str	r3, [r2, #8]
 800661a:	da08      	bge.n	800662e <__sfputc_r+0x1e>
 800661c:	6994      	ldr	r4, [r2, #24]
 800661e:	42a3      	cmp	r3, r4
 8006620:	db01      	blt.n	8006626 <__sfputc_r+0x16>
 8006622:	290a      	cmp	r1, #10
 8006624:	d103      	bne.n	800662e <__sfputc_r+0x1e>
 8006626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800662a:	f000 bc91 	b.w	8006f50 <__swbuf_r>
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	1c58      	adds	r0, r3, #1
 8006632:	6010      	str	r0, [r2, #0]
 8006634:	7019      	strb	r1, [r3, #0]
 8006636:	4608      	mov	r0, r1
 8006638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800663c:	4770      	bx	lr

0800663e <__sfputs_r>:
 800663e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006640:	4606      	mov	r6, r0
 8006642:	460f      	mov	r7, r1
 8006644:	4614      	mov	r4, r2
 8006646:	18d5      	adds	r5, r2, r3
 8006648:	42ac      	cmp	r4, r5
 800664a:	d101      	bne.n	8006650 <__sfputs_r+0x12>
 800664c:	2000      	movs	r0, #0
 800664e:	e007      	b.n	8006660 <__sfputs_r+0x22>
 8006650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006654:	463a      	mov	r2, r7
 8006656:	4630      	mov	r0, r6
 8006658:	f7ff ffda 	bl	8006610 <__sfputc_r>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d1f3      	bne.n	8006648 <__sfputs_r+0xa>
 8006660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006664 <_vfiprintf_r>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	460d      	mov	r5, r1
 800666a:	b09d      	sub	sp, #116	; 0x74
 800666c:	4614      	mov	r4, r2
 800666e:	4698      	mov	r8, r3
 8006670:	4606      	mov	r6, r0
 8006672:	b118      	cbz	r0, 800667c <_vfiprintf_r+0x18>
 8006674:	6a03      	ldr	r3, [r0, #32]
 8006676:	b90b      	cbnz	r3, 800667c <_vfiprintf_r+0x18>
 8006678:	f7ff fd90 	bl	800619c <__sinit>
 800667c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800667e:	07d9      	lsls	r1, r3, #31
 8006680:	d405      	bmi.n	800668e <_vfiprintf_r+0x2a>
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	059a      	lsls	r2, r3, #22
 8006686:	d402      	bmi.n	800668e <_vfiprintf_r+0x2a>
 8006688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800668a:	f7ff fe66 	bl	800635a <__retarget_lock_acquire_recursive>
 800668e:	89ab      	ldrh	r3, [r5, #12]
 8006690:	071b      	lsls	r3, r3, #28
 8006692:	d501      	bpl.n	8006698 <_vfiprintf_r+0x34>
 8006694:	692b      	ldr	r3, [r5, #16]
 8006696:	b99b      	cbnz	r3, 80066c0 <_vfiprintf_r+0x5c>
 8006698:	4629      	mov	r1, r5
 800669a:	4630      	mov	r0, r6
 800669c:	f000 fc96 	bl	8006fcc <__swsetup_r>
 80066a0:	b170      	cbz	r0, 80066c0 <_vfiprintf_r+0x5c>
 80066a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a4:	07dc      	lsls	r4, r3, #31
 80066a6:	d504      	bpl.n	80066b2 <_vfiprintf_r+0x4e>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ac:	b01d      	add	sp, #116	; 0x74
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	89ab      	ldrh	r3, [r5, #12]
 80066b4:	0598      	lsls	r0, r3, #22
 80066b6:	d4f7      	bmi.n	80066a8 <_vfiprintf_r+0x44>
 80066b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ba:	f7ff fe4f 	bl	800635c <__retarget_lock_release_recursive>
 80066be:	e7f3      	b.n	80066a8 <_vfiprintf_r+0x44>
 80066c0:	2300      	movs	r3, #0
 80066c2:	9309      	str	r3, [sp, #36]	; 0x24
 80066c4:	2320      	movs	r3, #32
 80066c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ce:	2330      	movs	r3, #48	; 0x30
 80066d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006884 <_vfiprintf_r+0x220>
 80066d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066d8:	f04f 0901 	mov.w	r9, #1
 80066dc:	4623      	mov	r3, r4
 80066de:	469a      	mov	sl, r3
 80066e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e4:	b10a      	cbz	r2, 80066ea <_vfiprintf_r+0x86>
 80066e6:	2a25      	cmp	r2, #37	; 0x25
 80066e8:	d1f9      	bne.n	80066de <_vfiprintf_r+0x7a>
 80066ea:	ebba 0b04 	subs.w	fp, sl, r4
 80066ee:	d00b      	beq.n	8006708 <_vfiprintf_r+0xa4>
 80066f0:	465b      	mov	r3, fp
 80066f2:	4622      	mov	r2, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	4630      	mov	r0, r6
 80066f8:	f7ff ffa1 	bl	800663e <__sfputs_r>
 80066fc:	3001      	adds	r0, #1
 80066fe:	f000 80a9 	beq.w	8006854 <_vfiprintf_r+0x1f0>
 8006702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006704:	445a      	add	r2, fp
 8006706:	9209      	str	r2, [sp, #36]	; 0x24
 8006708:	f89a 3000 	ldrb.w	r3, [sl]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80a1 	beq.w	8006854 <_vfiprintf_r+0x1f0>
 8006712:	2300      	movs	r3, #0
 8006714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800671c:	f10a 0a01 	add.w	sl, sl, #1
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006728:	931a      	str	r3, [sp, #104]	; 0x68
 800672a:	4654      	mov	r4, sl
 800672c:	2205      	movs	r2, #5
 800672e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006732:	4854      	ldr	r0, [pc, #336]	; (8006884 <_vfiprintf_r+0x220>)
 8006734:	f7f9 fd5c 	bl	80001f0 <memchr>
 8006738:	9a04      	ldr	r2, [sp, #16]
 800673a:	b9d8      	cbnz	r0, 8006774 <_vfiprintf_r+0x110>
 800673c:	06d1      	lsls	r1, r2, #27
 800673e:	bf44      	itt	mi
 8006740:	2320      	movmi	r3, #32
 8006742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006746:	0713      	lsls	r3, r2, #28
 8006748:	bf44      	itt	mi
 800674a:	232b      	movmi	r3, #43	; 0x2b
 800674c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006750:	f89a 3000 	ldrb.w	r3, [sl]
 8006754:	2b2a      	cmp	r3, #42	; 0x2a
 8006756:	d015      	beq.n	8006784 <_vfiprintf_r+0x120>
 8006758:	9a07      	ldr	r2, [sp, #28]
 800675a:	4654      	mov	r4, sl
 800675c:	2000      	movs	r0, #0
 800675e:	f04f 0c0a 	mov.w	ip, #10
 8006762:	4621      	mov	r1, r4
 8006764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006768:	3b30      	subs	r3, #48	; 0x30
 800676a:	2b09      	cmp	r3, #9
 800676c:	d94d      	bls.n	800680a <_vfiprintf_r+0x1a6>
 800676e:	b1b0      	cbz	r0, 800679e <_vfiprintf_r+0x13a>
 8006770:	9207      	str	r2, [sp, #28]
 8006772:	e014      	b.n	800679e <_vfiprintf_r+0x13a>
 8006774:	eba0 0308 	sub.w	r3, r0, r8
 8006778:	fa09 f303 	lsl.w	r3, r9, r3
 800677c:	4313      	orrs	r3, r2
 800677e:	9304      	str	r3, [sp, #16]
 8006780:	46a2      	mov	sl, r4
 8006782:	e7d2      	b.n	800672a <_vfiprintf_r+0xc6>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	1d19      	adds	r1, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	9103      	str	r1, [sp, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfbb      	ittet	lt
 8006790:	425b      	neglt	r3, r3
 8006792:	f042 0202 	orrlt.w	r2, r2, #2
 8006796:	9307      	strge	r3, [sp, #28]
 8006798:	9307      	strlt	r3, [sp, #28]
 800679a:	bfb8      	it	lt
 800679c:	9204      	strlt	r2, [sp, #16]
 800679e:	7823      	ldrb	r3, [r4, #0]
 80067a0:	2b2e      	cmp	r3, #46	; 0x2e
 80067a2:	d10c      	bne.n	80067be <_vfiprintf_r+0x15a>
 80067a4:	7863      	ldrb	r3, [r4, #1]
 80067a6:	2b2a      	cmp	r3, #42	; 0x2a
 80067a8:	d134      	bne.n	8006814 <_vfiprintf_r+0x1b0>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	9203      	str	r2, [sp, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bfb8      	it	lt
 80067b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067ba:	3402      	adds	r4, #2
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006894 <_vfiprintf_r+0x230>
 80067c2:	7821      	ldrb	r1, [r4, #0]
 80067c4:	2203      	movs	r2, #3
 80067c6:	4650      	mov	r0, sl
 80067c8:	f7f9 fd12 	bl	80001f0 <memchr>
 80067cc:	b138      	cbz	r0, 80067de <_vfiprintf_r+0x17a>
 80067ce:	9b04      	ldr	r3, [sp, #16]
 80067d0:	eba0 000a 	sub.w	r0, r0, sl
 80067d4:	2240      	movs	r2, #64	; 0x40
 80067d6:	4082      	lsls	r2, r0
 80067d8:	4313      	orrs	r3, r2
 80067da:	3401      	adds	r4, #1
 80067dc:	9304      	str	r3, [sp, #16]
 80067de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e2:	4829      	ldr	r0, [pc, #164]	; (8006888 <_vfiprintf_r+0x224>)
 80067e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e8:	2206      	movs	r2, #6
 80067ea:	f7f9 fd01 	bl	80001f0 <memchr>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d03f      	beq.n	8006872 <_vfiprintf_r+0x20e>
 80067f2:	4b26      	ldr	r3, [pc, #152]	; (800688c <_vfiprintf_r+0x228>)
 80067f4:	bb1b      	cbnz	r3, 800683e <_vfiprintf_r+0x1da>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	3307      	adds	r3, #7
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	3308      	adds	r3, #8
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	443b      	add	r3, r7
 8006806:	9309      	str	r3, [sp, #36]	; 0x24
 8006808:	e768      	b.n	80066dc <_vfiprintf_r+0x78>
 800680a:	fb0c 3202 	mla	r2, ip, r2, r3
 800680e:	460c      	mov	r4, r1
 8006810:	2001      	movs	r0, #1
 8006812:	e7a6      	b.n	8006762 <_vfiprintf_r+0xfe>
 8006814:	2300      	movs	r3, #0
 8006816:	3401      	adds	r4, #1
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	4619      	mov	r1, r3
 800681c:	f04f 0c0a 	mov.w	ip, #10
 8006820:	4620      	mov	r0, r4
 8006822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006826:	3a30      	subs	r2, #48	; 0x30
 8006828:	2a09      	cmp	r2, #9
 800682a:	d903      	bls.n	8006834 <_vfiprintf_r+0x1d0>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0c6      	beq.n	80067be <_vfiprintf_r+0x15a>
 8006830:	9105      	str	r1, [sp, #20]
 8006832:	e7c4      	b.n	80067be <_vfiprintf_r+0x15a>
 8006834:	fb0c 2101 	mla	r1, ip, r1, r2
 8006838:	4604      	mov	r4, r0
 800683a:	2301      	movs	r3, #1
 800683c:	e7f0      	b.n	8006820 <_vfiprintf_r+0x1bc>
 800683e:	ab03      	add	r3, sp, #12
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	462a      	mov	r2, r5
 8006844:	4b12      	ldr	r3, [pc, #72]	; (8006890 <_vfiprintf_r+0x22c>)
 8006846:	a904      	add	r1, sp, #16
 8006848:	4630      	mov	r0, r6
 800684a:	f3af 8000 	nop.w
 800684e:	4607      	mov	r7, r0
 8006850:	1c78      	adds	r0, r7, #1
 8006852:	d1d6      	bne.n	8006802 <_vfiprintf_r+0x19e>
 8006854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006856:	07d9      	lsls	r1, r3, #31
 8006858:	d405      	bmi.n	8006866 <_vfiprintf_r+0x202>
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	059a      	lsls	r2, r3, #22
 800685e:	d402      	bmi.n	8006866 <_vfiprintf_r+0x202>
 8006860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006862:	f7ff fd7b 	bl	800635c <__retarget_lock_release_recursive>
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	065b      	lsls	r3, r3, #25
 800686a:	f53f af1d 	bmi.w	80066a8 <_vfiprintf_r+0x44>
 800686e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006870:	e71c      	b.n	80066ac <_vfiprintf_r+0x48>
 8006872:	ab03      	add	r3, sp, #12
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	462a      	mov	r2, r5
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <_vfiprintf_r+0x22c>)
 800687a:	a904      	add	r1, sp, #16
 800687c:	4630      	mov	r0, r6
 800687e:	f000 f919 	bl	8006ab4 <_printf_i>
 8006882:	e7e4      	b.n	800684e <_vfiprintf_r+0x1ea>
 8006884:	08007588 	.word	0x08007588
 8006888:	08007592 	.word	0x08007592
 800688c:	00000000 	.word	0x00000000
 8006890:	0800663f 	.word	0x0800663f
 8006894:	0800758e 	.word	0x0800758e

08006898 <sbrk_aligned>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4e0e      	ldr	r6, [pc, #56]	; (80068d4 <sbrk_aligned+0x3c>)
 800689c:	460c      	mov	r4, r1
 800689e:	6831      	ldr	r1, [r6, #0]
 80068a0:	4605      	mov	r5, r0
 80068a2:	b911      	cbnz	r1, 80068aa <sbrk_aligned+0x12>
 80068a4:	f000 fcf0 	bl	8007288 <_sbrk_r>
 80068a8:	6030      	str	r0, [r6, #0]
 80068aa:	4621      	mov	r1, r4
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 fceb 	bl	8007288 <_sbrk_r>
 80068b2:	1c43      	adds	r3, r0, #1
 80068b4:	d00a      	beq.n	80068cc <sbrk_aligned+0x34>
 80068b6:	1cc4      	adds	r4, r0, #3
 80068b8:	f024 0403 	bic.w	r4, r4, #3
 80068bc:	42a0      	cmp	r0, r4
 80068be:	d007      	beq.n	80068d0 <sbrk_aligned+0x38>
 80068c0:	1a21      	subs	r1, r4, r0
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 fce0 	bl	8007288 <_sbrk_r>
 80068c8:	3001      	adds	r0, #1
 80068ca:	d101      	bne.n	80068d0 <sbrk_aligned+0x38>
 80068cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80068d0:	4620      	mov	r0, r4
 80068d2:	bd70      	pop	{r4, r5, r6, pc}
 80068d4:	20000318 	.word	0x20000318

080068d8 <_malloc_r>:
 80068d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068dc:	1ccd      	adds	r5, r1, #3
 80068de:	f025 0503 	bic.w	r5, r5, #3
 80068e2:	3508      	adds	r5, #8
 80068e4:	2d0c      	cmp	r5, #12
 80068e6:	bf38      	it	cc
 80068e8:	250c      	movcc	r5, #12
 80068ea:	2d00      	cmp	r5, #0
 80068ec:	4607      	mov	r7, r0
 80068ee:	db01      	blt.n	80068f4 <_malloc_r+0x1c>
 80068f0:	42a9      	cmp	r1, r5
 80068f2:	d905      	bls.n	8006900 <_malloc_r+0x28>
 80068f4:	230c      	movs	r3, #12
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	2600      	movs	r6, #0
 80068fa:	4630      	mov	r0, r6
 80068fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006900:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80069d4 <_malloc_r+0xfc>
 8006904:	f000 faa6 	bl	8006e54 <__malloc_lock>
 8006908:	f8d8 3000 	ldr.w	r3, [r8]
 800690c:	461c      	mov	r4, r3
 800690e:	bb5c      	cbnz	r4, 8006968 <_malloc_r+0x90>
 8006910:	4629      	mov	r1, r5
 8006912:	4638      	mov	r0, r7
 8006914:	f7ff ffc0 	bl	8006898 <sbrk_aligned>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	4604      	mov	r4, r0
 800691c:	d155      	bne.n	80069ca <_malloc_r+0xf2>
 800691e:	f8d8 4000 	ldr.w	r4, [r8]
 8006922:	4626      	mov	r6, r4
 8006924:	2e00      	cmp	r6, #0
 8006926:	d145      	bne.n	80069b4 <_malloc_r+0xdc>
 8006928:	2c00      	cmp	r4, #0
 800692a:	d048      	beq.n	80069be <_malloc_r+0xe6>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	4631      	mov	r1, r6
 8006930:	4638      	mov	r0, r7
 8006932:	eb04 0903 	add.w	r9, r4, r3
 8006936:	f000 fca7 	bl	8007288 <_sbrk_r>
 800693a:	4581      	cmp	r9, r0
 800693c:	d13f      	bne.n	80069be <_malloc_r+0xe6>
 800693e:	6821      	ldr	r1, [r4, #0]
 8006940:	1a6d      	subs	r5, r5, r1
 8006942:	4629      	mov	r1, r5
 8006944:	4638      	mov	r0, r7
 8006946:	f7ff ffa7 	bl	8006898 <sbrk_aligned>
 800694a:	3001      	adds	r0, #1
 800694c:	d037      	beq.n	80069be <_malloc_r+0xe6>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	442b      	add	r3, r5
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	f8d8 3000 	ldr.w	r3, [r8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d038      	beq.n	80069ce <_malloc_r+0xf6>
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	42a2      	cmp	r2, r4
 8006960:	d12b      	bne.n	80069ba <_malloc_r+0xe2>
 8006962:	2200      	movs	r2, #0
 8006964:	605a      	str	r2, [r3, #4]
 8006966:	e00f      	b.n	8006988 <_malloc_r+0xb0>
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	1b52      	subs	r2, r2, r5
 800696c:	d41f      	bmi.n	80069ae <_malloc_r+0xd6>
 800696e:	2a0b      	cmp	r2, #11
 8006970:	d917      	bls.n	80069a2 <_malloc_r+0xca>
 8006972:	1961      	adds	r1, r4, r5
 8006974:	42a3      	cmp	r3, r4
 8006976:	6025      	str	r5, [r4, #0]
 8006978:	bf18      	it	ne
 800697a:	6059      	strne	r1, [r3, #4]
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	bf08      	it	eq
 8006980:	f8c8 1000 	streq.w	r1, [r8]
 8006984:	5162      	str	r2, [r4, r5]
 8006986:	604b      	str	r3, [r1, #4]
 8006988:	4638      	mov	r0, r7
 800698a:	f104 060b 	add.w	r6, r4, #11
 800698e:	f000 fa67 	bl	8006e60 <__malloc_unlock>
 8006992:	f026 0607 	bic.w	r6, r6, #7
 8006996:	1d23      	adds	r3, r4, #4
 8006998:	1af2      	subs	r2, r6, r3
 800699a:	d0ae      	beq.n	80068fa <_malloc_r+0x22>
 800699c:	1b9b      	subs	r3, r3, r6
 800699e:	50a3      	str	r3, [r4, r2]
 80069a0:	e7ab      	b.n	80068fa <_malloc_r+0x22>
 80069a2:	42a3      	cmp	r3, r4
 80069a4:	6862      	ldr	r2, [r4, #4]
 80069a6:	d1dd      	bne.n	8006964 <_malloc_r+0x8c>
 80069a8:	f8c8 2000 	str.w	r2, [r8]
 80069ac:	e7ec      	b.n	8006988 <_malloc_r+0xb0>
 80069ae:	4623      	mov	r3, r4
 80069b0:	6864      	ldr	r4, [r4, #4]
 80069b2:	e7ac      	b.n	800690e <_malloc_r+0x36>
 80069b4:	4634      	mov	r4, r6
 80069b6:	6876      	ldr	r6, [r6, #4]
 80069b8:	e7b4      	b.n	8006924 <_malloc_r+0x4c>
 80069ba:	4613      	mov	r3, r2
 80069bc:	e7cc      	b.n	8006958 <_malloc_r+0x80>
 80069be:	230c      	movs	r3, #12
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	4638      	mov	r0, r7
 80069c4:	f000 fa4c 	bl	8006e60 <__malloc_unlock>
 80069c8:	e797      	b.n	80068fa <_malloc_r+0x22>
 80069ca:	6025      	str	r5, [r4, #0]
 80069cc:	e7dc      	b.n	8006988 <_malloc_r+0xb0>
 80069ce:	605b      	str	r3, [r3, #4]
 80069d0:	deff      	udf	#255	; 0xff
 80069d2:	bf00      	nop
 80069d4:	20000314 	.word	0x20000314

080069d8 <_printf_common>:
 80069d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069dc:	4616      	mov	r6, r2
 80069de:	4699      	mov	r9, r3
 80069e0:	688a      	ldr	r2, [r1, #8]
 80069e2:	690b      	ldr	r3, [r1, #16]
 80069e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bfb8      	it	lt
 80069ec:	4613      	movlt	r3, r2
 80069ee:	6033      	str	r3, [r6, #0]
 80069f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069f4:	4607      	mov	r7, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	b10a      	cbz	r2, 80069fe <_printf_common+0x26>
 80069fa:	3301      	adds	r3, #1
 80069fc:	6033      	str	r3, [r6, #0]
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	0699      	lsls	r1, r3, #26
 8006a02:	bf42      	ittt	mi
 8006a04:	6833      	ldrmi	r3, [r6, #0]
 8006a06:	3302      	addmi	r3, #2
 8006a08:	6033      	strmi	r3, [r6, #0]
 8006a0a:	6825      	ldr	r5, [r4, #0]
 8006a0c:	f015 0506 	ands.w	r5, r5, #6
 8006a10:	d106      	bne.n	8006a20 <_printf_common+0x48>
 8006a12:	f104 0a19 	add.w	sl, r4, #25
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	6832      	ldr	r2, [r6, #0]
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	dc26      	bgt.n	8006a6e <_printf_common+0x96>
 8006a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a24:	1e13      	subs	r3, r2, #0
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	bf18      	it	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	0692      	lsls	r2, r2, #26
 8006a2e:	d42b      	bmi.n	8006a88 <_printf_common+0xb0>
 8006a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a34:	4649      	mov	r1, r9
 8006a36:	4638      	mov	r0, r7
 8006a38:	47c0      	blx	r8
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d01e      	beq.n	8006a7c <_printf_common+0xa4>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	f003 0306 	and.w	r3, r3, #6
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf02      	ittt	eq
 8006a4a:	68e5      	ldreq	r5, [r4, #12]
 8006a4c:	6833      	ldreq	r3, [r6, #0]
 8006a4e:	1aed      	subeq	r5, r5, r3
 8006a50:	68a3      	ldr	r3, [r4, #8]
 8006a52:	bf0c      	ite	eq
 8006a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a58:	2500      	movne	r5, #0
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	bfc4      	itt	gt
 8006a5e:	1a9b      	subgt	r3, r3, r2
 8006a60:	18ed      	addgt	r5, r5, r3
 8006a62:	2600      	movs	r6, #0
 8006a64:	341a      	adds	r4, #26
 8006a66:	42b5      	cmp	r5, r6
 8006a68:	d11a      	bne.n	8006aa0 <_printf_common+0xc8>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e008      	b.n	8006a80 <_printf_common+0xa8>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4652      	mov	r2, sl
 8006a72:	4649      	mov	r1, r9
 8006a74:	4638      	mov	r0, r7
 8006a76:	47c0      	blx	r8
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d103      	bne.n	8006a84 <_printf_common+0xac>
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a84:	3501      	adds	r5, #1
 8006a86:	e7c6      	b.n	8006a16 <_printf_common+0x3e>
 8006a88:	18e1      	adds	r1, r4, r3
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	2030      	movs	r0, #48	; 0x30
 8006a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a92:	4422      	add	r2, r4
 8006a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	e7c7      	b.n	8006a30 <_printf_common+0x58>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	47c0      	blx	r8
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d0e6      	beq.n	8006a7c <_printf_common+0xa4>
 8006aae:	3601      	adds	r6, #1
 8006ab0:	e7d9      	b.n	8006a66 <_printf_common+0x8e>
	...

08006ab4 <_printf_i>:
 8006ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	7e0f      	ldrb	r7, [r1, #24]
 8006aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006abc:	2f78      	cmp	r7, #120	; 0x78
 8006abe:	4691      	mov	r9, r2
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	469a      	mov	sl, r3
 8006ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aca:	d807      	bhi.n	8006adc <_printf_i+0x28>
 8006acc:	2f62      	cmp	r7, #98	; 0x62
 8006ace:	d80a      	bhi.n	8006ae6 <_printf_i+0x32>
 8006ad0:	2f00      	cmp	r7, #0
 8006ad2:	f000 80d4 	beq.w	8006c7e <_printf_i+0x1ca>
 8006ad6:	2f58      	cmp	r7, #88	; 0x58
 8006ad8:	f000 80c0 	beq.w	8006c5c <_printf_i+0x1a8>
 8006adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ae4:	e03a      	b.n	8006b5c <_printf_i+0xa8>
 8006ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aea:	2b15      	cmp	r3, #21
 8006aec:	d8f6      	bhi.n	8006adc <_printf_i+0x28>
 8006aee:	a101      	add	r1, pc, #4	; (adr r1, 8006af4 <_printf_i+0x40>)
 8006af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b61 	.word	0x08006b61
 8006afc:	08006add 	.word	0x08006add
 8006b00:	08006add 	.word	0x08006add
 8006b04:	08006add 	.word	0x08006add
 8006b08:	08006add 	.word	0x08006add
 8006b0c:	08006b61 	.word	0x08006b61
 8006b10:	08006add 	.word	0x08006add
 8006b14:	08006add 	.word	0x08006add
 8006b18:	08006add 	.word	0x08006add
 8006b1c:	08006add 	.word	0x08006add
 8006b20:	08006c65 	.word	0x08006c65
 8006b24:	08006b8d 	.word	0x08006b8d
 8006b28:	08006c1f 	.word	0x08006c1f
 8006b2c:	08006add 	.word	0x08006add
 8006b30:	08006add 	.word	0x08006add
 8006b34:	08006c87 	.word	0x08006c87
 8006b38:	08006add 	.word	0x08006add
 8006b3c:	08006b8d 	.word	0x08006b8d
 8006b40:	08006add 	.word	0x08006add
 8006b44:	08006add 	.word	0x08006add
 8006b48:	08006c27 	.word	0x08006c27
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	1d1a      	adds	r2, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	602a      	str	r2, [r5, #0]
 8006b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e09f      	b.n	8006ca0 <_printf_i+0x1ec>
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	682b      	ldr	r3, [r5, #0]
 8006b64:	0607      	lsls	r7, r0, #24
 8006b66:	f103 0104 	add.w	r1, r3, #4
 8006b6a:	6029      	str	r1, [r5, #0]
 8006b6c:	d501      	bpl.n	8006b72 <_printf_i+0xbe>
 8006b6e:	681e      	ldr	r6, [r3, #0]
 8006b70:	e003      	b.n	8006b7a <_printf_i+0xc6>
 8006b72:	0646      	lsls	r6, r0, #25
 8006b74:	d5fb      	bpl.n	8006b6e <_printf_i+0xba>
 8006b76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	da03      	bge.n	8006b86 <_printf_i+0xd2>
 8006b7e:	232d      	movs	r3, #45	; 0x2d
 8006b80:	4276      	negs	r6, r6
 8006b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b86:	485a      	ldr	r0, [pc, #360]	; (8006cf0 <_printf_i+0x23c>)
 8006b88:	230a      	movs	r3, #10
 8006b8a:	e012      	b.n	8006bb2 <_printf_i+0xfe>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	6820      	ldr	r0, [r4, #0]
 8006b90:	1d19      	adds	r1, r3, #4
 8006b92:	6029      	str	r1, [r5, #0]
 8006b94:	0605      	lsls	r5, r0, #24
 8006b96:	d501      	bpl.n	8006b9c <_printf_i+0xe8>
 8006b98:	681e      	ldr	r6, [r3, #0]
 8006b9a:	e002      	b.n	8006ba2 <_printf_i+0xee>
 8006b9c:	0641      	lsls	r1, r0, #25
 8006b9e:	d5fb      	bpl.n	8006b98 <_printf_i+0xe4>
 8006ba0:	881e      	ldrh	r6, [r3, #0]
 8006ba2:	4853      	ldr	r0, [pc, #332]	; (8006cf0 <_printf_i+0x23c>)
 8006ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2308      	moveq	r3, #8
 8006baa:	230a      	movne	r3, #10
 8006bac:	2100      	movs	r1, #0
 8006bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bb2:	6865      	ldr	r5, [r4, #4]
 8006bb4:	60a5      	str	r5, [r4, #8]
 8006bb6:	2d00      	cmp	r5, #0
 8006bb8:	bfa2      	ittt	ge
 8006bba:	6821      	ldrge	r1, [r4, #0]
 8006bbc:	f021 0104 	bicge.w	r1, r1, #4
 8006bc0:	6021      	strge	r1, [r4, #0]
 8006bc2:	b90e      	cbnz	r6, 8006bc8 <_printf_i+0x114>
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	d04b      	beq.n	8006c60 <_printf_i+0x1ac>
 8006bc8:	4615      	mov	r5, r2
 8006bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bce:	fb03 6711 	mls	r7, r3, r1, r6
 8006bd2:	5dc7      	ldrb	r7, [r0, r7]
 8006bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bd8:	4637      	mov	r7, r6
 8006bda:	42bb      	cmp	r3, r7
 8006bdc:	460e      	mov	r6, r1
 8006bde:	d9f4      	bls.n	8006bca <_printf_i+0x116>
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d10b      	bne.n	8006bfc <_printf_i+0x148>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	07de      	lsls	r6, r3, #31
 8006be8:	d508      	bpl.n	8006bfc <_printf_i+0x148>
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	6861      	ldr	r1, [r4, #4]
 8006bee:	4299      	cmp	r1, r3
 8006bf0:	bfde      	ittt	le
 8006bf2:	2330      	movle	r3, #48	; 0x30
 8006bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006bfc:	1b52      	subs	r2, r2, r5
 8006bfe:	6122      	str	r2, [r4, #16]
 8006c00:	f8cd a000 	str.w	sl, [sp]
 8006c04:	464b      	mov	r3, r9
 8006c06:	aa03      	add	r2, sp, #12
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	f7ff fee4 	bl	80069d8 <_printf_common>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d14a      	bne.n	8006caa <_printf_i+0x1f6>
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c18:	b004      	add	sp, #16
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	f043 0320 	orr.w	r3, r3, #32
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	4833      	ldr	r0, [pc, #204]	; (8006cf4 <_printf_i+0x240>)
 8006c28:	2778      	movs	r7, #120	; 0x78
 8006c2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	6829      	ldr	r1, [r5, #0]
 8006c32:	061f      	lsls	r7, r3, #24
 8006c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c38:	d402      	bmi.n	8006c40 <_printf_i+0x18c>
 8006c3a:	065f      	lsls	r7, r3, #25
 8006c3c:	bf48      	it	mi
 8006c3e:	b2b6      	uxthmi	r6, r6
 8006c40:	07df      	lsls	r7, r3, #31
 8006c42:	bf48      	it	mi
 8006c44:	f043 0320 	orrmi.w	r3, r3, #32
 8006c48:	6029      	str	r1, [r5, #0]
 8006c4a:	bf48      	it	mi
 8006c4c:	6023      	strmi	r3, [r4, #0]
 8006c4e:	b91e      	cbnz	r6, 8006c58 <_printf_i+0x1a4>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	f023 0320 	bic.w	r3, r3, #32
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	2310      	movs	r3, #16
 8006c5a:	e7a7      	b.n	8006bac <_printf_i+0xf8>
 8006c5c:	4824      	ldr	r0, [pc, #144]	; (8006cf0 <_printf_i+0x23c>)
 8006c5e:	e7e4      	b.n	8006c2a <_printf_i+0x176>
 8006c60:	4615      	mov	r5, r2
 8006c62:	e7bd      	b.n	8006be0 <_printf_i+0x12c>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	6826      	ldr	r6, [r4, #0]
 8006c68:	6961      	ldr	r1, [r4, #20]
 8006c6a:	1d18      	adds	r0, r3, #4
 8006c6c:	6028      	str	r0, [r5, #0]
 8006c6e:	0635      	lsls	r5, r6, #24
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	d501      	bpl.n	8006c78 <_printf_i+0x1c4>
 8006c74:	6019      	str	r1, [r3, #0]
 8006c76:	e002      	b.n	8006c7e <_printf_i+0x1ca>
 8006c78:	0670      	lsls	r0, r6, #25
 8006c7a:	d5fb      	bpl.n	8006c74 <_printf_i+0x1c0>
 8006c7c:	8019      	strh	r1, [r3, #0]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	4615      	mov	r5, r2
 8006c84:	e7bc      	b.n	8006c00 <_printf_i+0x14c>
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	1d1a      	adds	r2, r3, #4
 8006c8a:	602a      	str	r2, [r5, #0]
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	2100      	movs	r1, #0
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7f9 faac 	bl	80001f0 <memchr>
 8006c98:	b108      	cbz	r0, 8006c9e <_printf_i+0x1ea>
 8006c9a:	1b40      	subs	r0, r0, r5
 8006c9c:	6060      	str	r0, [r4, #4]
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	6123      	str	r3, [r4, #16]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca8:	e7aa      	b.n	8006c00 <_printf_i+0x14c>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	462a      	mov	r2, r5
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	47d0      	blx	sl
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d0ad      	beq.n	8006c14 <_printf_i+0x160>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	079b      	lsls	r3, r3, #30
 8006cbc:	d413      	bmi.n	8006ce6 <_printf_i+0x232>
 8006cbe:	68e0      	ldr	r0, [r4, #12]
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	4298      	cmp	r0, r3
 8006cc4:	bfb8      	it	lt
 8006cc6:	4618      	movlt	r0, r3
 8006cc8:	e7a6      	b.n	8006c18 <_printf_i+0x164>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4632      	mov	r2, r6
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	47d0      	blx	sl
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d09d      	beq.n	8006c14 <_printf_i+0x160>
 8006cd8:	3501      	adds	r5, #1
 8006cda:	68e3      	ldr	r3, [r4, #12]
 8006cdc:	9903      	ldr	r1, [sp, #12]
 8006cde:	1a5b      	subs	r3, r3, r1
 8006ce0:	42ab      	cmp	r3, r5
 8006ce2:	dcf2      	bgt.n	8006cca <_printf_i+0x216>
 8006ce4:	e7eb      	b.n	8006cbe <_printf_i+0x20a>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	f104 0619 	add.w	r6, r4, #25
 8006cec:	e7f5      	b.n	8006cda <_printf_i+0x226>
 8006cee:	bf00      	nop
 8006cf0:	08007599 	.word	0x08007599
 8006cf4:	080075aa 	.word	0x080075aa

08006cf8 <__sflush_r>:
 8006cf8:	898a      	ldrh	r2, [r1, #12]
 8006cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfe:	4605      	mov	r5, r0
 8006d00:	0710      	lsls	r0, r2, #28
 8006d02:	460c      	mov	r4, r1
 8006d04:	d458      	bmi.n	8006db8 <__sflush_r+0xc0>
 8006d06:	684b      	ldr	r3, [r1, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	dc05      	bgt.n	8006d18 <__sflush_r+0x20>
 8006d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dc02      	bgt.n	8006d18 <__sflush_r+0x20>
 8006d12:	2000      	movs	r0, #0
 8006d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d1a:	2e00      	cmp	r6, #0
 8006d1c:	d0f9      	beq.n	8006d12 <__sflush_r+0x1a>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d24:	682f      	ldr	r7, [r5, #0]
 8006d26:	6a21      	ldr	r1, [r4, #32]
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	d032      	beq.n	8006d92 <__sflush_r+0x9a>
 8006d2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	075a      	lsls	r2, r3, #29
 8006d32:	d505      	bpl.n	8006d40 <__sflush_r+0x48>
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	1ac0      	subs	r0, r0, r3
 8006d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d3a:	b10b      	cbz	r3, 8006d40 <__sflush_r+0x48>
 8006d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d3e:	1ac0      	subs	r0, r0, r3
 8006d40:	2300      	movs	r3, #0
 8006d42:	4602      	mov	r2, r0
 8006d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d46:	6a21      	ldr	r1, [r4, #32]
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b0      	blx	r6
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	d106      	bne.n	8006d60 <__sflush_r+0x68>
 8006d52:	6829      	ldr	r1, [r5, #0]
 8006d54:	291d      	cmp	r1, #29
 8006d56:	d82b      	bhi.n	8006db0 <__sflush_r+0xb8>
 8006d58:	4a29      	ldr	r2, [pc, #164]	; (8006e00 <__sflush_r+0x108>)
 8006d5a:	410a      	asrs	r2, r1
 8006d5c:	07d6      	lsls	r6, r2, #31
 8006d5e:	d427      	bmi.n	8006db0 <__sflush_r+0xb8>
 8006d60:	2200      	movs	r2, #0
 8006d62:	6062      	str	r2, [r4, #4]
 8006d64:	04d9      	lsls	r1, r3, #19
 8006d66:	6922      	ldr	r2, [r4, #16]
 8006d68:	6022      	str	r2, [r4, #0]
 8006d6a:	d504      	bpl.n	8006d76 <__sflush_r+0x7e>
 8006d6c:	1c42      	adds	r2, r0, #1
 8006d6e:	d101      	bne.n	8006d74 <__sflush_r+0x7c>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b903      	cbnz	r3, 8006d76 <__sflush_r+0x7e>
 8006d74:	6560      	str	r0, [r4, #84]	; 0x54
 8006d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d78:	602f      	str	r7, [r5, #0]
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	d0c9      	beq.n	8006d12 <__sflush_r+0x1a>
 8006d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d82:	4299      	cmp	r1, r3
 8006d84:	d002      	beq.n	8006d8c <__sflush_r+0x94>
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 faae 	bl	80072e8 <_free_r>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8006d90:	e7c0      	b.n	8006d14 <__sflush_r+0x1c>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b0      	blx	r6
 8006d98:	1c41      	adds	r1, r0, #1
 8006d9a:	d1c8      	bne.n	8006d2e <__sflush_r+0x36>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0c5      	beq.n	8006d2e <__sflush_r+0x36>
 8006da2:	2b1d      	cmp	r3, #29
 8006da4:	d001      	beq.n	8006daa <__sflush_r+0xb2>
 8006da6:	2b16      	cmp	r3, #22
 8006da8:	d101      	bne.n	8006dae <__sflush_r+0xb6>
 8006daa:	602f      	str	r7, [r5, #0]
 8006dac:	e7b1      	b.n	8006d12 <__sflush_r+0x1a>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	e7ad      	b.n	8006d14 <__sflush_r+0x1c>
 8006db8:	690f      	ldr	r7, [r1, #16]
 8006dba:	2f00      	cmp	r7, #0
 8006dbc:	d0a9      	beq.n	8006d12 <__sflush_r+0x1a>
 8006dbe:	0793      	lsls	r3, r2, #30
 8006dc0:	680e      	ldr	r6, [r1, #0]
 8006dc2:	bf08      	it	eq
 8006dc4:	694b      	ldreq	r3, [r1, #20]
 8006dc6:	600f      	str	r7, [r1, #0]
 8006dc8:	bf18      	it	ne
 8006dca:	2300      	movne	r3, #0
 8006dcc:	eba6 0807 	sub.w	r8, r6, r7
 8006dd0:	608b      	str	r3, [r1, #8]
 8006dd2:	f1b8 0f00 	cmp.w	r8, #0
 8006dd6:	dd9c      	ble.n	8006d12 <__sflush_r+0x1a>
 8006dd8:	6a21      	ldr	r1, [r4, #32]
 8006dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ddc:	4643      	mov	r3, r8
 8006dde:	463a      	mov	r2, r7
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b0      	blx	r6
 8006de4:	2800      	cmp	r0, #0
 8006de6:	dc06      	bgt.n	8006df6 <__sflush_r+0xfe>
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df4:	e78e      	b.n	8006d14 <__sflush_r+0x1c>
 8006df6:	4407      	add	r7, r0
 8006df8:	eba8 0800 	sub.w	r8, r8, r0
 8006dfc:	e7e9      	b.n	8006dd2 <__sflush_r+0xda>
 8006dfe:	bf00      	nop
 8006e00:	dfbffffe 	.word	0xdfbffffe

08006e04 <_fflush_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	690b      	ldr	r3, [r1, #16]
 8006e08:	4605      	mov	r5, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b913      	cbnz	r3, 8006e14 <_fflush_r+0x10>
 8006e0e:	2500      	movs	r5, #0
 8006e10:	4628      	mov	r0, r5
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	b118      	cbz	r0, 8006e1e <_fflush_r+0x1a>
 8006e16:	6a03      	ldr	r3, [r0, #32]
 8006e18:	b90b      	cbnz	r3, 8006e1e <_fflush_r+0x1a>
 8006e1a:	f7ff f9bf 	bl	800619c <__sinit>
 8006e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0f3      	beq.n	8006e0e <_fflush_r+0xa>
 8006e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e28:	07d0      	lsls	r0, r2, #31
 8006e2a:	d404      	bmi.n	8006e36 <_fflush_r+0x32>
 8006e2c:	0599      	lsls	r1, r3, #22
 8006e2e:	d402      	bmi.n	8006e36 <_fflush_r+0x32>
 8006e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e32:	f7ff fa92 	bl	800635a <__retarget_lock_acquire_recursive>
 8006e36:	4628      	mov	r0, r5
 8006e38:	4621      	mov	r1, r4
 8006e3a:	f7ff ff5d 	bl	8006cf8 <__sflush_r>
 8006e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e40:	07da      	lsls	r2, r3, #31
 8006e42:	4605      	mov	r5, r0
 8006e44:	d4e4      	bmi.n	8006e10 <_fflush_r+0xc>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	059b      	lsls	r3, r3, #22
 8006e4a:	d4e1      	bmi.n	8006e10 <_fflush_r+0xc>
 8006e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e4e:	f7ff fa85 	bl	800635c <__retarget_lock_release_recursive>
 8006e52:	e7dd      	b.n	8006e10 <_fflush_r+0xc>

08006e54 <__malloc_lock>:
 8006e54:	4801      	ldr	r0, [pc, #4]	; (8006e5c <__malloc_lock+0x8>)
 8006e56:	f7ff ba80 	b.w	800635a <__retarget_lock_acquire_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	20000310 	.word	0x20000310

08006e60 <__malloc_unlock>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__malloc_unlock+0x8>)
 8006e62:	f7ff ba7b 	b.w	800635c <__retarget_lock_release_recursive>
 8006e66:	bf00      	nop
 8006e68:	20000310 	.word	0x20000310

08006e6c <__sread>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	460c      	mov	r4, r1
 8006e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e74:	f000 f9f6 	bl	8007264 <_read_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	bfab      	itete	ge
 8006e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e80:	181b      	addge	r3, r3, r0
 8006e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e86:	bfac      	ite	ge
 8006e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e8a:	81a3      	strhlt	r3, [r4, #12]
 8006e8c:	bd10      	pop	{r4, pc}

08006e8e <__swrite>:
 8006e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e92:	461f      	mov	r7, r3
 8006e94:	898b      	ldrh	r3, [r1, #12]
 8006e96:	05db      	lsls	r3, r3, #23
 8006e98:	4605      	mov	r5, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	d505      	bpl.n	8006eac <__swrite+0x1e>
 8006ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f000 f9ca 	bl	8007240 <_lseek_r>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	4632      	mov	r2, r6
 8006eba:	463b      	mov	r3, r7
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec2:	f000 b9f1 	b.w	80072a8 <_write_r>

08006ec6 <__sseek>:
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	460c      	mov	r4, r1
 8006eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ece:	f000 f9b7 	bl	8007240 <_lseek_r>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	bf15      	itete	ne
 8006ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ee2:	81a3      	strheq	r3, [r4, #12]
 8006ee4:	bf18      	it	ne
 8006ee6:	81a3      	strhne	r3, [r4, #12]
 8006ee8:	bd10      	pop	{r4, pc}

08006eea <__sclose>:
 8006eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eee:	f000 b975 	b.w	80071dc <_close_r>

08006ef2 <_realloc_r>:
 8006ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	4614      	mov	r4, r2
 8006efa:	460e      	mov	r6, r1
 8006efc:	b921      	cbnz	r1, 8006f08 <_realloc_r+0x16>
 8006efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	4611      	mov	r1, r2
 8006f04:	f7ff bce8 	b.w	80068d8 <_malloc_r>
 8006f08:	b92a      	cbnz	r2, 8006f16 <_realloc_r+0x24>
 8006f0a:	f000 f9ed 	bl	80072e8 <_free_r>
 8006f0e:	4625      	mov	r5, r4
 8006f10:	4628      	mov	r0, r5
 8006f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f16:	f000 fa33 	bl	8007380 <_malloc_usable_size_r>
 8006f1a:	4284      	cmp	r4, r0
 8006f1c:	4607      	mov	r7, r0
 8006f1e:	d802      	bhi.n	8006f26 <_realloc_r+0x34>
 8006f20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f24:	d812      	bhi.n	8006f4c <_realloc_r+0x5a>
 8006f26:	4621      	mov	r1, r4
 8006f28:	4640      	mov	r0, r8
 8006f2a:	f7ff fcd5 	bl	80068d8 <_malloc_r>
 8006f2e:	4605      	mov	r5, r0
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d0ed      	beq.n	8006f10 <_realloc_r+0x1e>
 8006f34:	42bc      	cmp	r4, r7
 8006f36:	4622      	mov	r2, r4
 8006f38:	4631      	mov	r1, r6
 8006f3a:	bf28      	it	cs
 8006f3c:	463a      	movcs	r2, r7
 8006f3e:	f000 f9c5 	bl	80072cc <memcpy>
 8006f42:	4631      	mov	r1, r6
 8006f44:	4640      	mov	r0, r8
 8006f46:	f000 f9cf 	bl	80072e8 <_free_r>
 8006f4a:	e7e1      	b.n	8006f10 <_realloc_r+0x1e>
 8006f4c:	4635      	mov	r5, r6
 8006f4e:	e7df      	b.n	8006f10 <_realloc_r+0x1e>

08006f50 <__swbuf_r>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	460e      	mov	r6, r1
 8006f54:	4614      	mov	r4, r2
 8006f56:	4605      	mov	r5, r0
 8006f58:	b118      	cbz	r0, 8006f62 <__swbuf_r+0x12>
 8006f5a:	6a03      	ldr	r3, [r0, #32]
 8006f5c:	b90b      	cbnz	r3, 8006f62 <__swbuf_r+0x12>
 8006f5e:	f7ff f91d 	bl	800619c <__sinit>
 8006f62:	69a3      	ldr	r3, [r4, #24]
 8006f64:	60a3      	str	r3, [r4, #8]
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	071a      	lsls	r2, r3, #28
 8006f6a:	d525      	bpl.n	8006fb8 <__swbuf_r+0x68>
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	b31b      	cbz	r3, 8006fb8 <__swbuf_r+0x68>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	6922      	ldr	r2, [r4, #16]
 8006f74:	1a98      	subs	r0, r3, r2
 8006f76:	6963      	ldr	r3, [r4, #20]
 8006f78:	b2f6      	uxtb	r6, r6
 8006f7a:	4283      	cmp	r3, r0
 8006f7c:	4637      	mov	r7, r6
 8006f7e:	dc04      	bgt.n	8006f8a <__swbuf_r+0x3a>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f7ff ff3e 	bl	8006e04 <_fflush_r>
 8006f88:	b9e0      	cbnz	r0, 8006fc4 <__swbuf_r+0x74>
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	60a3      	str	r3, [r4, #8]
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	6022      	str	r2, [r4, #0]
 8006f96:	701e      	strb	r6, [r3, #0]
 8006f98:	6962      	ldr	r2, [r4, #20]
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d004      	beq.n	8006faa <__swbuf_r+0x5a>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	07db      	lsls	r3, r3, #31
 8006fa4:	d506      	bpl.n	8006fb4 <__swbuf_r+0x64>
 8006fa6:	2e0a      	cmp	r6, #10
 8006fa8:	d104      	bne.n	8006fb4 <__swbuf_r+0x64>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4628      	mov	r0, r5
 8006fae:	f7ff ff29 	bl	8006e04 <_fflush_r>
 8006fb2:	b938      	cbnz	r0, 8006fc4 <__swbuf_r+0x74>
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 f806 	bl	8006fcc <__swsetup_r>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d0d5      	beq.n	8006f70 <__swbuf_r+0x20>
 8006fc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006fc8:	e7f4      	b.n	8006fb4 <__swbuf_r+0x64>
	...

08006fcc <__swsetup_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <__swsetup_r+0xac>)
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	b118      	cbz	r0, 8006fe0 <__swsetup_r+0x14>
 8006fd8:	6a03      	ldr	r3, [r0, #32]
 8006fda:	b90b      	cbnz	r3, 8006fe0 <__swsetup_r+0x14>
 8006fdc:	f7ff f8de 	bl	800619c <__sinit>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fe6:	0718      	lsls	r0, r3, #28
 8006fe8:	d422      	bmi.n	8007030 <__swsetup_r+0x64>
 8006fea:	06d9      	lsls	r1, r3, #27
 8006fec:	d407      	bmi.n	8006ffe <__swsetup_r+0x32>
 8006fee:	2309      	movs	r3, #9
 8006ff0:	602b      	str	r3, [r5, #0]
 8006ff2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ffc:	e034      	b.n	8007068 <__swsetup_r+0x9c>
 8006ffe:	0758      	lsls	r0, r3, #29
 8007000:	d512      	bpl.n	8007028 <__swsetup_r+0x5c>
 8007002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007004:	b141      	cbz	r1, 8007018 <__swsetup_r+0x4c>
 8007006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800700a:	4299      	cmp	r1, r3
 800700c:	d002      	beq.n	8007014 <__swsetup_r+0x48>
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f96a 	bl	80072e8 <_free_r>
 8007014:	2300      	movs	r3, #0
 8007016:	6363      	str	r3, [r4, #52]	; 0x34
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	2300      	movs	r3, #0
 8007022:	6063      	str	r3, [r4, #4]
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	6023      	str	r3, [r4, #0]
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	f043 0308 	orr.w	r3, r3, #8
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	b94b      	cbnz	r3, 8007048 <__swsetup_r+0x7c>
 8007034:	89a3      	ldrh	r3, [r4, #12]
 8007036:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800703a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800703e:	d003      	beq.n	8007048 <__swsetup_r+0x7c>
 8007040:	4621      	mov	r1, r4
 8007042:	4628      	mov	r0, r5
 8007044:	f000 f840 	bl	80070c8 <__smakebuf_r>
 8007048:	89a0      	ldrh	r0, [r4, #12]
 800704a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800704e:	f010 0301 	ands.w	r3, r0, #1
 8007052:	d00a      	beq.n	800706a <__swsetup_r+0x9e>
 8007054:	2300      	movs	r3, #0
 8007056:	60a3      	str	r3, [r4, #8]
 8007058:	6963      	ldr	r3, [r4, #20]
 800705a:	425b      	negs	r3, r3
 800705c:	61a3      	str	r3, [r4, #24]
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	b943      	cbnz	r3, 8007074 <__swsetup_r+0xa8>
 8007062:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007066:	d1c4      	bne.n	8006ff2 <__swsetup_r+0x26>
 8007068:	bd38      	pop	{r3, r4, r5, pc}
 800706a:	0781      	lsls	r1, r0, #30
 800706c:	bf58      	it	pl
 800706e:	6963      	ldrpl	r3, [r4, #20]
 8007070:	60a3      	str	r3, [r4, #8]
 8007072:	e7f4      	b.n	800705e <__swsetup_r+0x92>
 8007074:	2000      	movs	r0, #0
 8007076:	e7f7      	b.n	8007068 <__swsetup_r+0x9c>
 8007078:	20000078 	.word	0x20000078

0800707c <__swhatbuf_r>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	460c      	mov	r4, r1
 8007080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007084:	2900      	cmp	r1, #0
 8007086:	b096      	sub	sp, #88	; 0x58
 8007088:	4615      	mov	r5, r2
 800708a:	461e      	mov	r6, r3
 800708c:	da0d      	bge.n	80070aa <__swhatbuf_r+0x2e>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007094:	f04f 0100 	mov.w	r1, #0
 8007098:	bf0c      	ite	eq
 800709a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800709e:	2340      	movne	r3, #64	; 0x40
 80070a0:	2000      	movs	r0, #0
 80070a2:	6031      	str	r1, [r6, #0]
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	b016      	add	sp, #88	; 0x58
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	466a      	mov	r2, sp
 80070ac:	f000 f8a6 	bl	80071fc <_fstat_r>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	dbec      	blt.n	800708e <__swhatbuf_r+0x12>
 80070b4:	9901      	ldr	r1, [sp, #4]
 80070b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80070ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80070be:	4259      	negs	r1, r3
 80070c0:	4159      	adcs	r1, r3
 80070c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c6:	e7eb      	b.n	80070a0 <__swhatbuf_r+0x24>

080070c8 <__smakebuf_r>:
 80070c8:	898b      	ldrh	r3, [r1, #12]
 80070ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070cc:	079d      	lsls	r5, r3, #30
 80070ce:	4606      	mov	r6, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	d507      	bpl.n	80070e4 <__smakebuf_r+0x1c>
 80070d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	2301      	movs	r3, #1
 80070de:	6163      	str	r3, [r4, #20]
 80070e0:	b002      	add	sp, #8
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	ab01      	add	r3, sp, #4
 80070e6:	466a      	mov	r2, sp
 80070e8:	f7ff ffc8 	bl	800707c <__swhatbuf_r>
 80070ec:	9900      	ldr	r1, [sp, #0]
 80070ee:	4605      	mov	r5, r0
 80070f0:	4630      	mov	r0, r6
 80070f2:	f7ff fbf1 	bl	80068d8 <_malloc_r>
 80070f6:	b948      	cbnz	r0, 800710c <__smakebuf_r+0x44>
 80070f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fc:	059a      	lsls	r2, r3, #22
 80070fe:	d4ef      	bmi.n	80070e0 <__smakebuf_r+0x18>
 8007100:	f023 0303 	bic.w	r3, r3, #3
 8007104:	f043 0302 	orr.w	r3, r3, #2
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	e7e3      	b.n	80070d4 <__smakebuf_r+0xc>
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	6020      	str	r0, [r4, #0]
 8007110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	9b00      	ldr	r3, [sp, #0]
 8007118:	6163      	str	r3, [r4, #20]
 800711a:	9b01      	ldr	r3, [sp, #4]
 800711c:	6120      	str	r0, [r4, #16]
 800711e:	b15b      	cbz	r3, 8007138 <__smakebuf_r+0x70>
 8007120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007124:	4630      	mov	r0, r6
 8007126:	f000 f87b 	bl	8007220 <_isatty_r>
 800712a:	b128      	cbz	r0, 8007138 <__smakebuf_r+0x70>
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	f043 0301 	orr.w	r3, r3, #1
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	431d      	orrs	r5, r3
 800713c:	81a5      	strh	r5, [r4, #12]
 800713e:	e7cf      	b.n	80070e0 <__smakebuf_r+0x18>

08007140 <_putc_r>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	460d      	mov	r5, r1
 8007144:	4614      	mov	r4, r2
 8007146:	4606      	mov	r6, r0
 8007148:	b118      	cbz	r0, 8007152 <_putc_r+0x12>
 800714a:	6a03      	ldr	r3, [r0, #32]
 800714c:	b90b      	cbnz	r3, 8007152 <_putc_r+0x12>
 800714e:	f7ff f825 	bl	800619c <__sinit>
 8007152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007154:	07d8      	lsls	r0, r3, #31
 8007156:	d405      	bmi.n	8007164 <_putc_r+0x24>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	0599      	lsls	r1, r3, #22
 800715c:	d402      	bmi.n	8007164 <_putc_r+0x24>
 800715e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007160:	f7ff f8fb 	bl	800635a <__retarget_lock_acquire_recursive>
 8007164:	68a3      	ldr	r3, [r4, #8]
 8007166:	3b01      	subs	r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	60a3      	str	r3, [r4, #8]
 800716c:	da05      	bge.n	800717a <_putc_r+0x3a>
 800716e:	69a2      	ldr	r2, [r4, #24]
 8007170:	4293      	cmp	r3, r2
 8007172:	db12      	blt.n	800719a <_putc_r+0x5a>
 8007174:	b2eb      	uxtb	r3, r5
 8007176:	2b0a      	cmp	r3, #10
 8007178:	d00f      	beq.n	800719a <_putc_r+0x5a>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	701d      	strb	r5, [r3, #0]
 8007182:	b2ed      	uxtb	r5, r5
 8007184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007186:	07da      	lsls	r2, r3, #31
 8007188:	d405      	bmi.n	8007196 <_putc_r+0x56>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	059b      	lsls	r3, r3, #22
 800718e:	d402      	bmi.n	8007196 <_putc_r+0x56>
 8007190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007192:	f7ff f8e3 	bl	800635c <__retarget_lock_release_recursive>
 8007196:	4628      	mov	r0, r5
 8007198:	bd70      	pop	{r4, r5, r6, pc}
 800719a:	4629      	mov	r1, r5
 800719c:	4622      	mov	r2, r4
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff fed6 	bl	8006f50 <__swbuf_r>
 80071a4:	4605      	mov	r5, r0
 80071a6:	e7ed      	b.n	8007184 <_putc_r+0x44>

080071a8 <memmove>:
 80071a8:	4288      	cmp	r0, r1
 80071aa:	b510      	push	{r4, lr}
 80071ac:	eb01 0402 	add.w	r4, r1, r2
 80071b0:	d902      	bls.n	80071b8 <memmove+0x10>
 80071b2:	4284      	cmp	r4, r0
 80071b4:	4623      	mov	r3, r4
 80071b6:	d807      	bhi.n	80071c8 <memmove+0x20>
 80071b8:	1e43      	subs	r3, r0, #1
 80071ba:	42a1      	cmp	r1, r4
 80071bc:	d008      	beq.n	80071d0 <memmove+0x28>
 80071be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071c6:	e7f8      	b.n	80071ba <memmove+0x12>
 80071c8:	4402      	add	r2, r0
 80071ca:	4601      	mov	r1, r0
 80071cc:	428a      	cmp	r2, r1
 80071ce:	d100      	bne.n	80071d2 <memmove+0x2a>
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071da:	e7f7      	b.n	80071cc <memmove+0x24>

080071dc <_close_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4d06      	ldr	r5, [pc, #24]	; (80071f8 <_close_r+0x1c>)
 80071e0:	2300      	movs	r3, #0
 80071e2:	4604      	mov	r4, r0
 80071e4:	4608      	mov	r0, r1
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	f7fb fb1b 	bl	8002822 <_close>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_close_r+0x1a>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_close_r+0x1a>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	2000031c 	.word	0x2000031c

080071fc <_fstat_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d07      	ldr	r5, [pc, #28]	; (800721c <_fstat_r+0x20>)
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	4611      	mov	r1, r2
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	f7fb fb16 	bl	800283a <_fstat>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	d102      	bne.n	8007218 <_fstat_r+0x1c>
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	b103      	cbz	r3, 8007218 <_fstat_r+0x1c>
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	bd38      	pop	{r3, r4, r5, pc}
 800721a:	bf00      	nop
 800721c:	2000031c 	.word	0x2000031c

08007220 <_isatty_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d06      	ldr	r5, [pc, #24]	; (800723c <_isatty_r+0x1c>)
 8007224:	2300      	movs	r3, #0
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	f7fb fb15 	bl	800285a <_isatty>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_isatty_r+0x1a>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_isatty_r+0x1a>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	2000031c 	.word	0x2000031c

08007240 <_lseek_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d07      	ldr	r5, [pc, #28]	; (8007260 <_lseek_r+0x20>)
 8007244:	4604      	mov	r4, r0
 8007246:	4608      	mov	r0, r1
 8007248:	4611      	mov	r1, r2
 800724a:	2200      	movs	r2, #0
 800724c:	602a      	str	r2, [r5, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f7fb fb0e 	bl	8002870 <_lseek>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_lseek_r+0x1e>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_lseek_r+0x1e>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	2000031c 	.word	0x2000031c

08007264 <_read_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	; (8007284 <_read_r+0x20>)
 8007268:	4604      	mov	r4, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7fb fab8 	bl	80027e8 <_read>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_read_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_read_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	2000031c 	.word	0x2000031c

08007288 <_sbrk_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d06      	ldr	r5, [pc, #24]	; (80072a4 <_sbrk_r+0x1c>)
 800728c:	2300      	movs	r3, #0
 800728e:	4604      	mov	r4, r0
 8007290:	4608      	mov	r0, r1
 8007292:	602b      	str	r3, [r5, #0]
 8007294:	f7fb fafa 	bl	800288c <_sbrk>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_sbrk_r+0x1a>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_sbrk_r+0x1a>
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	2000031c 	.word	0x2000031c

080072a8 <_write_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4d07      	ldr	r5, [pc, #28]	; (80072c8 <_write_r+0x20>)
 80072ac:	4604      	mov	r4, r0
 80072ae:	4608      	mov	r0, r1
 80072b0:	4611      	mov	r1, r2
 80072b2:	2200      	movs	r2, #0
 80072b4:	602a      	str	r2, [r5, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f7fb f932 	bl	8002520 <_write>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_write_r+0x1e>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_write_r+0x1e>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	2000031c 	.word	0x2000031c

080072cc <memcpy>:
 80072cc:	440a      	add	r2, r1
 80072ce:	4291      	cmp	r1, r2
 80072d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80072d4:	d100      	bne.n	80072d8 <memcpy+0xc>
 80072d6:	4770      	bx	lr
 80072d8:	b510      	push	{r4, lr}
 80072da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e2:	4291      	cmp	r1, r2
 80072e4:	d1f9      	bne.n	80072da <memcpy+0xe>
 80072e6:	bd10      	pop	{r4, pc}

080072e8 <_free_r>:
 80072e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ea:	2900      	cmp	r1, #0
 80072ec:	d044      	beq.n	8007378 <_free_r+0x90>
 80072ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072f2:	9001      	str	r0, [sp, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f1a1 0404 	sub.w	r4, r1, #4
 80072fa:	bfb8      	it	lt
 80072fc:	18e4      	addlt	r4, r4, r3
 80072fe:	f7ff fda9 	bl	8006e54 <__malloc_lock>
 8007302:	4a1e      	ldr	r2, [pc, #120]	; (800737c <_free_r+0x94>)
 8007304:	9801      	ldr	r0, [sp, #4]
 8007306:	6813      	ldr	r3, [r2, #0]
 8007308:	b933      	cbnz	r3, 8007318 <_free_r+0x30>
 800730a:	6063      	str	r3, [r4, #4]
 800730c:	6014      	str	r4, [r2, #0]
 800730e:	b003      	add	sp, #12
 8007310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007314:	f7ff bda4 	b.w	8006e60 <__malloc_unlock>
 8007318:	42a3      	cmp	r3, r4
 800731a:	d908      	bls.n	800732e <_free_r+0x46>
 800731c:	6825      	ldr	r5, [r4, #0]
 800731e:	1961      	adds	r1, r4, r5
 8007320:	428b      	cmp	r3, r1
 8007322:	bf01      	itttt	eq
 8007324:	6819      	ldreq	r1, [r3, #0]
 8007326:	685b      	ldreq	r3, [r3, #4]
 8007328:	1949      	addeq	r1, r1, r5
 800732a:	6021      	streq	r1, [r4, #0]
 800732c:	e7ed      	b.n	800730a <_free_r+0x22>
 800732e:	461a      	mov	r2, r3
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	b10b      	cbz	r3, 8007338 <_free_r+0x50>
 8007334:	42a3      	cmp	r3, r4
 8007336:	d9fa      	bls.n	800732e <_free_r+0x46>
 8007338:	6811      	ldr	r1, [r2, #0]
 800733a:	1855      	adds	r5, r2, r1
 800733c:	42a5      	cmp	r5, r4
 800733e:	d10b      	bne.n	8007358 <_free_r+0x70>
 8007340:	6824      	ldr	r4, [r4, #0]
 8007342:	4421      	add	r1, r4
 8007344:	1854      	adds	r4, r2, r1
 8007346:	42a3      	cmp	r3, r4
 8007348:	6011      	str	r1, [r2, #0]
 800734a:	d1e0      	bne.n	800730e <_free_r+0x26>
 800734c:	681c      	ldr	r4, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	6053      	str	r3, [r2, #4]
 8007352:	440c      	add	r4, r1
 8007354:	6014      	str	r4, [r2, #0]
 8007356:	e7da      	b.n	800730e <_free_r+0x26>
 8007358:	d902      	bls.n	8007360 <_free_r+0x78>
 800735a:	230c      	movs	r3, #12
 800735c:	6003      	str	r3, [r0, #0]
 800735e:	e7d6      	b.n	800730e <_free_r+0x26>
 8007360:	6825      	ldr	r5, [r4, #0]
 8007362:	1961      	adds	r1, r4, r5
 8007364:	428b      	cmp	r3, r1
 8007366:	bf04      	itt	eq
 8007368:	6819      	ldreq	r1, [r3, #0]
 800736a:	685b      	ldreq	r3, [r3, #4]
 800736c:	6063      	str	r3, [r4, #4]
 800736e:	bf04      	itt	eq
 8007370:	1949      	addeq	r1, r1, r5
 8007372:	6021      	streq	r1, [r4, #0]
 8007374:	6054      	str	r4, [r2, #4]
 8007376:	e7ca      	b.n	800730e <_free_r+0x26>
 8007378:	b003      	add	sp, #12
 800737a:	bd30      	pop	{r4, r5, pc}
 800737c:	20000314 	.word	0x20000314

08007380 <_malloc_usable_size_r>:
 8007380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007384:	1f18      	subs	r0, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	bfbc      	itt	lt
 800738a:	580b      	ldrlt	r3, [r1, r0]
 800738c:	18c0      	addlt	r0, r0, r3
 800738e:	4770      	bx	lr

08007390 <_init>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr

0800739c <_fini>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	bf00      	nop
 80073a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a2:	bc08      	pop	{r3}
 80073a4:	469e      	mov	lr, r3
 80073a6:	4770      	bx	lr
