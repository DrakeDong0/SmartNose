
ECE_198_Cplus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004efc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005160  08005160  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005168  08005168  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800516c  0800516c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000068  080051d8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080051d8  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecd6  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002341  00000000  00000000  0002edb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  000310f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3a  00000000  00000000  00031f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a7e  00000000  00000000  00032a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010718  00000000  00000000  0004b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b739  00000000  00000000  0005bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004634  00000000  00000000  000f736c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000fb9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005084 	.word	0x08005084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005084 	.word	0x08005084

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800059a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800059e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80005a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005a6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005aa:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005ae:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f80e 	bl	80005e2 <Lcd_init>

	return lcd;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	461d      	mov	r5, r3
 80005ca:	f107 0410 	add.w	r4, r7, #16
 80005ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005d6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005da:	68f8      	ldr	r0, [r7, #12]
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}

080005e2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7d9b      	ldrb	r3, [r3, #22]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10c      	bne.n	800060c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005f2:	2133      	movs	r1, #51	; 0x33
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f87b 	bl	80006f0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005fa:	2132      	movs	r1, #50	; 0x32
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f877 	bl	80006f0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000602:	2128      	movs	r1, #40	; 0x28
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f873 	bl	80006f0 <lcd_write_command>
 800060a:	e003      	b.n	8000614 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800060c:	2138      	movs	r1, #56	; 0x38
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f86e 	bl	80006f0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000614:	2101      	movs	r1, #1
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f86a 	bl	80006f0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800061c:	210c      	movs	r1, #12
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f866 	bl	80006f0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000624:	2106      	movs	r1, #6
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f862 	bl	80006f0 <lcd_write_command>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	4906      	ldr	r1, [pc, #24]	; (8000660 <Lcd_int+0x2c>)
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fc5e 	bl	8003f08 <siprintf>

	Lcd_string(lcd, buffer);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f806 	bl	8000664 <Lcd_string>
}
 8000658:	bf00      	nop
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	0800509c 	.word	0x0800509c

08000664 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	e00a      	b.n	800068a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f864 	bl	800074c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	3301      	adds	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	7bfc      	ldrb	r4, [r7, #15]
 800068c:	6838      	ldr	r0, [r7, #0]
 800068e:	f7ff fda7 	bl	80001e0 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	429c      	cmp	r4, r3
 8000696:	d3ed      	bcc.n	8000674 <Lcd_string+0x10>
	}
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd90      	pop	{r4, r7, pc}
	...

080006a4 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
 80006b0:	4613      	mov	r3, r2
 80006b2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <Lcd_cursor+0x30>)
 80006b8:	5cd2      	ldrb	r2, [r2, r3]
 80006ba:	78bb      	ldrb	r3, [r7, #2]
 80006bc:	4413      	add	r3, r2
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	3b80      	subs	r3, #128	; 0x80
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f812 	bl	80006f0 <lcd_write_command>
	#endif
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08005108 	.word	0x08005108

080006d8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80006e0:	2101      	movs	r1, #1
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 f804 	bl	80006f0 <lcd_write_command>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6898      	ldr	r0, [r3, #8]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	899b      	ldrh	r3, [r3, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	f002 f94c 	bl	80029a4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7d9b      	ldrb	r3, [r3, #22]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d111      	bne.n	8000738 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	091b      	lsrs	r3, r3, #4
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2204      	movs	r2, #4
 800071c:	4619      	mov	r1, r3
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f842 	bl	80007a8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2204      	movs	r2, #4
 800072e:	4619      	mov	r1, r3
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 f839 	bl	80007a8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000736:	e005      	b.n	8000744 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	2208      	movs	r2, #8
 800073c:	4619      	mov	r1, r3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 f832 	bl	80007a8 <lcd_write>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6898      	ldr	r0, [r3, #8]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	899b      	ldrh	r3, [r3, #12]
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	f002 f91e 	bl	80029a4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7d9b      	ldrb	r3, [r3, #22]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d111      	bne.n	8000794 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	091b      	lsrs	r3, r3, #4
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2204      	movs	r2, #4
 8000778:	4619      	mov	r1, r3
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f814 	bl	80007a8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2204      	movs	r2, #4
 800078a:	4619      	mov	r1, r3
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f80b 	bl	80007a8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000792:	e005      	b.n	80007a0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	2208      	movs	r2, #8
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f804 	bl	80007a8 <lcd_write>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
 80007b4:	4613      	mov	r3, r2
 80007b6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	e019      	b.n	80007f2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	8819      	ldrh	r1, [r3, #0]
 80007d6:	78fa      	ldrb	r2, [r7, #3]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	fa42 f303 	asr.w	r3, r2, r3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
 80007e8:	f002 f8dc 	bl	80029a4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	3301      	adds	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	78bb      	ldrb	r3, [r7, #2]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3e1      	bcc.n	80007be <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6918      	ldr	r0, [r3, #16]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	8a9b      	ldrh	r3, [r3, #20]
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	f002 f8cd 	bl	80029a4 <HAL_GPIO_WritePin>
	DELAY(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 ff2c 	bl	8001668 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6918      	ldr	r0, [r3, #16]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	8a9b      	ldrh	r3, [r3, #20]
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	f002 f8c2 	bl	80029a4 <HAL_GPIO_WritePin>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000830:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000834:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	2b00      	cmp	r3, #0
 800083e:	d013      	beq.n	8000868 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000844:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000848:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00b      	beq.n	8000868 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000850:	e000      	b.n	8000854 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000852:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000854:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f9      	beq.n	8000852 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800085e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <ADC_Select_CH0.0>:
  MX_TIM2_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  void ADC_Select_CH0 (void)
  {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	f8c7 c004 	str.w	ip, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_0;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <ADC_Select_CH0.0+0x44>)
 80008a4:	f001 f8c8 	bl	8001a38 <HAL_ADC_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <ADC_Select_CH0.0+0x3a>
  	  {
  	    Error_Handler();
 80008ae:	f000 fc5d 	bl	800116c <Error_Handler>
  	  }
  }
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000084 	.word	0x20000084

080008c0 <main>:
{
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b0ac      	sub	sp, #176	; 0xb0
 80008c4:	af04      	add	r7, sp, #16
int main(void)
 80008c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_Init();
 80008cc:	f000 fe5a 	bl	8001584 <HAL_Init>
  SystemClock_Config();
 80008d0:	f000 fa2e 	bl	8000d30 <SystemClock_Config>
  MX_GPIO_Init();
 80008d4:	f000 fb9e 	bl	8001014 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d8:	f000 fb7c 	bl	8000fd4 <MX_DMA_Init>
  MX_TIM2_Init();
 80008dc:	f000 fb04 	bl	8000ee8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80008e0:	f000 fa90 	bl	8000e04 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80008e4:	f000 fb4c 	bl	8000f80 <MX_USART2_UART_Init>
	  free(old_array);
	  old_array = NULL;
  }


  const int max_time = 10000000;
 80008e8:	4bbd      	ldr	r3, [pc, #756]	; (8000be0 <main+0x320>)
 80008ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int time = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  bool clock = true;
 80008f4:	2301      	movs	r3, #1
 80008f6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
  int button = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int cap1 = 100;
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  int cap2 = 100;
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  int cap3 = 100;
 800090c:	2364      	movs	r3, #100	; 0x64
 800090e:	67fb      	str	r3, [r7, #124]	; 0x7c
  int mq4size = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	67bb      	str	r3, [r7, #120]	; 0x78
  int mq135size = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	677b      	str	r3, [r7, #116]	; 0x74
  int mq136size = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	673b      	str	r3, [r7, #112]	; 0x70
  int *mq4data =(int *)malloc(cap1 * sizeof(int));
 800091c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4618      	mov	r0, r3
 8000924:	f003 fa34 	bl	8003d90 <malloc>
 8000928:	4603      	mov	r3, r0
 800092a:	66fb      	str	r3, [r7, #108]	; 0x6c
  int *mq135data =(int *)malloc(cap2 * sizeof(int));
 800092c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4618      	mov	r0, r3
 8000934:	f003 fa2c 	bl	8003d90 <malloc>
 8000938:	4603      	mov	r3, r0
 800093a:	66bb      	str	r3, [r7, #104]	; 0x68
  int *mq136data =(int *)malloc(cap3 * sizeof(int));
 800093c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4618      	mov	r0, r3
 8000942:	f003 fa25 	bl	8003d90 <malloc>
 8000946:	4603      	mov	r3, r0
 8000948:	667b      	str	r3, [r7, #100]	; 0x64
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 800094a:	4ba6      	ldr	r3, [pc, #664]	; (8000be4 <main+0x324>)
 800094c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000950:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000952:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 8000956:	4aa4      	ldr	r2, [pc, #656]	; (8000be8 <main+0x328>)
 8000958:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800095c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000960:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000964:	4638      	mov	r0, r7
 8000966:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800096a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800096e:	2300      	movs	r3, #0
 8000970:	9303      	str	r3, [sp, #12]
 8000972:	2310      	movs	r3, #16
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	4b9d      	ldr	r3, [pc, #628]	; (8000bec <main+0x32c>)
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	2320      	movs	r3, #32
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	4b9b      	ldr	r3, [pc, #620]	; (8000bec <main+0x32c>)
 8000980:	f7ff fe04 	bl	800058c <Lcd_create>
 8000984:	f107 041c 	add.w	r4, r7, #28
 8000988:	463d      	mov	r5, r7
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000992:	e884 0003 	stmia.w	r4, {r0, r1}
    Lcd_cursor(&lcd, 0,1);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2201      	movs	r2, #1
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe80 	bl	80006a4 <Lcd_cursor>
    Lcd_string(&lcd, "Sensors Warming Up!");
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4991      	ldr	r1, [pc, #580]	; (8000bf0 <main+0x330>)
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe5a 	bl	8000664 <Lcd_string>
      for ( int x = 3; x > 3 ; x-- )
 80009b0:	2303      	movs	r3, #3
 80009b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80009b6:	e016      	b.n	80009e6 <main+0x126>
      {
        Lcd_cursor(&lcd, 1,7);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	2207      	movs	r2, #7
 80009be:	2101      	movs	r1, #1
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe6f 	bl	80006a4 <Lcd_cursor>
        Lcd_int(&lcd, x);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe30 	bl	8000634 <Lcd_int>
        HAL_Delay (1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d8:	f000 fe46 	bl	8001668 <HAL_Delay>
      for ( int x = 3; x > 3 ; x-- )
 80009dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009e0:	3b01      	subs	r3, #1
 80009e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80009e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	dce4      	bgt.n	80009b8 <main+0xf8>
      }
      Lcd_clear(&lcd);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe70 	bl	80006d8 <Lcd_clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (clock)
 80009f8:	e0e8      	b.n	8000bcc <main+0x30c>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Lcd_clear(&lcd);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe6a 	bl	80006d8 <Lcd_clear>
	  Lcd_cursor(&lcd, 0,1);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe49 	bl	80006a4 <Lcd_cursor>
	  Lcd_int(&lcd, time);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe0a 	bl	8000634 <Lcd_int>
	  if (HAL_GPIO_ReadPin(SW_PORT, SW_PIN) != GPIO_PIN_SET)
 8000a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a24:	4873      	ldr	r0, [pc, #460]	; (8000bf4 <main+0x334>)
 8000a26:	f001 ffa5 	bl	8002974 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d010      	beq.n	8000a52 <main+0x192>

		  {
		   printf("OFF \n");
 8000a30:	4871      	ldr	r0, [pc, #452]	; (8000bf8 <main+0x338>)
 8000a32:	f003 fbb1 	bl	8004198 <puts>
		   if(button == 0){
 8000a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <main+0x186>

			button = 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000a44:	e005      	b.n	8000a52 <main+0x192>
		  }
		   else{
			   button = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			   printf("ON \n");
 8000a4c:	486b      	ldr	r0, [pc, #428]	; (8000bfc <main+0x33c>)
 8000a4e:	f003 fba3 	bl	8004198 <puts>
		   }
		  }

	   if(button == 1){
 8000a52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d105      	bne.n	8000a66 <main+0x1a6>
		   HAL_GPIO_WritePin(LED_PORT, LED_PIN,1);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	4868      	ldr	r0, [pc, #416]	; (8000c00 <main+0x340>)
 8000a60:	f001 ffa0 	bl	80029a4 <HAL_GPIO_WritePin>
 8000a64:	e004      	b.n	8000a70 <main+0x1b0>
	   }
	   else{
		  HAL_GPIO_WritePin(LED_PORT, LED_PIN,0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4865      	ldr	r0, [pc, #404]	; (8000c00 <main+0x340>)
 8000a6c:	f001 ff9a 	bl	80029a4 <HAL_GPIO_WritePin>

	   }
	  ADC_Select_CH0();//MQ4
 8000a70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a74:	469c      	mov	ip, r3
 8000a76:	f7ff feff 	bl	8000878 <ADC_Select_CH0.0>
	  HAL_ADC_Start(&hadc1);
 8000a7a:	4862      	ldr	r0, [pc, #392]	; (8000c04 <main+0x344>)
 8000a7c:	f000 fe5c 	bl	8001738 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000a80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a84:	485f      	ldr	r0, [pc, #380]	; (8000c04 <main+0x344>)
 8000a86:	f000 ff3e 	bl	8001906 <HAL_ADC_PollForConversion>
	  int x = HAL_ADC_GetValue(&hadc1);
 8000a8a:	485e      	ldr	r0, [pc, #376]	; (8000c04 <main+0x344>)
 8000a8c:	f000 ffc6 	bl	8001a1c <HAL_ADC_GetValue>
 8000a90:	4603      	mov	r3, r0
 8000a92:	663b      	str	r3, [r7, #96]	; 0x60
	  HAL_ADC_Stop(&hadc1);
 8000a94:	485b      	ldr	r0, [pc, #364]	; (8000c04 <main+0x344>)
 8000a96:	f000 ff03 	bl	80018a0 <HAL_ADC_Stop>
	  int mq4 = x + 750;
 8000a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a9c:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
 8000aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
	  insert(mq4data, mq4size, mq4);
 8000aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa6:	469c      	mov	ip, r3
 8000aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000aaa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000aac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000aae:	f000 f8f5 	bl	8000c9c <insert.3>
	  if(cap1 == mq4size){
 8000ab2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d107      	bne.n	8000acc <main+0x20c>
		  increase(mq4data, cap1);
 8000abc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac0:	469c      	mov	ip, r3
 8000ac2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000ac6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000ac8:	f000 f8ff 	bl	8000cca <increase.4>
	  }

	  ADC_Select_CH1();//MQ136
 8000acc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ad0:	469c      	mov	ip, r3
 8000ad2:	f000 f89b 	bl	8000c0c <ADC_Select_CH1.1>
	  HAL_ADC_Start(&hadc1);
 8000ad6:	484b      	ldr	r0, [pc, #300]	; (8000c04 <main+0x344>)
 8000ad8:	f000 fe2e 	bl	8001738 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ae0:	4848      	ldr	r0, [pc, #288]	; (8000c04 <main+0x344>)
 8000ae2:	f000 ff10 	bl	8001906 <HAL_ADC_PollForConversion>
	  int y = HAL_ADC_GetValue(&hadc1);
 8000ae6:	4847      	ldr	r0, [pc, #284]	; (8000c04 <main+0x344>)
 8000ae8:	f000 ff98 	bl	8001a1c <HAL_ADC_GetValue>
 8000aec:	4603      	mov	r3, r0
 8000aee:	65bb      	str	r3, [r7, #88]	; 0x58
	  HAL_ADC_Stop(&hadc1);
 8000af0:	4844      	ldr	r0, [pc, #272]	; (8000c04 <main+0x344>)
 8000af2:	f000 fed5 	bl	80018a0 <HAL_ADC_Stop>
	  int mq136 = y-405;
 8000af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000af8:	f2a3 1395 	subw	r3, r3, #405	; 0x195
 8000afc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if(mq136<0){
 8000b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	da04      	bge.n	8000b12 <main+0x252>
		  mq136 = mq136*(-1);
 8000b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b0c:	425b      	negs	r3, r3
 8000b0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  }
	  insert(mq136data, mq136size, mq136);
 8000b12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b16:	469c      	mov	ip, r3
 8000b18:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000b1c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000b1e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b20:	f000 f8bc 	bl	8000c9c <insert.3>
	  if(cap2 == mq136size){
 8000b24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d107      	bne.n	8000b3e <main+0x27e>
		  increase(mq136data, cap2);
 8000b2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b32:	469c      	mov	ip, r3
 8000b34:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000b38:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b3a:	f000 f8c6 	bl	8000cca <increase.4>
	  }
	  ADC_Select_CH4();//MQ135
 8000b3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b42:	469c      	mov	ip, r3
 8000b44:	f000 f886 	bl	8000c54 <ADC_Select_CH4.2>
	  HAL_ADC_Start(&hadc1);
 8000b48:	482e      	ldr	r0, [pc, #184]	; (8000c04 <main+0x344>)
 8000b4a:	f000 fdf5 	bl	8001738 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000b4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b52:	482c      	ldr	r0, [pc, #176]	; (8000c04 <main+0x344>)
 8000b54:	f000 fed7 	bl	8001906 <HAL_ADC_PollForConversion>
	  int z = HAL_ADC_GetValue(&hadc1);
 8000b58:	482a      	ldr	r0, [pc, #168]	; (8000c04 <main+0x344>)
 8000b5a:	f000 ff5f 	bl	8001a1c <HAL_ADC_GetValue>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	657b      	str	r3, [r7, #84]	; 0x54
	  int mq135 = z-250;
 8000b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b64:	3bfa      	subs	r3, #250	; 0xfa
 8000b66:	653b      	str	r3, [r7, #80]	; 0x50
	  insert(mq135data, mq135size, mq135);
 8000b68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b6c:	469c      	mov	ip, r3
 8000b6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b70:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000b72:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000b74:	f000 f892 	bl	8000c9c <insert.3>
	  if(cap3 == mq135size){
 8000b78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d106      	bne.n	8000b8e <main+0x2ce>
		  increase(mq135data, cap3);
 8000b80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b84:	469c      	mov	ip, r3
 8000b86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000b88:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000b8a:	f000 f89e 	bl	8000cca <increase.4>
	  }
//
//	  print(mq4data, mq4size);
//	  print(mq135data, mq135size);
//	  print(mq136data, mq136size);
	  HAL_ADC_Stop(&hadc1);
 8000b8e:	481d      	ldr	r0, [pc, #116]	; (8000c04 <main+0x344>)
 8000b90:	f000 fe86 	bl	80018a0 <HAL_ADC_Stop>

	  HAL_Delay (1000);
 8000b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b98:	f000 fd66 	bl	8001668 <HAL_Delay>
	  printf("MQ4: %d PPM | MQ136: %d PPM | MQ135: %d PPM \n", mq4, mq136, mq135);
 8000b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b9e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000ba2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000ba4:	4818      	ldr	r0, [pc, #96]	; (8000c08 <main+0x348>)
 8000ba6:	f003 fa91 	bl	80040cc <iprintf>

	  time+= 1000;
 8000baa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000bae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  if (time > (max_time-1000)){
 8000bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000bba:	f2a3 33e7 	subw	r3, r3, #999	; 0x3e7
 8000bbe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	db02      	blt.n	8000bcc <main+0x30c>
		  clock = false;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
  while (clock)
 8000bcc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f47f af12 	bne.w	80009fa <main+0x13a>
 8000bd6:	2300      	movs	r3, #0
	  }


  }
  /* USER CODE END 3 */
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	37a0      	adds	r7, #160	; 0xa0
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bdb0      	pop	{r4, r5, r7, pc}
 8000be0:	00989680 	.word	0x00989680
 8000be4:	080050f0 	.word	0x080050f0
 8000be8:	08005100 	.word	0x08005100
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	080050a0 	.word	0x080050a0
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	080050b4 	.word	0x080050b4
 8000bfc:	080050bc 	.word	0x080050bc
 8000c00:	40020000 	.word	0x40020000
 8000c04:	20000084 	.word	0x20000084
 8000c08:	080050c0 	.word	0x080050c0

08000c0c <ADC_Select_CH1.1>:
  {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	f8c7 c004 	str.w	ip, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  	  sConfig.Channel = ADC_CHANNEL_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <ADC_Select_CH1.1+0x44>)
 8000c38:	f000 fefe 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <ADC_Select_CH1.1+0x3a>
  	    Error_Handler();
 8000c42:	f000 fa93 	bl	800116c <Error_Handler>
  }
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000084 	.word	0x20000084

08000c54 <ADC_Select_CH4.2>:
  {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	f8c7 c004 	str.w	ip, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  	  sConfig.Channel = ADC_CHANNEL_1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
  	  sConfig.Rank = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000c74:	2305      	movs	r3, #5
 8000c76:	613b      	str	r3, [r7, #16]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <ADC_Select_CH4.2+0x44>)
 8000c80:	f000 feda 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <ADC_Select_CH4.2+0x3a>
  	    Error_Handler();
 8000c8a:	f000 fa6f 	bl	800116c <Error_Handler>
  }
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000084 	.word	0x20000084

08000c9c <insert.3>:
  void insert(int *array, int size, int insert){
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	f8c7 c000 	str.w	ip, [r7]
	  array[size] = insert;
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]
	  size++;
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
  }
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <increase.4>:
  void increase(int *array, int cap){
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b088      	sub	sp, #32
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	f8c7 c004 	str.w	ip, [r7, #4]
	  int old_cap = cap;
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	61bb      	str	r3, [r7, #24]
	  int* old_array = array;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	617b      	str	r3, [r7, #20]
	  cap = cap*2;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
	  array = (int *)malloc(cap * sizeof(int));
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 f850 	bl	8003d90 <malloc>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60fb      	str	r3, [r7, #12]
	  for(int k = 0; k < old_cap; k++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	e00c      	b.n	8000d14 <increase.4+0x4a>
	       array[k] = old_array[k];
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	441a      	add	r2, r3
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	68f9      	ldr	r1, [r7, #12]
 8000d08:	440b      	add	r3, r1
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	601a      	str	r2, [r3, #0]
	  for(int k = 0; k < old_cap; k++){
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3301      	adds	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbee      	blt.n	8000cfa <increase.4+0x30>
	  free(old_array);
 8000d1c:	6978      	ldr	r0, [r7, #20]
 8000d1e:	f003 f83f 	bl	8003da0 <free>
	  old_array = NULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  }
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	; 0x50
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2230      	movs	r2, #48	; 0x30
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fa32 	bl	80041a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <SystemClock_Config+0xcc>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <SystemClock_Config+0xcc>)
 8000d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <SystemClock_Config+0xcc>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <SystemClock_Config+0xd0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d7c:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <SystemClock_Config+0xd0>)
 8000d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <SystemClock_Config+0xd0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d90:	2302      	movs	r3, #2
 8000d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d94:	2301      	movs	r3, #1
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da4:	2308      	movs	r3, #8
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000da8:	2354      	movs	r3, #84	; 0x54
 8000daa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f107 0320 	add.w	r3, r7, #32
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fe31 	bl	8002a20 <HAL_RCC_OscConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dc4:	f000 f9d2 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc8:	230f      	movs	r3, #15
 8000dca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2102      	movs	r1, #2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 f893 	bl	8002f10 <HAL_RCC_ClockConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000df0:	f000 f9bc 	bl	800116c <Error_Handler>
  }
}
 8000df4:	bf00      	nop
 8000df6:	3750      	adds	r7, #80	; 0x50
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40007000 	.word	0x40007000

08000e04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e18:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <MX_ADC1_Init+0xdc>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e46:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4a:	4b24      	ldr	r3, [pc, #144]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e52:	2203      	movs	r2, #3
 8000e54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	481d      	ldr	r0, [pc, #116]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e66:	f000 fc23 	bl	80016b0 <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e70:	f000 f97c 	bl	800116c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4815      	ldr	r0, [pc, #84]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000e86:	f000 fdd7 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e90:	f000 f96c 	bl	800116c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000ea6:	f000 fdc7 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000eb0:	f000 f95c 	bl	800116c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_ADC1_Init+0xd8>)
 8000ec6:	f000 fdb7 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000ed0:	f000 f94c 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000084 	.word	0x20000084
 8000ee0:	40012000 	.word	0x40012000
 8000ee4:	0f000001 	.word	0x0f000001

08000ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f2c:	4813      	ldr	r0, [pc, #76]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f2e:	f002 f9cf 	bl	80032d0 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f38:	f000 f918 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f4a:	f002 fa10 	bl	800336e <HAL_TIM_ConfigClockSource>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 f90a 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f66:	f002 fbe3 	bl	8003730 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f70:	f000 f8fc 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000012c 	.word	0x2000012c

08000f80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <MX_USART2_UART_Init+0x50>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fb8:	f002 fc28 	bl	800380c <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fc2:	f000 f8d3 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000174 	.word	0x20000174
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_DMA_Init+0x3c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <MX_DMA_Init+0x3c>)
 8000fe4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_DMA_Init+0x3c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2038      	movs	r0, #56	; 0x38
 8000ffc:	f001 f815 	bl	800202a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001000:	2038      	movs	r0, #56	; 0x38
 8001002:	f001 f82e 	bl	8002062 <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <MX_GPIO_Init+0x110>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a3c      	ldr	r2, [pc, #240]	; (8001124 <MX_GPIO_Init+0x110>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <MX_GPIO_Init+0x110>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <MX_GPIO_Init+0x110>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a35      	ldr	r2, [pc, #212]	; (8001124 <MX_GPIO_Init+0x110>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <MX_GPIO_Init+0x110>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <MX_GPIO_Init+0x110>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <MX_GPIO_Init+0x110>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_GPIO_Init+0x110>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	21e0      	movs	r1, #224	; 0xe0
 8001082:	4829      	ldr	r0, [pc, #164]	; (8001128 <MX_GPIO_Init+0x114>)
 8001084:	f001 fc8e 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	4827      	ldr	r0, [pc, #156]	; (800112c <MX_GPIO_Init+0x118>)
 800108e:	f001 fc89 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2170      	movs	r1, #112	; 0x70
 8001096:	4826      	ldr	r0, [pc, #152]	; (8001130 <MX_GPIO_Init+0x11c>)
 8001098:	f001 fc84 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800109c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	481e      	ldr	r0, [pc, #120]	; (800112c <MX_GPIO_Init+0x118>)
 80010b4:	f001 fada 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010b8:	23e0      	movs	r3, #224	; 0xe0
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	4619      	mov	r1, r3
 80010ce:	4816      	ldr	r0, [pc, #88]	; (8001128 <MX_GPIO_Init+0x114>)
 80010d0:	f001 facc 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4619      	mov	r1, r3
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <MX_GPIO_Init+0x118>)
 80010ec:	f001 fabe 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80010f0:	2370      	movs	r3, #112	; 0x70
 80010f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	480a      	ldr	r0, [pc, #40]	; (8001130 <MX_GPIO_Init+0x11c>)
 8001108:	f001 fab0 	bl	800266c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2028      	movs	r0, #40	; 0x28
 8001112:	f000 ff8a 	bl	800202a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001116:	2028      	movs	r0, #40	; 0x28
 8001118:	f000 ffa3 	bl	8002062 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020800 	.word	0x40020800
 8001130:	40020400 	.word	0x40020400

08001134 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e009      	b.n	800115a <_write+0x26>
  {
	ITM_SendChar(*ptr++);
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	60ba      	str	r2, [r7, #8]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fb6a 	bl	8000828 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	dbf1      	blt.n	8001146 <_write+0x12>
  }
  return len;
 8001162:	687b      	ldr	r3, [r7, #4]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_MspInit+0x4c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_MspInit+0x4c>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <HAL_ADC_MspInit+0xd8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d156      	bne.n	8001298 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a2c      	ldr	r2, [pc, #176]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = sensor136_Pin|GPIO_PIN_1|GPIO_PIN_4;
 8001222:	2313      	movs	r3, #19
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	481c      	ldr	r0, [pc, #112]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001236:	f001 fa19 	bl	800266c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 800123c:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <HAL_ADC_MspInit+0xe8>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 800125c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001260:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001268:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 800127e:	f000 ff0b 	bl	8002098 <HAL_DMA_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001288:	f7ff ff70 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001290:	639a      	str	r2, [r3, #56]	; 0x38
 8001292:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40012000 	.word	0x40012000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	200000cc 	.word	0x200000cc
 80012b0:	40026410 	.word	0x40026410

080012b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c4:	d10d      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_TIM_Base_MspInit+0x3c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_TIM_Base_MspInit+0x3c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_TIM_Base_MspInit+0x3c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_UART_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_UART_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_UART_MspInit+0x88>)
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_UART_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_UART_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_UART_MspInit+0x88>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_UART_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800134e:	230c      	movs	r3, #12
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_UART_MspInit+0x8c>)
 800136a:	f001 f97f 	bl	800266c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40004400 	.word	0x40004400
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
																														       {
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 f92a 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013e0:	f001 fafa 	bl	80029d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <DMA2_Stream0_IRQHandler+0x10>)
 80013ee:	f000 ff01 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200000cc 	.word	0x200000cc

080013fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e00a      	b.n	8001424 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800140e:	f3af 8000 	nop.w
 8001412:	4601      	mov	r1, r0
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	b2ca      	uxtb	r2, r1
 800141c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	429a      	cmp	r2, r3
 800142a:	dbf0      	blt.n	800140e <_read+0x12>
  }

  return len;
 800142c:	687b      	ldr	r3, [r7, #4]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145e:	605a      	str	r2, [r3, #4]
  return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_isatty>:

int _isatty(int file)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <_sbrk+0x5c>)
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <_sbrk+0x60>)
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <_sbrk+0x64>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <_sbrk+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d207      	bcs.n	80014e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d0:	f002 fe82 	bl	80041d8 <__errno>
 80014d4:	4603      	mov	r3, r0
 80014d6:	220c      	movs	r2, #12
 80014d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014de:	e009      	b.n	80014f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <_sbrk+0x64>)
 80014f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20018000 	.word	0x20018000
 8001500:	00000400 	.word	0x00000400
 8001504:	200001b8 	.word	0x200001b8
 8001508:	20000310 	.word	0x20000310

0800150c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <SystemInit+0x20>)
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <SystemInit+0x20>)
 8001518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800151c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001536:	490e      	ldr	r1, [pc, #56]	; (8001570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800154c:	4c0b      	ldr	r4, [pc, #44]	; (800157c <LoopFillZerobss+0x26>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155a:	f7ff ffd7 	bl	800150c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155e:	f002 fe41 	bl	80041e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff f9ad 	bl	80008c0 <main>
  bx  lr    
 8001566:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001568:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001574:	08005170 	.word	0x08005170
  ldr r2, =_sbss
 8001578:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800157c:	2000030c 	.word	0x2000030c

08001580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <HAL_Init+0x40>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_Init+0x40>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_Init+0x40>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 fd31 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	200f      	movs	r0, #15
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fdde 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fd49 	bl	800207e <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001604:	f000 fd11 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	20000008 	.word	0x20000008
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	200001bc 	.word	0x200001bc

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200001bc 	.word	0x200001bc

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_Delay+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000008 	.word	0x20000008

080016b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e033      	b.n	800172e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fd7a 	bl	80011c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d118      	bne.n	8001720 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f6:	f023 0302 	bic.w	r3, r3, #2
 80016fa:	f043 0202 	orr.w	r2, r3, #2
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 faba 	bl	8001c7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
 800171e:	e001      	b.n	8001724 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Start+0x1a>
 800174e:	2302      	movs	r3, #2
 8001750:	e097      	b.n	8001882 <HAL_ADC_Start+0x14a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d018      	beq.n	800179a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001778:	4b45      	ldr	r3, [pc, #276]	; (8001890 <HAL_ADC_Start+0x158>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a45      	ldr	r2, [pc, #276]	; (8001894 <HAL_ADC_Start+0x15c>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9a      	lsrs	r2, r3, #18
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800178c:	e002      	b.n	8001794 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3b01      	subs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d15f      	bne.n	8001868 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e6:	d106      	bne.n	80017f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f023 0206 	bic.w	r2, r3, #6
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44
 80017f4:	e002      	b.n	80017fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_ADC_Start+0x160>)
 8001806:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001810:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d129      	bne.n	8001880 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	e020      	b.n	8001880 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a16      	ldr	r2, [pc, #88]	; (800189c <HAL_ADC_Start+0x164>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d11b      	bne.n	8001880 <HAL_ADC_Start+0x148>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d114      	bne.n	8001880 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	e00b      	b.n	8001880 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f043 0210 	orr.w	r2, r3, #16
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	431bde83 	.word	0x431bde83
 8001898:	40012300 	.word	0x40012300
 800189c:	40012000 	.word	0x40012000

080018a0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Stop+0x16>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e021      	b.n	80018fa <HAL_ADC_Stop+0x5a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001922:	d113      	bne.n	800194c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800192e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001932:	d10b      	bne.n	800194c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f043 0220 	orr.w	r2, r3, #32
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e063      	b.n	8001a14 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800194c:	f7ff fe80 	bl	8001650 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001952:	e021      	b.n	8001998 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800195a:	d01d      	beq.n	8001998 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <HAL_ADC_PollForConversion+0x6c>
 8001962:	f7ff fe75 	bl	8001650 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d212      	bcs.n	8001998 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b02      	cmp	r3, #2
 800197e:	d00b      	beq.n	8001998 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f043 0204 	orr.w	r2, r3, #4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e03d      	b.n	8001a14 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d1d6      	bne.n	8001954 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f06f 0212 	mvn.w	r2, #18
 80019ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d123      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d11f      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d111      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e105      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x228>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d925      	bls.n	8001ab0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68d9      	ldr	r1, [r3, #12]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	3b1e      	subs	r3, #30
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43da      	mvns	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	400a      	ands	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68d9      	ldr	r1, [r3, #12]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4403      	add	r3, r0
 8001aa2:	3b1e      	subs	r3, #30
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	e022      	b.n	8001af6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6919      	ldr	r1, [r3, #16]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4403      	add	r3, r0
 8001aec:	409a      	lsls	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d824      	bhi.n	8001b48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3b05      	subs	r3, #5
 8001b10:	221f      	movs	r2, #31
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b05      	subs	r3, #5
 8001b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34
 8001b46:	e04c      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d824      	bhi.n	8001b9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b23      	subs	r3, #35	; 0x23
 8001b62:	221f      	movs	r2, #31
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43da      	mvns	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	400a      	ands	r2, r1
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b23      	subs	r3, #35	; 0x23
 8001b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
 8001b98:	e023      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b41      	subs	r3, #65	; 0x41
 8001bac:	221f      	movs	r2, #31
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	400a      	ands	r2, r1
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b41      	subs	r3, #65	; 0x41
 8001bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_ADC_ConfigChannel+0x234>)
 8001be4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <HAL_ADC_ConfigChannel+0x238>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d109      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1cc>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d105      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_ADC_ConfigChannel+0x238>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d123      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x21e>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d003      	beq.n	8001c1e <HAL_ADC_ConfigChannel+0x1e6>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b11      	cmp	r3, #17
 8001c1c:	d11b      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d111      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_ADC_ConfigChannel+0x23c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_ADC_ConfigChannel+0x240>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	0c9a      	lsrs	r2, r3, #18
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c48:	e002      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f9      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40012300 	.word	0x40012300
 8001c70:	40012000 	.word	0x40012000
 8001c74:	20000000 	.word	0x20000000
 8001c78:	431bde83 	.word	0x431bde83

08001c7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c84:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <ADC_Init+0x1f0>)
 8001c86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	021a      	lsls	r2, r3, #8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	4a58      	ldr	r2, [pc, #352]	; (8001e70 <ADC_Init+0x1f4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6899      	ldr	r1, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6899      	ldr	r1, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	e00f      	b.n	8001d7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0202 	bic.w	r2, r2, #2
 8001d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6899      	ldr	r1, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7e1b      	ldrb	r3, [r3, #24]
 8001d94:	005a      	lsls	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001db6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	035a      	lsls	r2, r3, #13
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	e007      	b.n	8001df0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	051a      	lsls	r2, r3, #20
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6899      	ldr	r1, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e32:	025a      	lsls	r2, r3, #9
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6899      	ldr	r1, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	029a      	lsls	r2, r3, #10
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40012300 	.word	0x40012300
 8001e70:	0f000001 	.word	0x0f000001

08001e74 <__NVIC_SetPriorityGrouping>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4907      	ldr	r1, [pc, #28]	; (8001f10 <__NVIC_EnableIRQ+0x38>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Config>:
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff4:	f7ff ff8e 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff29 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff3e 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff8e 	bl	8001f68 <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5d 	bl	8001f14 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff31 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffa2 	bl	8001fd0 <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff fad4 	bl	8001650 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e099      	b.n	80021e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d4:	e00f      	b.n	80020f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d6:	f7ff fabb 	bl	8001650 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d908      	bls.n	80020f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2203      	movs	r2, #3
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e078      	b.n	80021e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e8      	bne.n	80020d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_DMA_Init+0x158>)
 8002110:	4013      	ands	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002122:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2b04      	cmp	r3, #4
 800214e:	d107      	bne.n	8002160 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4313      	orrs	r3, r2
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f023 0307 	bic.w	r3, r3, #7
 8002176:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2b04      	cmp	r3, #4
 8002188:	d117      	bne.n	80021ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00e      	beq.n	80021ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f9e9 	bl	8002574 <DMA_CheckFifoParam>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021b6:	2301      	movs	r3, #1
 80021b8:	e016      	b.n	80021e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f9a0 	bl	8002508 <DMA_CalcBaseAndBitshift>
 80021c8:	4603      	mov	r3, r0
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	223f      	movs	r2, #63	; 0x3f
 80021d2:	409a      	lsls	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	f010803f 	.word	0xf010803f

080021f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002200:	4b8e      	ldr	r3, [pc, #568]	; (800243c <HAL_DMA_IRQHandler+0x248>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a8e      	ldr	r2, [pc, #568]	; (8002440 <HAL_DMA_IRQHandler+0x24c>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2208      	movs	r2, #8
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01a      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	2208      	movs	r2, #8
 800224e:	409a      	lsls	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2201      	movs	r2, #1
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2201      	movs	r2, #1
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	2204      	movs	r2, #4
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00b      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2204      	movs	r2, #4
 80022ba:	409a      	lsls	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	2210      	movs	r2, #16
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d043      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d03c      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	2210      	movs	r2, #16
 80022f0:	409a      	lsls	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d018      	beq.n	8002336 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d024      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
 8002322:	e01f      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
 8002334:	e016      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0208 	bic.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	2220      	movs	r2, #32
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 808f 	beq.w	8002494 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8087 	beq.w	8002494 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2220      	movs	r2, #32
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b05      	cmp	r3, #5
 800239c:	d136      	bne.n	800240c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0216 	bic.w	r2, r2, #22
 80023ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_DMA_IRQHandler+0x1da>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0208 	bic.w	r2, r2, #8
 80023dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	223f      	movs	r2, #63	; 0x3f
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d07e      	beq.n	8002500 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
        }
        return;
 800240a:	e079      	b.n	8002500 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01d      	beq.n	8002456 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10d      	bne.n	8002444 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	2b00      	cmp	r3, #0
 800242e:	d031      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e02c      	b.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000
 8002440:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
 8002454:	e01e      	b.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0210 	bic.w	r2, r2, #16
 8002472:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	d032      	beq.n	8002502 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d022      	beq.n	80024ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2205      	movs	r2, #5
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d307      	bcc.n	80024dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f2      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x2cc>
 80024da:	e000      	b.n	80024de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
 80024fe:	e000      	b.n	8002502 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002500:	bf00      	nop
    }
  }
}
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3b10      	subs	r3, #16
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <DMA_CalcBaseAndBitshift+0x64>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <DMA_CalcBaseAndBitshift+0x68>)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d909      	bls.n	800254a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	1d1a      	adds	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	659a      	str	r2, [r3, #88]	; 0x58
 8002548:	e007      	b.n	800255a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	aaaaaaab 	.word	0xaaaaaaab
 8002570:	08005124 	.word	0x08005124

08002574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d11f      	bne.n	80025ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d856      	bhi.n	8002642 <DMA_CheckFifoParam+0xce>
 8002594:	a201      	add	r2, pc, #4	; (adr r2, 800259c <DMA_CheckFifoParam+0x28>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025bf 	.word	0x080025bf
 80025a4:	080025ad 	.word	0x080025ad
 80025a8:	08002643 	.word	0x08002643
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d046      	beq.n	8002646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025bc:	e043      	b.n	8002646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c6:	d140      	bne.n	800264a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e03d      	b.n	800264a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d6:	d121      	bne.n	800261c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d837      	bhi.n	800264e <DMA_CheckFifoParam+0xda>
 80025de:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <DMA_CheckFifoParam+0x70>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	080025f5 	.word	0x080025f5
 80025e8:	080025fb 	.word	0x080025fb
 80025ec:	080025f5 	.word	0x080025f5
 80025f0:	0800260d 	.word	0x0800260d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e030      	b.n	800265c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d025      	beq.n	8002652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260a:	e022      	b.n	8002652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002614:	d11f      	bne.n	8002656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800261a:	e01c      	b.n	8002656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d903      	bls.n	800262a <DMA_CheckFifoParam+0xb6>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d003      	beq.n	8002630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002628:	e018      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
      break;
 800262e:	e015      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      break;
 8002640:	e00b      	b.n	800265a <DMA_CheckFifoParam+0xe6>
      break;
 8002642:	bf00      	nop
 8002644:	e00a      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e008      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e006      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
 8002650:	e004      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
 8002654:	e002      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;   
 8002656:	bf00      	nop
 8002658:	e000      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
    }
  } 
  
  return status; 
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop

0800266c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e159      	b.n	800293c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f040 8148 	bne.w	8002936 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d005      	beq.n	80026be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d130      	bne.n	8002720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f4:	2201      	movs	r2, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 0201 	and.w	r2, r3, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b03      	cmp	r3, #3
 800272a:	d017      	beq.n	800275c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d123      	bne.n	80027b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	69b9      	ldr	r1, [r7, #24]
 80027ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0203 	and.w	r2, r3, #3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a2 	beq.w	8002936 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b57      	ldr	r3, [pc, #348]	; (8002954 <HAL_GPIO_Init+0x2e8>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	4a56      	ldr	r2, [pc, #344]	; (8002954 <HAL_GPIO_Init+0x2e8>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002800:	6453      	str	r3, [r2, #68]	; 0x44
 8002802:	4b54      	ldr	r3, [pc, #336]	; (8002954 <HAL_GPIO_Init+0x2e8>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800280e:	4a52      	ldr	r2, [pc, #328]	; (8002958 <HAL_GPIO_Init+0x2ec>)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	220f      	movs	r2, #15
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a49      	ldr	r2, [pc, #292]	; (800295c <HAL_GPIO_Init+0x2f0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d019      	beq.n	800286e <HAL_GPIO_Init+0x202>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a48      	ldr	r2, [pc, #288]	; (8002960 <HAL_GPIO_Init+0x2f4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_GPIO_Init+0x1fe>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a47      	ldr	r2, [pc, #284]	; (8002964 <HAL_GPIO_Init+0x2f8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_GPIO_Init+0x1fa>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a46      	ldr	r2, [pc, #280]	; (8002968 <HAL_GPIO_Init+0x2fc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <HAL_GPIO_Init+0x1f6>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a45      	ldr	r2, [pc, #276]	; (800296c <HAL_GPIO_Init+0x300>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_GPIO_Init+0x1f2>
 800285a:	2304      	movs	r3, #4
 800285c:	e008      	b.n	8002870 <HAL_GPIO_Init+0x204>
 800285e:	2307      	movs	r3, #7
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x204>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x204>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x204>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x204>
 800286e:	2300      	movs	r3, #0
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	; (8002958 <HAL_GPIO_Init+0x2ec>)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288e:	4b38      	ldr	r3, [pc, #224]	; (8002970 <HAL_GPIO_Init+0x304>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b2:	4a2f      	ldr	r2, [pc, #188]	; (8002970 <HAL_GPIO_Init+0x304>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b8:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_GPIO_Init+0x304>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028dc:	4a24      	ldr	r2, [pc, #144]	; (8002970 <HAL_GPIO_Init+0x304>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_GPIO_Init+0x304>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002906:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <HAL_GPIO_Init+0x304>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290c:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_GPIO_Init+0x304>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002930:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <HAL_GPIO_Init+0x304>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f67f aea2 	bls.w	8002688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e001      	b.n	8002996 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
 80029b0:	4613      	mov	r3, r2
 80029b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b4:	787b      	ldrb	r3, [r7, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c0:	e003      	b.n	80029ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029c2:	887b      	ldrh	r3, [r7, #2]
 80029c4:	041a      	lsls	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	619a      	str	r2, [r3, #24]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f806 	bl	8002a08 <HAL_GPIO_EXTI_Callback>
  }
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40013c00 	.word	0x40013c00

08002a08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e267      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d075      	beq.n	8002b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a3e:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d00c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4a:	4b85      	ldr	r3, [pc, #532]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d112      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4b82      	ldr	r3, [pc, #520]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05b      	beq.n	8002b28 <HAL_RCC_OscConfig+0x108>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d157      	bne.n	8002b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e242      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x74>
 8002a86:	4b76      	ldr	r3, [pc, #472]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a75      	ldr	r2, [pc, #468]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e01d      	b.n	8002ad0 <HAL_RCC_OscConfig+0xb0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x98>
 8002a9e:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6f      	ldr	r2, [pc, #444]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6c      	ldr	r2, [pc, #432]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RCC_OscConfig+0xb0>
 8002ab8:	4b69      	ldr	r3, [pc, #420]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a68      	ldr	r2, [pc, #416]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fdba 	bl	8001650 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fdb6 	bl	8001650 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e207      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xc0>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fda6 	bl	8001650 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b08:	f7fe fda2 	bl	8001650 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e1f3      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0xe8>
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d063      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b42:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d11c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d116      	bne.n	8002b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_RCC_OscConfig+0x152>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e1c7      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4937      	ldr	r1, [pc, #220]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	e03a      	b.n	8002bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b90:	4b34      	ldr	r3, [pc, #208]	; (8002c64 <HAL_RCC_OscConfig+0x244>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe fd5b 	bl	8001650 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9e:	f7fe fd57 	bl	8001650 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1a8      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4925      	ldr	r1, [pc, #148]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]
 8002bd0:	e015      	b.n	8002bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_OscConfig+0x244>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fd3a 	bl	8001650 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be0:	f7fe fd36 	bl	8001650 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e187      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d036      	beq.n	8002c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_RCC_OscConfig+0x248>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7fe fd1a 	bl	8001650 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c20:	f7fe fd16 	bl	8001650 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e167      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x200>
 8002c3e:	e01b      	b.n	8002c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_OscConfig+0x248>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c46:	f7fe fd03 	bl	8001650 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	e00e      	b.n	8002c6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fcff 	bl	8001650 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d907      	bls.n	8002c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e150      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	42470000 	.word	0x42470000
 8002c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	4b88      	ldr	r3, [pc, #544]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ea      	bne.n	8002c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8097 	beq.w	8002db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8a:	4b81      	ldr	r3, [pc, #516]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	4b7d      	ldr	r3, [pc, #500]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a7c      	ldr	r2, [pc, #496]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b7a      	ldr	r3, [pc, #488]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b77      	ldr	r3, [pc, #476]	; (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d118      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc2:	4b74      	ldr	r3, [pc, #464]	; (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a73      	ldr	r2, [pc, #460]	; (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fcbf 	bl	8001650 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7fe fcbb 	bl	8001650 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e10c      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2ea>
 8002cfc:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a63      	ldr	r2, [pc, #396]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	e01c      	b.n	8002d44 <HAL_RCC_OscConfig+0x324>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b05      	cmp	r3, #5
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x30c>
 8002d12:	4b5f      	ldr	r3, [pc, #380]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a5e      	ldr	r2, [pc, #376]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	4b5c      	ldr	r3, [pc, #368]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a5b      	ldr	r2, [pc, #364]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0x324>
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a57      	ldr	r2, [pc, #348]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a54      	ldr	r2, [pc, #336]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d3e:	f023 0304 	bic.w	r3, r3, #4
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d015      	beq.n	8002d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7fe fc80 	bl	8001650 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7fe fc7c 	bl	8001650 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e0cb      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0ee      	beq.n	8002d54 <HAL_RCC_OscConfig+0x334>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7fe fc6a 	bl	8001650 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7fe fc66 	bl	8001650 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0b5      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1ee      	bne.n	8002d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	4a38      	ldr	r2, [pc, #224]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80a1 	beq.w	8002f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d05c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d141      	bne.n	8002e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <HAL_RCC_OscConfig+0x478>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fc3a 	bl	8001650 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fc36 	bl	8001650 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e087      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	019b      	lsls	r3, r3, #6
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	491b      	ldr	r1, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCC_OscConfig+0x478>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fc0f 	bl	8001650 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fe fc0b 	bl	8001650 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e05c      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x416>
 8002e54:	e054      	b.n	8002f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_OscConfig+0x478>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fbf8 	bl	8001650 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe fbf4 	bl	8001650 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e045      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x444>
 8002e82:	e03d      	b.n	8002f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e038      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40007000 	.word	0x40007000
 8002e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x4ec>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d028      	beq.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d121      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d11a      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d111      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0cc      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b68      	ldr	r3, [pc, #416]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d90c      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b65      	ldr	r3, [pc, #404]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b8      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a58      	ldr	r2, [pc, #352]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f7c:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4b50      	ldr	r3, [pc, #320]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	494d      	ldr	r1, [pc, #308]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d044      	beq.n	8003030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d119      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e06f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e067      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b37      	ldr	r3, [pc, #220]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4934      	ldr	r1, [pc, #208]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7fe fb26 	bl	8001650 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fe fb22 	bl	8001650 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e04f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d20c      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e032      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4916      	ldr	r1, [pc, #88]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	490e      	ldr	r1, [pc, #56]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003096:	f000 f821 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	490a      	ldr	r1, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fa86 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023c00 	.word	0x40023c00
 80030cc:	40023800 	.word	0x40023800
 80030d0:	0800510c 	.word	0x0800510c
 80030d4:	20000000 	.word	0x20000000
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e0:	b090      	sub	sp, #64	; 0x40
 80030e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
 80030e8:	2300      	movs	r3, #0
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ec:	2300      	movs	r3, #0
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d00d      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x40>
 8003100:	2b08      	cmp	r3, #8
 8003102:	f200 80a1 	bhi.w	8003248 <HAL_RCC_GetSysClockFreq+0x16c>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x34>
 800310a:	2b04      	cmp	r3, #4
 800310c:	d003      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x3a>
 800310e:	e09b      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_GetSysClockFreq+0x184>)
 8003112:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003114:	e09b      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003116:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_GetSysClockFreq+0x188>)
 8003118:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800311a:	e098      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800311c:	4b4f      	ldr	r3, [pc, #316]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003126:	4b4d      	ldr	r3, [pc, #308]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d028      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003132:	4b4a      	ldr	r3, [pc, #296]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	2200      	movs	r2, #0
 800313a:	623b      	str	r3, [r7, #32]
 800313c:	627a      	str	r2, [r7, #36]	; 0x24
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003144:	2100      	movs	r1, #0
 8003146:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_RCC_GetSysClockFreq+0x188>)
 8003148:	fb03 f201 	mul.w	r2, r3, r1
 800314c:	2300      	movs	r3, #0
 800314e:	fb00 f303 	mul.w	r3, r0, r3
 8003152:	4413      	add	r3, r2
 8003154:	4a43      	ldr	r2, [pc, #268]	; (8003264 <HAL_RCC_GetSysClockFreq+0x188>)
 8003156:	fba0 1202 	umull	r1, r2, r0, r2
 800315a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800315c:	460a      	mov	r2, r1
 800315e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003162:	4413      	add	r3, r2
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	2200      	movs	r2, #0
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	61fa      	str	r2, [r7, #28]
 800316e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003172:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003176:	f7fd f88b 	bl	8000290 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4613      	mov	r3, r2
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003182:	e053      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003184:	4b35      	ldr	r3, [pc, #212]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	2200      	movs	r2, #0
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	617a      	str	r2, [r7, #20]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003196:	f04f 0b00 	mov.w	fp, #0
 800319a:	4652      	mov	r2, sl
 800319c:	465b      	mov	r3, fp
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	0159      	lsls	r1, r3, #5
 80031a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ac:	0150      	lsls	r0, r2, #5
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	ebb2 080a 	subs.w	r8, r2, sl
 80031b6:	eb63 090b 	sbc.w	r9, r3, fp
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031ce:	ebb2 0408 	subs.w	r4, r2, r8
 80031d2:	eb63 0509 	sbc.w	r5, r3, r9
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	00eb      	lsls	r3, r5, #3
 80031e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e4:	00e2      	lsls	r2, r4, #3
 80031e6:	4614      	mov	r4, r2
 80031e8:	461d      	mov	r5, r3
 80031ea:	eb14 030a 	adds.w	r3, r4, sl
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	eb45 030b 	adc.w	r3, r5, fp
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003202:	4629      	mov	r1, r5
 8003204:	028b      	lsls	r3, r1, #10
 8003206:	4621      	mov	r1, r4
 8003208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800320c:	4621      	mov	r1, r4
 800320e:	028a      	lsls	r2, r1, #10
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	2200      	movs	r2, #0
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	60fa      	str	r2, [r7, #12]
 800321c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003220:	f7fd f836 	bl	8000290 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4613      	mov	r3, r2
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	3301      	adds	r3, #1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800323c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003246:	e002      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetSysClockFreq+0x184>)
 800324a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800324c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003250:	4618      	mov	r0, r3
 8003252:	3740      	adds	r7, #64	; 0x40
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	00f42400 	.word	0x00f42400
 8003264:	017d7840 	.word	0x017d7840

08003268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_RCC_GetHCLKFreq+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000000 	.word	0x20000000

08003280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003284:	f7ff fff0 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0a9b      	lsrs	r3, r3, #10
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	0800511c 	.word	0x0800511c

080032a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032ac:	f7ff ffdc 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0b5b      	lsrs	r3, r3, #13
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4903      	ldr	r1, [pc, #12]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40023800 	.word	0x40023800
 80032cc:	0800511c 	.word	0x0800511c

080032d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e041      	b.n	8003366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd ffdc 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 f8f4 	bl	80034fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_TIM_ConfigClockSource+0x1c>
 8003386:	2302      	movs	r3, #2
 8003388:	e0b4      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x186>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c2:	d03e      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0xd4>
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	f200 8087 	bhi.w	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	f000 8086 	beq.w	80034e0 <HAL_TIM_ConfigClockSource+0x172>
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	d87f      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033da:	2b70      	cmp	r3, #112	; 0x70
 80033dc:	d01a      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0xa6>
 80033de:	2b70      	cmp	r3, #112	; 0x70
 80033e0:	d87b      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033e2:	2b60      	cmp	r3, #96	; 0x60
 80033e4:	d050      	beq.n	8003488 <HAL_TIM_ConfigClockSource+0x11a>
 80033e6:	2b60      	cmp	r3, #96	; 0x60
 80033e8:	d877      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033ea:	2b50      	cmp	r3, #80	; 0x50
 80033ec:	d03c      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0xfa>
 80033ee:	2b50      	cmp	r3, #80	; 0x50
 80033f0:	d873      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d058      	beq.n	80034a8 <HAL_TIM_ConfigClockSource+0x13a>
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d86f      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033fa:	2b30      	cmp	r3, #48	; 0x30
 80033fc:	d064      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x15a>
 80033fe:	2b30      	cmp	r3, #48	; 0x30
 8003400:	d86b      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 8003402:	2b20      	cmp	r3, #32
 8003404:	d060      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x15a>
 8003406:	2b20      	cmp	r3, #32
 8003408:	d867      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d05c      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x15a>
 800340e:	2b10      	cmp	r3, #16
 8003410:	d05a      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x15a>
 8003412:	e062      	b.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f000 f964 	bl	80036f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003436:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	609a      	str	r2, [r3, #8]
      break;
 8003440:	e04f      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f000 f94d 	bl	80036f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003464:	609a      	str	r2, [r3, #8]
      break;
 8003466:	e03c      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	461a      	mov	r2, r3
 8003476:	f000 f8c1 	bl	80035fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2150      	movs	r1, #80	; 0x50
 8003480:	4618      	mov	r0, r3
 8003482:	f000 f91a 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 8003486:	e02c      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	461a      	mov	r2, r3
 8003496:	f000 f8e0 	bl	800365a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2160      	movs	r1, #96	; 0x60
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f90a 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 80034a6:	e01c      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f000 f8a1 	bl	80035fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2140      	movs	r1, #64	; 0x40
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f8fa 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 80034c6:	e00c      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f000 f8f1 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 80034d8:	e003      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
      break;
 80034de:	e000      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a34      	ldr	r2, [pc, #208]	; (80035e0 <TIM_Base_SetConfig+0xe4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00f      	beq.n	8003534 <TIM_Base_SetConfig+0x38>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351a:	d00b      	beq.n	8003534 <TIM_Base_SetConfig+0x38>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <TIM_Base_SetConfig+0xe8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x38>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a30      	ldr	r2, [pc, #192]	; (80035e8 <TIM_Base_SetConfig+0xec>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x38>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a2f      	ldr	r2, [pc, #188]	; (80035ec <TIM_Base_SetConfig+0xf0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <TIM_Base_SetConfig+0xe4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01b      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d017      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a22      	ldr	r2, [pc, #136]	; (80035e4 <TIM_Base_SetConfig+0xe8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <TIM_Base_SetConfig+0xec>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a20      	ldr	r2, [pc, #128]	; (80035ec <TIM_Base_SetConfig+0xf0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1f      	ldr	r2, [pc, #124]	; (80035f0 <TIM_Base_SetConfig+0xf4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <TIM_Base_SetConfig+0xf8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <TIM_Base_SetConfig+0xfc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a08      	ldr	r2, [pc, #32]	; (80035e0 <TIM_Base_SetConfig+0xe4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d103      	bne.n	80035cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	615a      	str	r2, [r3, #20]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800

080035fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0201 	bic.w	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f023 030a 	bic.w	r3, r3, #10
 8003638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800365a:	b480      	push	{r7}
 800365c:	b087      	sub	sp, #28
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0210 	bic.w	r2, r3, #16
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	031b      	lsls	r3, r3, #12
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003696:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f043 0307 	orr.w	r3, r3, #7
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800370a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	021a      	lsls	r2, r3, #8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	431a      	orrs	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	bf00      	nop
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003744:	2302      	movs	r3, #2
 8003746:	e050      	b.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d018      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d013      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a18      	ldr	r2, [pc, #96]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00e      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a16      	ldr	r2, [pc, #88]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d009      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a15      	ldr	r2, [pc, #84]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a13      	ldr	r2, [pc, #76]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10c      	bne.n	80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40010000 	.word	0x40010000
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800
 8003804:	40000c00 	.word	0x40000c00
 8003808:	40014000 	.word	0x40014000

0800380c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e03f      	b.n	800389e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fd5e 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800384e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f829 	bl	80038a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ac:	b0c0      	sub	sp, #256	; 0x100
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	68d9      	ldr	r1, [r3, #12]
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	ea40 0301 	orr.w	r3, r0, r1
 80038d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	431a      	orrs	r2, r3
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003900:	f021 010c 	bic.w	r1, r1, #12
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800390e:	430b      	orrs	r3, r1
 8003910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003922:	6999      	ldr	r1, [r3, #24]
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	ea40 0301 	orr.w	r3, r0, r1
 800392e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b8f      	ldr	r3, [pc, #572]	; (8003b74 <UART_SetConfig+0x2cc>)
 8003938:	429a      	cmp	r2, r3
 800393a:	d005      	beq.n	8003948 <UART_SetConfig+0xa0>
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b8d      	ldr	r3, [pc, #564]	; (8003b78 <UART_SetConfig+0x2d0>)
 8003944:	429a      	cmp	r2, r3
 8003946:	d104      	bne.n	8003952 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003948:	f7ff fcae 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 800394c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003950:	e003      	b.n	800395a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003952:	f7ff fc95 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8003956:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003964:	f040 810c 	bne.w	8003b80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396c:	2200      	movs	r2, #0
 800396e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003972:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003976:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800397a:	4622      	mov	r2, r4
 800397c:	462b      	mov	r3, r5
 800397e:	1891      	adds	r1, r2, r2
 8003980:	65b9      	str	r1, [r7, #88]	; 0x58
 8003982:	415b      	adcs	r3, r3
 8003984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003986:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800398a:	4621      	mov	r1, r4
 800398c:	eb12 0801 	adds.w	r8, r2, r1
 8003990:	4629      	mov	r1, r5
 8003992:	eb43 0901 	adc.w	r9, r3, r1
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039aa:	4690      	mov	r8, r2
 80039ac:	4699      	mov	r9, r3
 80039ae:	4623      	mov	r3, r4
 80039b0:	eb18 0303 	adds.w	r3, r8, r3
 80039b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039b8:	462b      	mov	r3, r5
 80039ba:	eb49 0303 	adc.w	r3, r9, r3
 80039be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039d6:	460b      	mov	r3, r1
 80039d8:	18db      	adds	r3, r3, r3
 80039da:	653b      	str	r3, [r7, #80]	; 0x50
 80039dc:	4613      	mov	r3, r2
 80039de:	eb42 0303 	adc.w	r3, r2, r3
 80039e2:	657b      	str	r3, [r7, #84]	; 0x54
 80039e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039ec:	f7fc fc50 	bl	8000290 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4b61      	ldr	r3, [pc, #388]	; (8003b7c <UART_SetConfig+0x2d4>)
 80039f6:	fba3 2302 	umull	r2, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	011c      	lsls	r4, r3, #4
 80039fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	1891      	adds	r1, r2, r2
 8003a16:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a20:	4641      	mov	r1, r8
 8003a22:	eb12 0a01 	adds.w	sl, r2, r1
 8003a26:	4649      	mov	r1, r9
 8003a28:	eb43 0b01 	adc.w	fp, r3, r1
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a40:	4692      	mov	sl, r2
 8003a42:	469b      	mov	fp, r3
 8003a44:	4643      	mov	r3, r8
 8003a46:	eb1a 0303 	adds.w	r3, sl, r3
 8003a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	eb4b 0303 	adc.w	r3, fp, r3
 8003a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	18db      	adds	r3, r3, r3
 8003a70:	643b      	str	r3, [r7, #64]	; 0x40
 8003a72:	4613      	mov	r3, r2
 8003a74:	eb42 0303 	adc.w	r3, r2, r3
 8003a78:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a82:	f7fc fc05 	bl	8000290 <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <UART_SetConfig+0x2d4>)
 8003a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2264      	movs	r2, #100	; 0x64
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	1acb      	subs	r3, r1, r3
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <UART_SetConfig+0x2d4>)
 8003aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ab0:	441c      	add	r4, r3
 8003ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003abc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ac0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003acc:	415b      	adcs	r3, r3
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	1851      	adds	r1, r2, r1
 8003ad8:	6339      	str	r1, [r7, #48]	; 0x30
 8003ada:	4649      	mov	r1, r9
 8003adc:	414b      	adcs	r3, r1
 8003ade:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003aec:	4659      	mov	r1, fp
 8003aee:	00cb      	lsls	r3, r1, #3
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af6:	4651      	mov	r1, sl
 8003af8:	00ca      	lsls	r2, r1, #3
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	4642      	mov	r2, r8
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b08:	464b      	mov	r3, r9
 8003b0a:	460a      	mov	r2, r1
 8003b0c:	eb42 0303 	adc.w	r3, r2, r3
 8003b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b28:	460b      	mov	r3, r1
 8003b2a:	18db      	adds	r3, r3, r3
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2e:	4613      	mov	r3, r2
 8003b30:	eb42 0303 	adc.w	r3, r2, r3
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b3e:	f7fc fba7 	bl	8000290 <__aeabi_uldivmod>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <UART_SetConfig+0x2d4>)
 8003b48:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	2164      	movs	r1, #100	; 0x64
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	3332      	adds	r3, #50	; 0x32
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <UART_SetConfig+0x2d4>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	f003 0207 	and.w	r2, r3, #7
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4422      	add	r2, r4
 8003b6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b70:	e106      	b.n	8003d80 <UART_SetConfig+0x4d8>
 8003b72:	bf00      	nop
 8003b74:	40011000 	.word	0x40011000
 8003b78:	40011400 	.word	0x40011400
 8003b7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b92:	4642      	mov	r2, r8
 8003b94:	464b      	mov	r3, r9
 8003b96:	1891      	adds	r1, r2, r2
 8003b98:	6239      	str	r1, [r7, #32]
 8003b9a:	415b      	adcs	r3, r3
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	1854      	adds	r4, r2, r1
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	eb43 0501 	adc.w	r5, r3, r1
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	00eb      	lsls	r3, r5, #3
 8003bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bba:	00e2      	lsls	r2, r4, #3
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	461d      	mov	r5, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	18e3      	adds	r3, r4, r3
 8003bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bc8:	464b      	mov	r3, r9
 8003bca:	eb45 0303 	adc.w	r3, r5, r3
 8003bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bee:	4629      	mov	r1, r5
 8003bf0:	008b      	lsls	r3, r1, #2
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	008a      	lsls	r2, r1, #2
 8003bfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c00:	f7fc fb46 	bl	8000290 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4b60      	ldr	r3, [pc, #384]	; (8003d8c <UART_SetConfig+0x4e4>)
 8003c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	011c      	lsls	r4, r3, #4
 8003c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c24:	4642      	mov	r2, r8
 8003c26:	464b      	mov	r3, r9
 8003c28:	1891      	adds	r1, r2, r2
 8003c2a:	61b9      	str	r1, [r7, #24]
 8003c2c:	415b      	adcs	r3, r3
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c34:	4641      	mov	r1, r8
 8003c36:	1851      	adds	r1, r2, r1
 8003c38:	6139      	str	r1, [r7, #16]
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	414b      	adcs	r3, r1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	00cb      	lsls	r3, r1, #3
 8003c50:	4651      	mov	r1, sl
 8003c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c56:	4651      	mov	r1, sl
 8003c58:	00ca      	lsls	r2, r1, #3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4642      	mov	r2, r8
 8003c62:	189b      	adds	r3, r3, r2
 8003c64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c68:	464b      	mov	r3, r9
 8003c6a:	460a      	mov	r2, r1
 8003c6c:	eb42 0303 	adc.w	r3, r2, r3
 8003c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	008b      	lsls	r3, r1, #2
 8003c90:	4641      	mov	r1, r8
 8003c92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c96:	4641      	mov	r1, r8
 8003c98:	008a      	lsls	r2, r1, #2
 8003c9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c9e:	f7fc faf7 	bl	8000290 <__aeabi_uldivmod>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <UART_SetConfig+0x4e4>)
 8003caa:	fba3 2301 	umull	r2, r3, r3, r1
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2264      	movs	r2, #100	; 0x64
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	1acb      	subs	r3, r1, r3
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	3332      	adds	r3, #50	; 0x32
 8003cbc:	4a33      	ldr	r2, [pc, #204]	; (8003d8c <UART_SetConfig+0x4e4>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc8:	441c      	add	r4, r3
 8003cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cce:	2200      	movs	r2, #0
 8003cd0:	673b      	str	r3, [r7, #112]	; 0x70
 8003cd2:	677a      	str	r2, [r7, #116]	; 0x74
 8003cd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ce8:	4641      	mov	r1, r8
 8003cea:	1851      	adds	r1, r2, r1
 8003cec:	6039      	str	r1, [r7, #0]
 8003cee:	4649      	mov	r1, r9
 8003cf0:	414b      	adcs	r3, r1
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d00:	4659      	mov	r1, fp
 8003d02:	00cb      	lsls	r3, r1, #3
 8003d04:	4651      	mov	r1, sl
 8003d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	00ca      	lsls	r2, r1, #3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	4642      	mov	r2, r8
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	460a      	mov	r2, r1
 8003d1e:	eb42 0303 	adc.w	r3, r2, r3
 8003d22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d2e:	667a      	str	r2, [r7, #100]	; 0x64
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	008b      	lsls	r3, r1, #2
 8003d40:	4641      	mov	r1, r8
 8003d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d46:	4641      	mov	r1, r8
 8003d48:	008a      	lsls	r2, r1, #2
 8003d4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d4e:	f7fc fa9f 	bl	8000290 <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <UART_SetConfig+0x4e4>)
 8003d58:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	2164      	movs	r1, #100	; 0x64
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	3332      	adds	r3, #50	; 0x32
 8003d6a:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <UART_SetConfig+0x4e4>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	f003 020f 	and.w	r2, r3, #15
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4422      	add	r2, r4
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	bf00      	nop
 8003d82:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d86:	46bd      	mov	sp, r7
 8003d88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d8c:	51eb851f 	.word	0x51eb851f

08003d90 <malloc>:
 8003d90:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <malloc+0xc>)
 8003d92:	4601      	mov	r1, r0
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	f000 b82b 	b.w	8003df0 <_malloc_r>
 8003d9a:	bf00      	nop
 8003d9c:	20000064 	.word	0x20000064

08003da0 <free>:
 8003da0:	4b02      	ldr	r3, [pc, #8]	; (8003dac <free+0xc>)
 8003da2:	4601      	mov	r1, r0
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f000 ba45 	b.w	8004234 <_free_r>
 8003daa:	bf00      	nop
 8003dac:	20000064 	.word	0x20000064

08003db0 <sbrk_aligned>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	4e0e      	ldr	r6, [pc, #56]	; (8003dec <sbrk_aligned+0x3c>)
 8003db4:	460c      	mov	r4, r1
 8003db6:	6831      	ldr	r1, [r6, #0]
 8003db8:	4605      	mov	r5, r0
 8003dba:	b911      	cbnz	r1, 8003dc2 <sbrk_aligned+0x12>
 8003dbc:	f000 f9fc 	bl	80041b8 <_sbrk_r>
 8003dc0:	6030      	str	r0, [r6, #0]
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f000 f9f7 	bl	80041b8 <_sbrk_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	d00a      	beq.n	8003de4 <sbrk_aligned+0x34>
 8003dce:	1cc4      	adds	r4, r0, #3
 8003dd0:	f024 0403 	bic.w	r4, r4, #3
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d007      	beq.n	8003de8 <sbrk_aligned+0x38>
 8003dd8:	1a21      	subs	r1, r4, r0
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f000 f9ec 	bl	80041b8 <_sbrk_r>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d101      	bne.n	8003de8 <sbrk_aligned+0x38>
 8003de4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003de8:	4620      	mov	r0, r4
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	200001c4 	.word	0x200001c4

08003df0 <_malloc_r>:
 8003df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003df4:	1ccd      	adds	r5, r1, #3
 8003df6:	f025 0503 	bic.w	r5, r5, #3
 8003dfa:	3508      	adds	r5, #8
 8003dfc:	2d0c      	cmp	r5, #12
 8003dfe:	bf38      	it	cc
 8003e00:	250c      	movcc	r5, #12
 8003e02:	2d00      	cmp	r5, #0
 8003e04:	4607      	mov	r7, r0
 8003e06:	db01      	blt.n	8003e0c <_malloc_r+0x1c>
 8003e08:	42a9      	cmp	r1, r5
 8003e0a:	d905      	bls.n	8003e18 <_malloc_r+0x28>
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	2600      	movs	r6, #0
 8003e12:	4630      	mov	r0, r6
 8003e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003eec <_malloc_r+0xfc>
 8003e1c:	f000 f868 	bl	8003ef0 <__malloc_lock>
 8003e20:	f8d8 3000 	ldr.w	r3, [r8]
 8003e24:	461c      	mov	r4, r3
 8003e26:	bb5c      	cbnz	r4, 8003e80 <_malloc_r+0x90>
 8003e28:	4629      	mov	r1, r5
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	f7ff ffc0 	bl	8003db0 <sbrk_aligned>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	4604      	mov	r4, r0
 8003e34:	d155      	bne.n	8003ee2 <_malloc_r+0xf2>
 8003e36:	f8d8 4000 	ldr.w	r4, [r8]
 8003e3a:	4626      	mov	r6, r4
 8003e3c:	2e00      	cmp	r6, #0
 8003e3e:	d145      	bne.n	8003ecc <_malloc_r+0xdc>
 8003e40:	2c00      	cmp	r4, #0
 8003e42:	d048      	beq.n	8003ed6 <_malloc_r+0xe6>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	4631      	mov	r1, r6
 8003e48:	4638      	mov	r0, r7
 8003e4a:	eb04 0903 	add.w	r9, r4, r3
 8003e4e:	f000 f9b3 	bl	80041b8 <_sbrk_r>
 8003e52:	4581      	cmp	r9, r0
 8003e54:	d13f      	bne.n	8003ed6 <_malloc_r+0xe6>
 8003e56:	6821      	ldr	r1, [r4, #0]
 8003e58:	1a6d      	subs	r5, r5, r1
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f7ff ffa7 	bl	8003db0 <sbrk_aligned>
 8003e62:	3001      	adds	r0, #1
 8003e64:	d037      	beq.n	8003ed6 <_malloc_r+0xe6>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	442b      	add	r3, r5
 8003e6a:	6023      	str	r3, [r4, #0]
 8003e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d038      	beq.n	8003ee6 <_malloc_r+0xf6>
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	42a2      	cmp	r2, r4
 8003e78:	d12b      	bne.n	8003ed2 <_malloc_r+0xe2>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	e00f      	b.n	8003ea0 <_malloc_r+0xb0>
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	1b52      	subs	r2, r2, r5
 8003e84:	d41f      	bmi.n	8003ec6 <_malloc_r+0xd6>
 8003e86:	2a0b      	cmp	r2, #11
 8003e88:	d917      	bls.n	8003eba <_malloc_r+0xca>
 8003e8a:	1961      	adds	r1, r4, r5
 8003e8c:	42a3      	cmp	r3, r4
 8003e8e:	6025      	str	r5, [r4, #0]
 8003e90:	bf18      	it	ne
 8003e92:	6059      	strne	r1, [r3, #4]
 8003e94:	6863      	ldr	r3, [r4, #4]
 8003e96:	bf08      	it	eq
 8003e98:	f8c8 1000 	streq.w	r1, [r8]
 8003e9c:	5162      	str	r2, [r4, r5]
 8003e9e:	604b      	str	r3, [r1, #4]
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f104 060b 	add.w	r6, r4, #11
 8003ea6:	f000 f829 	bl	8003efc <__malloc_unlock>
 8003eaa:	f026 0607 	bic.w	r6, r6, #7
 8003eae:	1d23      	adds	r3, r4, #4
 8003eb0:	1af2      	subs	r2, r6, r3
 8003eb2:	d0ae      	beq.n	8003e12 <_malloc_r+0x22>
 8003eb4:	1b9b      	subs	r3, r3, r6
 8003eb6:	50a3      	str	r3, [r4, r2]
 8003eb8:	e7ab      	b.n	8003e12 <_malloc_r+0x22>
 8003eba:	42a3      	cmp	r3, r4
 8003ebc:	6862      	ldr	r2, [r4, #4]
 8003ebe:	d1dd      	bne.n	8003e7c <_malloc_r+0x8c>
 8003ec0:	f8c8 2000 	str.w	r2, [r8]
 8003ec4:	e7ec      	b.n	8003ea0 <_malloc_r+0xb0>
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	6864      	ldr	r4, [r4, #4]
 8003eca:	e7ac      	b.n	8003e26 <_malloc_r+0x36>
 8003ecc:	4634      	mov	r4, r6
 8003ece:	6876      	ldr	r6, [r6, #4]
 8003ed0:	e7b4      	b.n	8003e3c <_malloc_r+0x4c>
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	e7cc      	b.n	8003e70 <_malloc_r+0x80>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4638      	mov	r0, r7
 8003edc:	f000 f80e 	bl	8003efc <__malloc_unlock>
 8003ee0:	e797      	b.n	8003e12 <_malloc_r+0x22>
 8003ee2:	6025      	str	r5, [r4, #0]
 8003ee4:	e7dc      	b.n	8003ea0 <_malloc_r+0xb0>
 8003ee6:	605b      	str	r3, [r3, #4]
 8003ee8:	deff      	udf	#255	; 0xff
 8003eea:	bf00      	nop
 8003eec:	200001c0 	.word	0x200001c0

08003ef0 <__malloc_lock>:
 8003ef0:	4801      	ldr	r0, [pc, #4]	; (8003ef8 <__malloc_lock+0x8>)
 8003ef2:	f000 b99c 	b.w	800422e <__retarget_lock_acquire_recursive>
 8003ef6:	bf00      	nop
 8003ef8:	20000304 	.word	0x20000304

08003efc <__malloc_unlock>:
 8003efc:	4801      	ldr	r0, [pc, #4]	; (8003f04 <__malloc_unlock+0x8>)
 8003efe:	f000 b997 	b.w	8004230 <__retarget_lock_release_recursive>
 8003f02:	bf00      	nop
 8003f04:	20000304 	.word	0x20000304

08003f08 <siprintf>:
 8003f08:	b40e      	push	{r1, r2, r3}
 8003f0a:	b500      	push	{lr}
 8003f0c:	b09c      	sub	sp, #112	; 0x70
 8003f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f10:	9002      	str	r0, [sp, #8]
 8003f12:	9006      	str	r0, [sp, #24]
 8003f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f18:	4809      	ldr	r0, [pc, #36]	; (8003f40 <siprintf+0x38>)
 8003f1a:	9107      	str	r1, [sp, #28]
 8003f1c:	9104      	str	r1, [sp, #16]
 8003f1e:	4909      	ldr	r1, [pc, #36]	; (8003f44 <siprintf+0x3c>)
 8003f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f24:	9105      	str	r1, [sp, #20]
 8003f26:	6800      	ldr	r0, [r0, #0]
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	a902      	add	r1, sp, #8
 8003f2c:	f000 fa28 	bl	8004380 <_svfiprintf_r>
 8003f30:	9b02      	ldr	r3, [sp, #8]
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	b01c      	add	sp, #112	; 0x70
 8003f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f3c:	b003      	add	sp, #12
 8003f3e:	4770      	bx	lr
 8003f40:	20000064 	.word	0x20000064
 8003f44:	ffff0208 	.word	0xffff0208

08003f48 <std>:
 8003f48:	2300      	movs	r3, #0
 8003f4a:	b510      	push	{r4, lr}
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f56:	6083      	str	r3, [r0, #8]
 8003f58:	8181      	strh	r1, [r0, #12]
 8003f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f5c:	81c2      	strh	r2, [r0, #14]
 8003f5e:	6183      	str	r3, [r0, #24]
 8003f60:	4619      	mov	r1, r3
 8003f62:	2208      	movs	r2, #8
 8003f64:	305c      	adds	r0, #92	; 0x5c
 8003f66:	f000 f91f 	bl	80041a8 <memset>
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <std+0x58>)
 8003f6c:	6263      	str	r3, [r4, #36]	; 0x24
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <std+0x5c>)
 8003f70:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <std+0x60>)
 8003f74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <std+0x64>)
 8003f78:	6323      	str	r3, [r4, #48]	; 0x30
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <std+0x68>)
 8003f7c:	6224      	str	r4, [r4, #32]
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	d006      	beq.n	8003f90 <std+0x48>
 8003f82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003f86:	4294      	cmp	r4, r2
 8003f88:	d002      	beq.n	8003f90 <std+0x48>
 8003f8a:	33d0      	adds	r3, #208	; 0xd0
 8003f8c:	429c      	cmp	r4, r3
 8003f8e:	d105      	bne.n	8003f9c <std+0x54>
 8003f90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f98:	f000 b948 	b.w	800422c <__retarget_lock_init_recursive>
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	bf00      	nop
 8003fa0:	08004c81 	.word	0x08004c81
 8003fa4:	08004ca3 	.word	0x08004ca3
 8003fa8:	08004cdb 	.word	0x08004cdb
 8003fac:	08004cff 	.word	0x08004cff
 8003fb0:	200001c8 	.word	0x200001c8

08003fb4 <stdio_exit_handler>:
 8003fb4:	4a02      	ldr	r2, [pc, #8]	; (8003fc0 <stdio_exit_handler+0xc>)
 8003fb6:	4903      	ldr	r1, [pc, #12]	; (8003fc4 <stdio_exit_handler+0x10>)
 8003fb8:	4803      	ldr	r0, [pc, #12]	; (8003fc8 <stdio_exit_handler+0x14>)
 8003fba:	f000 b869 	b.w	8004090 <_fwalk_sglue>
 8003fbe:	bf00      	nop
 8003fc0:	2000000c 	.word	0x2000000c
 8003fc4:	08004c31 	.word	0x08004c31
 8003fc8:	20000018 	.word	0x20000018

08003fcc <cleanup_stdio>:
 8003fcc:	6841      	ldr	r1, [r0, #4]
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <cleanup_stdio+0x34>)
 8003fd0:	4299      	cmp	r1, r3
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	d001      	beq.n	8003fdc <cleanup_stdio+0x10>
 8003fd8:	f000 fe2a 	bl	8004c30 <_fflush_r>
 8003fdc:	68a1      	ldr	r1, [r4, #8]
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <cleanup_stdio+0x38>)
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	d002      	beq.n	8003fea <cleanup_stdio+0x1e>
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f000 fe23 	bl	8004c30 <_fflush_r>
 8003fea:	68e1      	ldr	r1, [r4, #12]
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <cleanup_stdio+0x3c>)
 8003fee:	4299      	cmp	r1, r3
 8003ff0:	d004      	beq.n	8003ffc <cleanup_stdio+0x30>
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ff8:	f000 be1a 	b.w	8004c30 <_fflush_r>
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	bf00      	nop
 8004000:	200001c8 	.word	0x200001c8
 8004004:	20000230 	.word	0x20000230
 8004008:	20000298 	.word	0x20000298

0800400c <global_stdio_init.part.0>:
 800400c:	b510      	push	{r4, lr}
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <global_stdio_init.part.0+0x30>)
 8004010:	4c0b      	ldr	r4, [pc, #44]	; (8004040 <global_stdio_init.part.0+0x34>)
 8004012:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <global_stdio_init.part.0+0x38>)
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	4620      	mov	r0, r4
 8004018:	2200      	movs	r2, #0
 800401a:	2104      	movs	r1, #4
 800401c:	f7ff ff94 	bl	8003f48 <std>
 8004020:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004024:	2201      	movs	r2, #1
 8004026:	2109      	movs	r1, #9
 8004028:	f7ff ff8e 	bl	8003f48 <std>
 800402c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004030:	2202      	movs	r2, #2
 8004032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004036:	2112      	movs	r1, #18
 8004038:	f7ff bf86 	b.w	8003f48 <std>
 800403c:	20000300 	.word	0x20000300
 8004040:	200001c8 	.word	0x200001c8
 8004044:	08003fb5 	.word	0x08003fb5

08004048 <__sfp_lock_acquire>:
 8004048:	4801      	ldr	r0, [pc, #4]	; (8004050 <__sfp_lock_acquire+0x8>)
 800404a:	f000 b8f0 	b.w	800422e <__retarget_lock_acquire_recursive>
 800404e:	bf00      	nop
 8004050:	20000305 	.word	0x20000305

08004054 <__sfp_lock_release>:
 8004054:	4801      	ldr	r0, [pc, #4]	; (800405c <__sfp_lock_release+0x8>)
 8004056:	f000 b8eb 	b.w	8004230 <__retarget_lock_release_recursive>
 800405a:	bf00      	nop
 800405c:	20000305 	.word	0x20000305

08004060 <__sinit>:
 8004060:	b510      	push	{r4, lr}
 8004062:	4604      	mov	r4, r0
 8004064:	f7ff fff0 	bl	8004048 <__sfp_lock_acquire>
 8004068:	6a23      	ldr	r3, [r4, #32]
 800406a:	b11b      	cbz	r3, 8004074 <__sinit+0x14>
 800406c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004070:	f7ff bff0 	b.w	8004054 <__sfp_lock_release>
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <__sinit+0x28>)
 8004076:	6223      	str	r3, [r4, #32]
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <__sinit+0x2c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f5      	bne.n	800406c <__sinit+0xc>
 8004080:	f7ff ffc4 	bl	800400c <global_stdio_init.part.0>
 8004084:	e7f2      	b.n	800406c <__sinit+0xc>
 8004086:	bf00      	nop
 8004088:	08003fcd 	.word	0x08003fcd
 800408c:	20000300 	.word	0x20000300

08004090 <_fwalk_sglue>:
 8004090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004094:	4607      	mov	r7, r0
 8004096:	4688      	mov	r8, r1
 8004098:	4614      	mov	r4, r2
 800409a:	2600      	movs	r6, #0
 800409c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040a0:	f1b9 0901 	subs.w	r9, r9, #1
 80040a4:	d505      	bpl.n	80040b2 <_fwalk_sglue+0x22>
 80040a6:	6824      	ldr	r4, [r4, #0]
 80040a8:	2c00      	cmp	r4, #0
 80040aa:	d1f7      	bne.n	800409c <_fwalk_sglue+0xc>
 80040ac:	4630      	mov	r0, r6
 80040ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b2:	89ab      	ldrh	r3, [r5, #12]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d907      	bls.n	80040c8 <_fwalk_sglue+0x38>
 80040b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040bc:	3301      	adds	r3, #1
 80040be:	d003      	beq.n	80040c8 <_fwalk_sglue+0x38>
 80040c0:	4629      	mov	r1, r5
 80040c2:	4638      	mov	r0, r7
 80040c4:	47c0      	blx	r8
 80040c6:	4306      	orrs	r6, r0
 80040c8:	3568      	adds	r5, #104	; 0x68
 80040ca:	e7e9      	b.n	80040a0 <_fwalk_sglue+0x10>

080040cc <iprintf>:
 80040cc:	b40f      	push	{r0, r1, r2, r3}
 80040ce:	b507      	push	{r0, r1, r2, lr}
 80040d0:	4906      	ldr	r1, [pc, #24]	; (80040ec <iprintf+0x20>)
 80040d2:	ab04      	add	r3, sp, #16
 80040d4:	6808      	ldr	r0, [r1, #0]
 80040d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80040da:	6881      	ldr	r1, [r0, #8]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	f000 fa77 	bl	80045d0 <_vfiprintf_r>
 80040e2:	b003      	add	sp, #12
 80040e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040e8:	b004      	add	sp, #16
 80040ea:	4770      	bx	lr
 80040ec:	20000064 	.word	0x20000064

080040f0 <_puts_r>:
 80040f0:	6a03      	ldr	r3, [r0, #32]
 80040f2:	b570      	push	{r4, r5, r6, lr}
 80040f4:	6884      	ldr	r4, [r0, #8]
 80040f6:	4605      	mov	r5, r0
 80040f8:	460e      	mov	r6, r1
 80040fa:	b90b      	cbnz	r3, 8004100 <_puts_r+0x10>
 80040fc:	f7ff ffb0 	bl	8004060 <__sinit>
 8004100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004102:	07db      	lsls	r3, r3, #31
 8004104:	d405      	bmi.n	8004112 <_puts_r+0x22>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	0598      	lsls	r0, r3, #22
 800410a:	d402      	bmi.n	8004112 <_puts_r+0x22>
 800410c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800410e:	f000 f88e 	bl	800422e <__retarget_lock_acquire_recursive>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	0719      	lsls	r1, r3, #28
 8004116:	d513      	bpl.n	8004140 <_puts_r+0x50>
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	b18b      	cbz	r3, 8004140 <_puts_r+0x50>
 800411c:	3e01      	subs	r6, #1
 800411e:	68a3      	ldr	r3, [r4, #8]
 8004120:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004124:	3b01      	subs	r3, #1
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	b9e9      	cbnz	r1, 8004166 <_puts_r+0x76>
 800412a:	2b00      	cmp	r3, #0
 800412c:	da2e      	bge.n	800418c <_puts_r+0x9c>
 800412e:	4622      	mov	r2, r4
 8004130:	210a      	movs	r1, #10
 8004132:	4628      	mov	r0, r5
 8004134:	f000 fe16 	bl	8004d64 <__swbuf_r>
 8004138:	3001      	adds	r0, #1
 800413a:	d007      	beq.n	800414c <_puts_r+0x5c>
 800413c:	250a      	movs	r5, #10
 800413e:	e007      	b.n	8004150 <_puts_r+0x60>
 8004140:	4621      	mov	r1, r4
 8004142:	4628      	mov	r0, r5
 8004144:	f000 fe4c 	bl	8004de0 <__swsetup_r>
 8004148:	2800      	cmp	r0, #0
 800414a:	d0e7      	beq.n	800411c <_puts_r+0x2c>
 800414c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004152:	07da      	lsls	r2, r3, #31
 8004154:	d405      	bmi.n	8004162 <_puts_r+0x72>
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	059b      	lsls	r3, r3, #22
 800415a:	d402      	bmi.n	8004162 <_puts_r+0x72>
 800415c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800415e:	f000 f867 	bl	8004230 <__retarget_lock_release_recursive>
 8004162:	4628      	mov	r0, r5
 8004164:	bd70      	pop	{r4, r5, r6, pc}
 8004166:	2b00      	cmp	r3, #0
 8004168:	da04      	bge.n	8004174 <_puts_r+0x84>
 800416a:	69a2      	ldr	r2, [r4, #24]
 800416c:	429a      	cmp	r2, r3
 800416e:	dc06      	bgt.n	800417e <_puts_r+0x8e>
 8004170:	290a      	cmp	r1, #10
 8004172:	d004      	beq.n	800417e <_puts_r+0x8e>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	6022      	str	r2, [r4, #0]
 800417a:	7019      	strb	r1, [r3, #0]
 800417c:	e7cf      	b.n	800411e <_puts_r+0x2e>
 800417e:	4622      	mov	r2, r4
 8004180:	4628      	mov	r0, r5
 8004182:	f000 fdef 	bl	8004d64 <__swbuf_r>
 8004186:	3001      	adds	r0, #1
 8004188:	d1c9      	bne.n	800411e <_puts_r+0x2e>
 800418a:	e7df      	b.n	800414c <_puts_r+0x5c>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	250a      	movs	r5, #10
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	6022      	str	r2, [r4, #0]
 8004194:	701d      	strb	r5, [r3, #0]
 8004196:	e7db      	b.n	8004150 <_puts_r+0x60>

08004198 <puts>:
 8004198:	4b02      	ldr	r3, [pc, #8]	; (80041a4 <puts+0xc>)
 800419a:	4601      	mov	r1, r0
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	f7ff bfa7 	b.w	80040f0 <_puts_r>
 80041a2:	bf00      	nop
 80041a4:	20000064 	.word	0x20000064

080041a8 <memset>:
 80041a8:	4402      	add	r2, r0
 80041aa:	4603      	mov	r3, r0
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d100      	bne.n	80041b2 <memset+0xa>
 80041b0:	4770      	bx	lr
 80041b2:	f803 1b01 	strb.w	r1, [r3], #1
 80041b6:	e7f9      	b.n	80041ac <memset+0x4>

080041b8 <_sbrk_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4d06      	ldr	r5, [pc, #24]	; (80041d4 <_sbrk_r+0x1c>)
 80041bc:	2300      	movs	r3, #0
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7fd f96c 	bl	80014a0 <_sbrk>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_sbrk_r+0x1a>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_sbrk_r+0x1a>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000308 	.word	0x20000308

080041d8 <__errno>:
 80041d8:	4b01      	ldr	r3, [pc, #4]	; (80041e0 <__errno+0x8>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000064 	.word	0x20000064

080041e4 <__libc_init_array>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4d0d      	ldr	r5, [pc, #52]	; (800421c <__libc_init_array+0x38>)
 80041e8:	4c0d      	ldr	r4, [pc, #52]	; (8004220 <__libc_init_array+0x3c>)
 80041ea:	1b64      	subs	r4, r4, r5
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	2600      	movs	r6, #0
 80041f0:	42a6      	cmp	r6, r4
 80041f2:	d109      	bne.n	8004208 <__libc_init_array+0x24>
 80041f4:	4d0b      	ldr	r5, [pc, #44]	; (8004224 <__libc_init_array+0x40>)
 80041f6:	4c0c      	ldr	r4, [pc, #48]	; (8004228 <__libc_init_array+0x44>)
 80041f8:	f000 ff44 	bl	8005084 <_init>
 80041fc:	1b64      	subs	r4, r4, r5
 80041fe:	10a4      	asrs	r4, r4, #2
 8004200:	2600      	movs	r6, #0
 8004202:	42a6      	cmp	r6, r4
 8004204:	d105      	bne.n	8004212 <__libc_init_array+0x2e>
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	f855 3b04 	ldr.w	r3, [r5], #4
 800420c:	4798      	blx	r3
 800420e:	3601      	adds	r6, #1
 8004210:	e7ee      	b.n	80041f0 <__libc_init_array+0xc>
 8004212:	f855 3b04 	ldr.w	r3, [r5], #4
 8004216:	4798      	blx	r3
 8004218:	3601      	adds	r6, #1
 800421a:	e7f2      	b.n	8004202 <__libc_init_array+0x1e>
 800421c:	08005168 	.word	0x08005168
 8004220:	08005168 	.word	0x08005168
 8004224:	08005168 	.word	0x08005168
 8004228:	0800516c 	.word	0x0800516c

0800422c <__retarget_lock_init_recursive>:
 800422c:	4770      	bx	lr

0800422e <__retarget_lock_acquire_recursive>:
 800422e:	4770      	bx	lr

08004230 <__retarget_lock_release_recursive>:
 8004230:	4770      	bx	lr
	...

08004234 <_free_r>:
 8004234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004236:	2900      	cmp	r1, #0
 8004238:	d044      	beq.n	80042c4 <_free_r+0x90>
 800423a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800423e:	9001      	str	r0, [sp, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f1a1 0404 	sub.w	r4, r1, #4
 8004246:	bfb8      	it	lt
 8004248:	18e4      	addlt	r4, r4, r3
 800424a:	f7ff fe51 	bl	8003ef0 <__malloc_lock>
 800424e:	4a1e      	ldr	r2, [pc, #120]	; (80042c8 <_free_r+0x94>)
 8004250:	9801      	ldr	r0, [sp, #4]
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	b933      	cbnz	r3, 8004264 <_free_r+0x30>
 8004256:	6063      	str	r3, [r4, #4]
 8004258:	6014      	str	r4, [r2, #0]
 800425a:	b003      	add	sp, #12
 800425c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004260:	f7ff be4c 	b.w	8003efc <__malloc_unlock>
 8004264:	42a3      	cmp	r3, r4
 8004266:	d908      	bls.n	800427a <_free_r+0x46>
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	1961      	adds	r1, r4, r5
 800426c:	428b      	cmp	r3, r1
 800426e:	bf01      	itttt	eq
 8004270:	6819      	ldreq	r1, [r3, #0]
 8004272:	685b      	ldreq	r3, [r3, #4]
 8004274:	1949      	addeq	r1, r1, r5
 8004276:	6021      	streq	r1, [r4, #0]
 8004278:	e7ed      	b.n	8004256 <_free_r+0x22>
 800427a:	461a      	mov	r2, r3
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	b10b      	cbz	r3, 8004284 <_free_r+0x50>
 8004280:	42a3      	cmp	r3, r4
 8004282:	d9fa      	bls.n	800427a <_free_r+0x46>
 8004284:	6811      	ldr	r1, [r2, #0]
 8004286:	1855      	adds	r5, r2, r1
 8004288:	42a5      	cmp	r5, r4
 800428a:	d10b      	bne.n	80042a4 <_free_r+0x70>
 800428c:	6824      	ldr	r4, [r4, #0]
 800428e:	4421      	add	r1, r4
 8004290:	1854      	adds	r4, r2, r1
 8004292:	42a3      	cmp	r3, r4
 8004294:	6011      	str	r1, [r2, #0]
 8004296:	d1e0      	bne.n	800425a <_free_r+0x26>
 8004298:	681c      	ldr	r4, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	6053      	str	r3, [r2, #4]
 800429e:	440c      	add	r4, r1
 80042a0:	6014      	str	r4, [r2, #0]
 80042a2:	e7da      	b.n	800425a <_free_r+0x26>
 80042a4:	d902      	bls.n	80042ac <_free_r+0x78>
 80042a6:	230c      	movs	r3, #12
 80042a8:	6003      	str	r3, [r0, #0]
 80042aa:	e7d6      	b.n	800425a <_free_r+0x26>
 80042ac:	6825      	ldr	r5, [r4, #0]
 80042ae:	1961      	adds	r1, r4, r5
 80042b0:	428b      	cmp	r3, r1
 80042b2:	bf04      	itt	eq
 80042b4:	6819      	ldreq	r1, [r3, #0]
 80042b6:	685b      	ldreq	r3, [r3, #4]
 80042b8:	6063      	str	r3, [r4, #4]
 80042ba:	bf04      	itt	eq
 80042bc:	1949      	addeq	r1, r1, r5
 80042be:	6021      	streq	r1, [r4, #0]
 80042c0:	6054      	str	r4, [r2, #4]
 80042c2:	e7ca      	b.n	800425a <_free_r+0x26>
 80042c4:	b003      	add	sp, #12
 80042c6:	bd30      	pop	{r4, r5, pc}
 80042c8:	200001c0 	.word	0x200001c0

080042cc <__ssputs_r>:
 80042cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	688e      	ldr	r6, [r1, #8]
 80042d2:	461f      	mov	r7, r3
 80042d4:	42be      	cmp	r6, r7
 80042d6:	680b      	ldr	r3, [r1, #0]
 80042d8:	4682      	mov	sl, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	4690      	mov	r8, r2
 80042de:	d82c      	bhi.n	800433a <__ssputs_r+0x6e>
 80042e0:	898a      	ldrh	r2, [r1, #12]
 80042e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042e6:	d026      	beq.n	8004336 <__ssputs_r+0x6a>
 80042e8:	6965      	ldr	r5, [r4, #20]
 80042ea:	6909      	ldr	r1, [r1, #16]
 80042ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042f0:	eba3 0901 	sub.w	r9, r3, r1
 80042f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042f8:	1c7b      	adds	r3, r7, #1
 80042fa:	444b      	add	r3, r9
 80042fc:	106d      	asrs	r5, r5, #1
 80042fe:	429d      	cmp	r5, r3
 8004300:	bf38      	it	cc
 8004302:	461d      	movcc	r5, r3
 8004304:	0553      	lsls	r3, r2, #21
 8004306:	d527      	bpl.n	8004358 <__ssputs_r+0x8c>
 8004308:	4629      	mov	r1, r5
 800430a:	f7ff fd71 	bl	8003df0 <_malloc_r>
 800430e:	4606      	mov	r6, r0
 8004310:	b360      	cbz	r0, 800436c <__ssputs_r+0xa0>
 8004312:	6921      	ldr	r1, [r4, #16]
 8004314:	464a      	mov	r2, r9
 8004316:	f000 fe9f 	bl	8005058 <memcpy>
 800431a:	89a3      	ldrh	r3, [r4, #12]
 800431c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004324:	81a3      	strh	r3, [r4, #12]
 8004326:	6126      	str	r6, [r4, #16]
 8004328:	6165      	str	r5, [r4, #20]
 800432a:	444e      	add	r6, r9
 800432c:	eba5 0509 	sub.w	r5, r5, r9
 8004330:	6026      	str	r6, [r4, #0]
 8004332:	60a5      	str	r5, [r4, #8]
 8004334:	463e      	mov	r6, r7
 8004336:	42be      	cmp	r6, r7
 8004338:	d900      	bls.n	800433c <__ssputs_r+0x70>
 800433a:	463e      	mov	r6, r7
 800433c:	6820      	ldr	r0, [r4, #0]
 800433e:	4632      	mov	r2, r6
 8004340:	4641      	mov	r1, r8
 8004342:	f000 fe07 	bl	8004f54 <memmove>
 8004346:	68a3      	ldr	r3, [r4, #8]
 8004348:	1b9b      	subs	r3, r3, r6
 800434a:	60a3      	str	r3, [r4, #8]
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	4433      	add	r3, r6
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	2000      	movs	r0, #0
 8004354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004358:	462a      	mov	r2, r5
 800435a:	f000 fcd4 	bl	8004d06 <_realloc_r>
 800435e:	4606      	mov	r6, r0
 8004360:	2800      	cmp	r0, #0
 8004362:	d1e0      	bne.n	8004326 <__ssputs_r+0x5a>
 8004364:	6921      	ldr	r1, [r4, #16]
 8004366:	4650      	mov	r0, sl
 8004368:	f7ff ff64 	bl	8004234 <_free_r>
 800436c:	230c      	movs	r3, #12
 800436e:	f8ca 3000 	str.w	r3, [sl]
 8004372:	89a3      	ldrh	r3, [r4, #12]
 8004374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004378:	81a3      	strh	r3, [r4, #12]
 800437a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800437e:	e7e9      	b.n	8004354 <__ssputs_r+0x88>

08004380 <_svfiprintf_r>:
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	4698      	mov	r8, r3
 8004386:	898b      	ldrh	r3, [r1, #12]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	b09d      	sub	sp, #116	; 0x74
 800438c:	4607      	mov	r7, r0
 800438e:	460d      	mov	r5, r1
 8004390:	4614      	mov	r4, r2
 8004392:	d50e      	bpl.n	80043b2 <_svfiprintf_r+0x32>
 8004394:	690b      	ldr	r3, [r1, #16]
 8004396:	b963      	cbnz	r3, 80043b2 <_svfiprintf_r+0x32>
 8004398:	2140      	movs	r1, #64	; 0x40
 800439a:	f7ff fd29 	bl	8003df0 <_malloc_r>
 800439e:	6028      	str	r0, [r5, #0]
 80043a0:	6128      	str	r0, [r5, #16]
 80043a2:	b920      	cbnz	r0, 80043ae <_svfiprintf_r+0x2e>
 80043a4:	230c      	movs	r3, #12
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043ac:	e0d0      	b.n	8004550 <_svfiprintf_r+0x1d0>
 80043ae:	2340      	movs	r3, #64	; 0x40
 80043b0:	616b      	str	r3, [r5, #20]
 80043b2:	2300      	movs	r3, #0
 80043b4:	9309      	str	r3, [sp, #36]	; 0x24
 80043b6:	2320      	movs	r3, #32
 80043b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80043c0:	2330      	movs	r3, #48	; 0x30
 80043c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004568 <_svfiprintf_r+0x1e8>
 80043c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043ca:	f04f 0901 	mov.w	r9, #1
 80043ce:	4623      	mov	r3, r4
 80043d0:	469a      	mov	sl, r3
 80043d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043d6:	b10a      	cbz	r2, 80043dc <_svfiprintf_r+0x5c>
 80043d8:	2a25      	cmp	r2, #37	; 0x25
 80043da:	d1f9      	bne.n	80043d0 <_svfiprintf_r+0x50>
 80043dc:	ebba 0b04 	subs.w	fp, sl, r4
 80043e0:	d00b      	beq.n	80043fa <_svfiprintf_r+0x7a>
 80043e2:	465b      	mov	r3, fp
 80043e4:	4622      	mov	r2, r4
 80043e6:	4629      	mov	r1, r5
 80043e8:	4638      	mov	r0, r7
 80043ea:	f7ff ff6f 	bl	80042cc <__ssputs_r>
 80043ee:	3001      	adds	r0, #1
 80043f0:	f000 80a9 	beq.w	8004546 <_svfiprintf_r+0x1c6>
 80043f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043f6:	445a      	add	r2, fp
 80043f8:	9209      	str	r2, [sp, #36]	; 0x24
 80043fa:	f89a 3000 	ldrb.w	r3, [sl]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80a1 	beq.w	8004546 <_svfiprintf_r+0x1c6>
 8004404:	2300      	movs	r3, #0
 8004406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800440a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800440e:	f10a 0a01 	add.w	sl, sl, #1
 8004412:	9304      	str	r3, [sp, #16]
 8004414:	9307      	str	r3, [sp, #28]
 8004416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800441a:	931a      	str	r3, [sp, #104]	; 0x68
 800441c:	4654      	mov	r4, sl
 800441e:	2205      	movs	r2, #5
 8004420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004424:	4850      	ldr	r0, [pc, #320]	; (8004568 <_svfiprintf_r+0x1e8>)
 8004426:	f7fb fee3 	bl	80001f0 <memchr>
 800442a:	9a04      	ldr	r2, [sp, #16]
 800442c:	b9d8      	cbnz	r0, 8004466 <_svfiprintf_r+0xe6>
 800442e:	06d0      	lsls	r0, r2, #27
 8004430:	bf44      	itt	mi
 8004432:	2320      	movmi	r3, #32
 8004434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004438:	0711      	lsls	r1, r2, #28
 800443a:	bf44      	itt	mi
 800443c:	232b      	movmi	r3, #43	; 0x2b
 800443e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004442:	f89a 3000 	ldrb.w	r3, [sl]
 8004446:	2b2a      	cmp	r3, #42	; 0x2a
 8004448:	d015      	beq.n	8004476 <_svfiprintf_r+0xf6>
 800444a:	9a07      	ldr	r2, [sp, #28]
 800444c:	4654      	mov	r4, sl
 800444e:	2000      	movs	r0, #0
 8004450:	f04f 0c0a 	mov.w	ip, #10
 8004454:	4621      	mov	r1, r4
 8004456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800445a:	3b30      	subs	r3, #48	; 0x30
 800445c:	2b09      	cmp	r3, #9
 800445e:	d94d      	bls.n	80044fc <_svfiprintf_r+0x17c>
 8004460:	b1b0      	cbz	r0, 8004490 <_svfiprintf_r+0x110>
 8004462:	9207      	str	r2, [sp, #28]
 8004464:	e014      	b.n	8004490 <_svfiprintf_r+0x110>
 8004466:	eba0 0308 	sub.w	r3, r0, r8
 800446a:	fa09 f303 	lsl.w	r3, r9, r3
 800446e:	4313      	orrs	r3, r2
 8004470:	9304      	str	r3, [sp, #16]
 8004472:	46a2      	mov	sl, r4
 8004474:	e7d2      	b.n	800441c <_svfiprintf_r+0x9c>
 8004476:	9b03      	ldr	r3, [sp, #12]
 8004478:	1d19      	adds	r1, r3, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	9103      	str	r1, [sp, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	bfbb      	ittet	lt
 8004482:	425b      	neglt	r3, r3
 8004484:	f042 0202 	orrlt.w	r2, r2, #2
 8004488:	9307      	strge	r3, [sp, #28]
 800448a:	9307      	strlt	r3, [sp, #28]
 800448c:	bfb8      	it	lt
 800448e:	9204      	strlt	r2, [sp, #16]
 8004490:	7823      	ldrb	r3, [r4, #0]
 8004492:	2b2e      	cmp	r3, #46	; 0x2e
 8004494:	d10c      	bne.n	80044b0 <_svfiprintf_r+0x130>
 8004496:	7863      	ldrb	r3, [r4, #1]
 8004498:	2b2a      	cmp	r3, #42	; 0x2a
 800449a:	d134      	bne.n	8004506 <_svfiprintf_r+0x186>
 800449c:	9b03      	ldr	r3, [sp, #12]
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	9203      	str	r2, [sp, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bfb8      	it	lt
 80044a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044ac:	3402      	adds	r4, #2
 80044ae:	9305      	str	r3, [sp, #20]
 80044b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004578 <_svfiprintf_r+0x1f8>
 80044b4:	7821      	ldrb	r1, [r4, #0]
 80044b6:	2203      	movs	r2, #3
 80044b8:	4650      	mov	r0, sl
 80044ba:	f7fb fe99 	bl	80001f0 <memchr>
 80044be:	b138      	cbz	r0, 80044d0 <_svfiprintf_r+0x150>
 80044c0:	9b04      	ldr	r3, [sp, #16]
 80044c2:	eba0 000a 	sub.w	r0, r0, sl
 80044c6:	2240      	movs	r2, #64	; 0x40
 80044c8:	4082      	lsls	r2, r0
 80044ca:	4313      	orrs	r3, r2
 80044cc:	3401      	adds	r4, #1
 80044ce:	9304      	str	r3, [sp, #16]
 80044d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d4:	4825      	ldr	r0, [pc, #148]	; (800456c <_svfiprintf_r+0x1ec>)
 80044d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044da:	2206      	movs	r2, #6
 80044dc:	f7fb fe88 	bl	80001f0 <memchr>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d038      	beq.n	8004556 <_svfiprintf_r+0x1d6>
 80044e4:	4b22      	ldr	r3, [pc, #136]	; (8004570 <_svfiprintf_r+0x1f0>)
 80044e6:	bb1b      	cbnz	r3, 8004530 <_svfiprintf_r+0x1b0>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	3307      	adds	r3, #7
 80044ec:	f023 0307 	bic.w	r3, r3, #7
 80044f0:	3308      	adds	r3, #8
 80044f2:	9303      	str	r3, [sp, #12]
 80044f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f6:	4433      	add	r3, r6
 80044f8:	9309      	str	r3, [sp, #36]	; 0x24
 80044fa:	e768      	b.n	80043ce <_svfiprintf_r+0x4e>
 80044fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004500:	460c      	mov	r4, r1
 8004502:	2001      	movs	r0, #1
 8004504:	e7a6      	b.n	8004454 <_svfiprintf_r+0xd4>
 8004506:	2300      	movs	r3, #0
 8004508:	3401      	adds	r4, #1
 800450a:	9305      	str	r3, [sp, #20]
 800450c:	4619      	mov	r1, r3
 800450e:	f04f 0c0a 	mov.w	ip, #10
 8004512:	4620      	mov	r0, r4
 8004514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004518:	3a30      	subs	r2, #48	; 0x30
 800451a:	2a09      	cmp	r2, #9
 800451c:	d903      	bls.n	8004526 <_svfiprintf_r+0x1a6>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0c6      	beq.n	80044b0 <_svfiprintf_r+0x130>
 8004522:	9105      	str	r1, [sp, #20]
 8004524:	e7c4      	b.n	80044b0 <_svfiprintf_r+0x130>
 8004526:	fb0c 2101 	mla	r1, ip, r1, r2
 800452a:	4604      	mov	r4, r0
 800452c:	2301      	movs	r3, #1
 800452e:	e7f0      	b.n	8004512 <_svfiprintf_r+0x192>
 8004530:	ab03      	add	r3, sp, #12
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	462a      	mov	r2, r5
 8004536:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <_svfiprintf_r+0x1f4>)
 8004538:	a904      	add	r1, sp, #16
 800453a:	4638      	mov	r0, r7
 800453c:	f3af 8000 	nop.w
 8004540:	1c42      	adds	r2, r0, #1
 8004542:	4606      	mov	r6, r0
 8004544:	d1d6      	bne.n	80044f4 <_svfiprintf_r+0x174>
 8004546:	89ab      	ldrh	r3, [r5, #12]
 8004548:	065b      	lsls	r3, r3, #25
 800454a:	f53f af2d 	bmi.w	80043a8 <_svfiprintf_r+0x28>
 800454e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004550:	b01d      	add	sp, #116	; 0x74
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	ab03      	add	r3, sp, #12
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	462a      	mov	r2, r5
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <_svfiprintf_r+0x1f4>)
 800455e:	a904      	add	r1, sp, #16
 8004560:	4638      	mov	r0, r7
 8004562:	f000 f9bd 	bl	80048e0 <_printf_i>
 8004566:	e7eb      	b.n	8004540 <_svfiprintf_r+0x1c0>
 8004568:	0800512c 	.word	0x0800512c
 800456c:	08005136 	.word	0x08005136
 8004570:	00000000 	.word	0x00000000
 8004574:	080042cd 	.word	0x080042cd
 8004578:	08005132 	.word	0x08005132

0800457c <__sfputc_r>:
 800457c:	6893      	ldr	r3, [r2, #8]
 800457e:	3b01      	subs	r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	b410      	push	{r4}
 8004584:	6093      	str	r3, [r2, #8]
 8004586:	da08      	bge.n	800459a <__sfputc_r+0x1e>
 8004588:	6994      	ldr	r4, [r2, #24]
 800458a:	42a3      	cmp	r3, r4
 800458c:	db01      	blt.n	8004592 <__sfputc_r+0x16>
 800458e:	290a      	cmp	r1, #10
 8004590:	d103      	bne.n	800459a <__sfputc_r+0x1e>
 8004592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004596:	f000 bbe5 	b.w	8004d64 <__swbuf_r>
 800459a:	6813      	ldr	r3, [r2, #0]
 800459c:	1c58      	adds	r0, r3, #1
 800459e:	6010      	str	r0, [r2, #0]
 80045a0:	7019      	strb	r1, [r3, #0]
 80045a2:	4608      	mov	r0, r1
 80045a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <__sfputs_r>:
 80045aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ac:	4606      	mov	r6, r0
 80045ae:	460f      	mov	r7, r1
 80045b0:	4614      	mov	r4, r2
 80045b2:	18d5      	adds	r5, r2, r3
 80045b4:	42ac      	cmp	r4, r5
 80045b6:	d101      	bne.n	80045bc <__sfputs_r+0x12>
 80045b8:	2000      	movs	r0, #0
 80045ba:	e007      	b.n	80045cc <__sfputs_r+0x22>
 80045bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c0:	463a      	mov	r2, r7
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7ff ffda 	bl	800457c <__sfputc_r>
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	d1f3      	bne.n	80045b4 <__sfputs_r+0xa>
 80045cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045d0 <_vfiprintf_r>:
 80045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d4:	460d      	mov	r5, r1
 80045d6:	b09d      	sub	sp, #116	; 0x74
 80045d8:	4614      	mov	r4, r2
 80045da:	4698      	mov	r8, r3
 80045dc:	4606      	mov	r6, r0
 80045de:	b118      	cbz	r0, 80045e8 <_vfiprintf_r+0x18>
 80045e0:	6a03      	ldr	r3, [r0, #32]
 80045e2:	b90b      	cbnz	r3, 80045e8 <_vfiprintf_r+0x18>
 80045e4:	f7ff fd3c 	bl	8004060 <__sinit>
 80045e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045ea:	07d9      	lsls	r1, r3, #31
 80045ec:	d405      	bmi.n	80045fa <_vfiprintf_r+0x2a>
 80045ee:	89ab      	ldrh	r3, [r5, #12]
 80045f0:	059a      	lsls	r2, r3, #22
 80045f2:	d402      	bmi.n	80045fa <_vfiprintf_r+0x2a>
 80045f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045f6:	f7ff fe1a 	bl	800422e <__retarget_lock_acquire_recursive>
 80045fa:	89ab      	ldrh	r3, [r5, #12]
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	d501      	bpl.n	8004604 <_vfiprintf_r+0x34>
 8004600:	692b      	ldr	r3, [r5, #16]
 8004602:	b99b      	cbnz	r3, 800462c <_vfiprintf_r+0x5c>
 8004604:	4629      	mov	r1, r5
 8004606:	4630      	mov	r0, r6
 8004608:	f000 fbea 	bl	8004de0 <__swsetup_r>
 800460c:	b170      	cbz	r0, 800462c <_vfiprintf_r+0x5c>
 800460e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004610:	07dc      	lsls	r4, r3, #31
 8004612:	d504      	bpl.n	800461e <_vfiprintf_r+0x4e>
 8004614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004618:	b01d      	add	sp, #116	; 0x74
 800461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461e:	89ab      	ldrh	r3, [r5, #12]
 8004620:	0598      	lsls	r0, r3, #22
 8004622:	d4f7      	bmi.n	8004614 <_vfiprintf_r+0x44>
 8004624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004626:	f7ff fe03 	bl	8004230 <__retarget_lock_release_recursive>
 800462a:	e7f3      	b.n	8004614 <_vfiprintf_r+0x44>
 800462c:	2300      	movs	r3, #0
 800462e:	9309      	str	r3, [sp, #36]	; 0x24
 8004630:	2320      	movs	r3, #32
 8004632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004636:	f8cd 800c 	str.w	r8, [sp, #12]
 800463a:	2330      	movs	r3, #48	; 0x30
 800463c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80047f0 <_vfiprintf_r+0x220>
 8004640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004644:	f04f 0901 	mov.w	r9, #1
 8004648:	4623      	mov	r3, r4
 800464a:	469a      	mov	sl, r3
 800464c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004650:	b10a      	cbz	r2, 8004656 <_vfiprintf_r+0x86>
 8004652:	2a25      	cmp	r2, #37	; 0x25
 8004654:	d1f9      	bne.n	800464a <_vfiprintf_r+0x7a>
 8004656:	ebba 0b04 	subs.w	fp, sl, r4
 800465a:	d00b      	beq.n	8004674 <_vfiprintf_r+0xa4>
 800465c:	465b      	mov	r3, fp
 800465e:	4622      	mov	r2, r4
 8004660:	4629      	mov	r1, r5
 8004662:	4630      	mov	r0, r6
 8004664:	f7ff ffa1 	bl	80045aa <__sfputs_r>
 8004668:	3001      	adds	r0, #1
 800466a:	f000 80a9 	beq.w	80047c0 <_vfiprintf_r+0x1f0>
 800466e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004670:	445a      	add	r2, fp
 8004672:	9209      	str	r2, [sp, #36]	; 0x24
 8004674:	f89a 3000 	ldrb.w	r3, [sl]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80a1 	beq.w	80047c0 <_vfiprintf_r+0x1f0>
 800467e:	2300      	movs	r3, #0
 8004680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004688:	f10a 0a01 	add.w	sl, sl, #1
 800468c:	9304      	str	r3, [sp, #16]
 800468e:	9307      	str	r3, [sp, #28]
 8004690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004694:	931a      	str	r3, [sp, #104]	; 0x68
 8004696:	4654      	mov	r4, sl
 8004698:	2205      	movs	r2, #5
 800469a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800469e:	4854      	ldr	r0, [pc, #336]	; (80047f0 <_vfiprintf_r+0x220>)
 80046a0:	f7fb fda6 	bl	80001f0 <memchr>
 80046a4:	9a04      	ldr	r2, [sp, #16]
 80046a6:	b9d8      	cbnz	r0, 80046e0 <_vfiprintf_r+0x110>
 80046a8:	06d1      	lsls	r1, r2, #27
 80046aa:	bf44      	itt	mi
 80046ac:	2320      	movmi	r3, #32
 80046ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046b2:	0713      	lsls	r3, r2, #28
 80046b4:	bf44      	itt	mi
 80046b6:	232b      	movmi	r3, #43	; 0x2b
 80046b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046bc:	f89a 3000 	ldrb.w	r3, [sl]
 80046c0:	2b2a      	cmp	r3, #42	; 0x2a
 80046c2:	d015      	beq.n	80046f0 <_vfiprintf_r+0x120>
 80046c4:	9a07      	ldr	r2, [sp, #28]
 80046c6:	4654      	mov	r4, sl
 80046c8:	2000      	movs	r0, #0
 80046ca:	f04f 0c0a 	mov.w	ip, #10
 80046ce:	4621      	mov	r1, r4
 80046d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046d4:	3b30      	subs	r3, #48	; 0x30
 80046d6:	2b09      	cmp	r3, #9
 80046d8:	d94d      	bls.n	8004776 <_vfiprintf_r+0x1a6>
 80046da:	b1b0      	cbz	r0, 800470a <_vfiprintf_r+0x13a>
 80046dc:	9207      	str	r2, [sp, #28]
 80046de:	e014      	b.n	800470a <_vfiprintf_r+0x13a>
 80046e0:	eba0 0308 	sub.w	r3, r0, r8
 80046e4:	fa09 f303 	lsl.w	r3, r9, r3
 80046e8:	4313      	orrs	r3, r2
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	46a2      	mov	sl, r4
 80046ee:	e7d2      	b.n	8004696 <_vfiprintf_r+0xc6>
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	1d19      	adds	r1, r3, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	9103      	str	r1, [sp, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bfbb      	ittet	lt
 80046fc:	425b      	neglt	r3, r3
 80046fe:	f042 0202 	orrlt.w	r2, r2, #2
 8004702:	9307      	strge	r3, [sp, #28]
 8004704:	9307      	strlt	r3, [sp, #28]
 8004706:	bfb8      	it	lt
 8004708:	9204      	strlt	r2, [sp, #16]
 800470a:	7823      	ldrb	r3, [r4, #0]
 800470c:	2b2e      	cmp	r3, #46	; 0x2e
 800470e:	d10c      	bne.n	800472a <_vfiprintf_r+0x15a>
 8004710:	7863      	ldrb	r3, [r4, #1]
 8004712:	2b2a      	cmp	r3, #42	; 0x2a
 8004714:	d134      	bne.n	8004780 <_vfiprintf_r+0x1b0>
 8004716:	9b03      	ldr	r3, [sp, #12]
 8004718:	1d1a      	adds	r2, r3, #4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	9203      	str	r2, [sp, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfb8      	it	lt
 8004722:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004726:	3402      	adds	r4, #2
 8004728:	9305      	str	r3, [sp, #20]
 800472a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004800 <_vfiprintf_r+0x230>
 800472e:	7821      	ldrb	r1, [r4, #0]
 8004730:	2203      	movs	r2, #3
 8004732:	4650      	mov	r0, sl
 8004734:	f7fb fd5c 	bl	80001f0 <memchr>
 8004738:	b138      	cbz	r0, 800474a <_vfiprintf_r+0x17a>
 800473a:	9b04      	ldr	r3, [sp, #16]
 800473c:	eba0 000a 	sub.w	r0, r0, sl
 8004740:	2240      	movs	r2, #64	; 0x40
 8004742:	4082      	lsls	r2, r0
 8004744:	4313      	orrs	r3, r2
 8004746:	3401      	adds	r4, #1
 8004748:	9304      	str	r3, [sp, #16]
 800474a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800474e:	4829      	ldr	r0, [pc, #164]	; (80047f4 <_vfiprintf_r+0x224>)
 8004750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004754:	2206      	movs	r2, #6
 8004756:	f7fb fd4b 	bl	80001f0 <memchr>
 800475a:	2800      	cmp	r0, #0
 800475c:	d03f      	beq.n	80047de <_vfiprintf_r+0x20e>
 800475e:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <_vfiprintf_r+0x228>)
 8004760:	bb1b      	cbnz	r3, 80047aa <_vfiprintf_r+0x1da>
 8004762:	9b03      	ldr	r3, [sp, #12]
 8004764:	3307      	adds	r3, #7
 8004766:	f023 0307 	bic.w	r3, r3, #7
 800476a:	3308      	adds	r3, #8
 800476c:	9303      	str	r3, [sp, #12]
 800476e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004770:	443b      	add	r3, r7
 8004772:	9309      	str	r3, [sp, #36]	; 0x24
 8004774:	e768      	b.n	8004648 <_vfiprintf_r+0x78>
 8004776:	fb0c 3202 	mla	r2, ip, r2, r3
 800477a:	460c      	mov	r4, r1
 800477c:	2001      	movs	r0, #1
 800477e:	e7a6      	b.n	80046ce <_vfiprintf_r+0xfe>
 8004780:	2300      	movs	r3, #0
 8004782:	3401      	adds	r4, #1
 8004784:	9305      	str	r3, [sp, #20]
 8004786:	4619      	mov	r1, r3
 8004788:	f04f 0c0a 	mov.w	ip, #10
 800478c:	4620      	mov	r0, r4
 800478e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004792:	3a30      	subs	r2, #48	; 0x30
 8004794:	2a09      	cmp	r2, #9
 8004796:	d903      	bls.n	80047a0 <_vfiprintf_r+0x1d0>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0c6      	beq.n	800472a <_vfiprintf_r+0x15a>
 800479c:	9105      	str	r1, [sp, #20]
 800479e:	e7c4      	b.n	800472a <_vfiprintf_r+0x15a>
 80047a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80047a4:	4604      	mov	r4, r0
 80047a6:	2301      	movs	r3, #1
 80047a8:	e7f0      	b.n	800478c <_vfiprintf_r+0x1bc>
 80047aa:	ab03      	add	r3, sp, #12
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	462a      	mov	r2, r5
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <_vfiprintf_r+0x22c>)
 80047b2:	a904      	add	r1, sp, #16
 80047b4:	4630      	mov	r0, r6
 80047b6:	f3af 8000 	nop.w
 80047ba:	4607      	mov	r7, r0
 80047bc:	1c78      	adds	r0, r7, #1
 80047be:	d1d6      	bne.n	800476e <_vfiprintf_r+0x19e>
 80047c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047c2:	07d9      	lsls	r1, r3, #31
 80047c4:	d405      	bmi.n	80047d2 <_vfiprintf_r+0x202>
 80047c6:	89ab      	ldrh	r3, [r5, #12]
 80047c8:	059a      	lsls	r2, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_vfiprintf_r+0x202>
 80047cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047ce:	f7ff fd2f 	bl	8004230 <__retarget_lock_release_recursive>
 80047d2:	89ab      	ldrh	r3, [r5, #12]
 80047d4:	065b      	lsls	r3, r3, #25
 80047d6:	f53f af1d 	bmi.w	8004614 <_vfiprintf_r+0x44>
 80047da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047dc:	e71c      	b.n	8004618 <_vfiprintf_r+0x48>
 80047de:	ab03      	add	r3, sp, #12
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	462a      	mov	r2, r5
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <_vfiprintf_r+0x22c>)
 80047e6:	a904      	add	r1, sp, #16
 80047e8:	4630      	mov	r0, r6
 80047ea:	f000 f879 	bl	80048e0 <_printf_i>
 80047ee:	e7e4      	b.n	80047ba <_vfiprintf_r+0x1ea>
 80047f0:	0800512c 	.word	0x0800512c
 80047f4:	08005136 	.word	0x08005136
 80047f8:	00000000 	.word	0x00000000
 80047fc:	080045ab 	.word	0x080045ab
 8004800:	08005132 	.word	0x08005132

08004804 <_printf_common>:
 8004804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	4616      	mov	r6, r2
 800480a:	4699      	mov	r9, r3
 800480c:	688a      	ldr	r2, [r1, #8]
 800480e:	690b      	ldr	r3, [r1, #16]
 8004810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004814:	4293      	cmp	r3, r2
 8004816:	bfb8      	it	lt
 8004818:	4613      	movlt	r3, r2
 800481a:	6033      	str	r3, [r6, #0]
 800481c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004820:	4607      	mov	r7, r0
 8004822:	460c      	mov	r4, r1
 8004824:	b10a      	cbz	r2, 800482a <_printf_common+0x26>
 8004826:	3301      	adds	r3, #1
 8004828:	6033      	str	r3, [r6, #0]
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	0699      	lsls	r1, r3, #26
 800482e:	bf42      	ittt	mi
 8004830:	6833      	ldrmi	r3, [r6, #0]
 8004832:	3302      	addmi	r3, #2
 8004834:	6033      	strmi	r3, [r6, #0]
 8004836:	6825      	ldr	r5, [r4, #0]
 8004838:	f015 0506 	ands.w	r5, r5, #6
 800483c:	d106      	bne.n	800484c <_printf_common+0x48>
 800483e:	f104 0a19 	add.w	sl, r4, #25
 8004842:	68e3      	ldr	r3, [r4, #12]
 8004844:	6832      	ldr	r2, [r6, #0]
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	42ab      	cmp	r3, r5
 800484a:	dc26      	bgt.n	800489a <_printf_common+0x96>
 800484c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004850:	1e13      	subs	r3, r2, #0
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	bf18      	it	ne
 8004856:	2301      	movne	r3, #1
 8004858:	0692      	lsls	r2, r2, #26
 800485a:	d42b      	bmi.n	80048b4 <_printf_common+0xb0>
 800485c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004860:	4649      	mov	r1, r9
 8004862:	4638      	mov	r0, r7
 8004864:	47c0      	blx	r8
 8004866:	3001      	adds	r0, #1
 8004868:	d01e      	beq.n	80048a8 <_printf_common+0xa4>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	6922      	ldr	r2, [r4, #16]
 800486e:	f003 0306 	and.w	r3, r3, #6
 8004872:	2b04      	cmp	r3, #4
 8004874:	bf02      	ittt	eq
 8004876:	68e5      	ldreq	r5, [r4, #12]
 8004878:	6833      	ldreq	r3, [r6, #0]
 800487a:	1aed      	subeq	r5, r5, r3
 800487c:	68a3      	ldr	r3, [r4, #8]
 800487e:	bf0c      	ite	eq
 8004880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004884:	2500      	movne	r5, #0
 8004886:	4293      	cmp	r3, r2
 8004888:	bfc4      	itt	gt
 800488a:	1a9b      	subgt	r3, r3, r2
 800488c:	18ed      	addgt	r5, r5, r3
 800488e:	2600      	movs	r6, #0
 8004890:	341a      	adds	r4, #26
 8004892:	42b5      	cmp	r5, r6
 8004894:	d11a      	bne.n	80048cc <_printf_common+0xc8>
 8004896:	2000      	movs	r0, #0
 8004898:	e008      	b.n	80048ac <_printf_common+0xa8>
 800489a:	2301      	movs	r3, #1
 800489c:	4652      	mov	r2, sl
 800489e:	4649      	mov	r1, r9
 80048a0:	4638      	mov	r0, r7
 80048a2:	47c0      	blx	r8
 80048a4:	3001      	adds	r0, #1
 80048a6:	d103      	bne.n	80048b0 <_printf_common+0xac>
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b0:	3501      	adds	r5, #1
 80048b2:	e7c6      	b.n	8004842 <_printf_common+0x3e>
 80048b4:	18e1      	adds	r1, r4, r3
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	2030      	movs	r0, #48	; 0x30
 80048ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048be:	4422      	add	r2, r4
 80048c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c8:	3302      	adds	r3, #2
 80048ca:	e7c7      	b.n	800485c <_printf_common+0x58>
 80048cc:	2301      	movs	r3, #1
 80048ce:	4622      	mov	r2, r4
 80048d0:	4649      	mov	r1, r9
 80048d2:	4638      	mov	r0, r7
 80048d4:	47c0      	blx	r8
 80048d6:	3001      	adds	r0, #1
 80048d8:	d0e6      	beq.n	80048a8 <_printf_common+0xa4>
 80048da:	3601      	adds	r6, #1
 80048dc:	e7d9      	b.n	8004892 <_printf_common+0x8e>
	...

080048e0 <_printf_i>:
 80048e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	7e0f      	ldrb	r7, [r1, #24]
 80048e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048e8:	2f78      	cmp	r7, #120	; 0x78
 80048ea:	4691      	mov	r9, r2
 80048ec:	4680      	mov	r8, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	469a      	mov	sl, r3
 80048f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048f6:	d807      	bhi.n	8004908 <_printf_i+0x28>
 80048f8:	2f62      	cmp	r7, #98	; 0x62
 80048fa:	d80a      	bhi.n	8004912 <_printf_i+0x32>
 80048fc:	2f00      	cmp	r7, #0
 80048fe:	f000 80d4 	beq.w	8004aaa <_printf_i+0x1ca>
 8004902:	2f58      	cmp	r7, #88	; 0x58
 8004904:	f000 80c0 	beq.w	8004a88 <_printf_i+0x1a8>
 8004908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800490c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004910:	e03a      	b.n	8004988 <_printf_i+0xa8>
 8004912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004916:	2b15      	cmp	r3, #21
 8004918:	d8f6      	bhi.n	8004908 <_printf_i+0x28>
 800491a:	a101      	add	r1, pc, #4	; (adr r1, 8004920 <_printf_i+0x40>)
 800491c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004920:	08004979 	.word	0x08004979
 8004924:	0800498d 	.word	0x0800498d
 8004928:	08004909 	.word	0x08004909
 800492c:	08004909 	.word	0x08004909
 8004930:	08004909 	.word	0x08004909
 8004934:	08004909 	.word	0x08004909
 8004938:	0800498d 	.word	0x0800498d
 800493c:	08004909 	.word	0x08004909
 8004940:	08004909 	.word	0x08004909
 8004944:	08004909 	.word	0x08004909
 8004948:	08004909 	.word	0x08004909
 800494c:	08004a91 	.word	0x08004a91
 8004950:	080049b9 	.word	0x080049b9
 8004954:	08004a4b 	.word	0x08004a4b
 8004958:	08004909 	.word	0x08004909
 800495c:	08004909 	.word	0x08004909
 8004960:	08004ab3 	.word	0x08004ab3
 8004964:	08004909 	.word	0x08004909
 8004968:	080049b9 	.word	0x080049b9
 800496c:	08004909 	.word	0x08004909
 8004970:	08004909 	.word	0x08004909
 8004974:	08004a53 	.word	0x08004a53
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	602a      	str	r2, [r5, #0]
 8004980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004988:	2301      	movs	r3, #1
 800498a:	e09f      	b.n	8004acc <_printf_i+0x1ec>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	682b      	ldr	r3, [r5, #0]
 8004990:	0607      	lsls	r7, r0, #24
 8004992:	f103 0104 	add.w	r1, r3, #4
 8004996:	6029      	str	r1, [r5, #0]
 8004998:	d501      	bpl.n	800499e <_printf_i+0xbe>
 800499a:	681e      	ldr	r6, [r3, #0]
 800499c:	e003      	b.n	80049a6 <_printf_i+0xc6>
 800499e:	0646      	lsls	r6, r0, #25
 80049a0:	d5fb      	bpl.n	800499a <_printf_i+0xba>
 80049a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049a6:	2e00      	cmp	r6, #0
 80049a8:	da03      	bge.n	80049b2 <_printf_i+0xd2>
 80049aa:	232d      	movs	r3, #45	; 0x2d
 80049ac:	4276      	negs	r6, r6
 80049ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b2:	485a      	ldr	r0, [pc, #360]	; (8004b1c <_printf_i+0x23c>)
 80049b4:	230a      	movs	r3, #10
 80049b6:	e012      	b.n	80049de <_printf_i+0xfe>
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	6820      	ldr	r0, [r4, #0]
 80049bc:	1d19      	adds	r1, r3, #4
 80049be:	6029      	str	r1, [r5, #0]
 80049c0:	0605      	lsls	r5, r0, #24
 80049c2:	d501      	bpl.n	80049c8 <_printf_i+0xe8>
 80049c4:	681e      	ldr	r6, [r3, #0]
 80049c6:	e002      	b.n	80049ce <_printf_i+0xee>
 80049c8:	0641      	lsls	r1, r0, #25
 80049ca:	d5fb      	bpl.n	80049c4 <_printf_i+0xe4>
 80049cc:	881e      	ldrh	r6, [r3, #0]
 80049ce:	4853      	ldr	r0, [pc, #332]	; (8004b1c <_printf_i+0x23c>)
 80049d0:	2f6f      	cmp	r7, #111	; 0x6f
 80049d2:	bf0c      	ite	eq
 80049d4:	2308      	moveq	r3, #8
 80049d6:	230a      	movne	r3, #10
 80049d8:	2100      	movs	r1, #0
 80049da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049de:	6865      	ldr	r5, [r4, #4]
 80049e0:	60a5      	str	r5, [r4, #8]
 80049e2:	2d00      	cmp	r5, #0
 80049e4:	bfa2      	ittt	ge
 80049e6:	6821      	ldrge	r1, [r4, #0]
 80049e8:	f021 0104 	bicge.w	r1, r1, #4
 80049ec:	6021      	strge	r1, [r4, #0]
 80049ee:	b90e      	cbnz	r6, 80049f4 <_printf_i+0x114>
 80049f0:	2d00      	cmp	r5, #0
 80049f2:	d04b      	beq.n	8004a8c <_printf_i+0x1ac>
 80049f4:	4615      	mov	r5, r2
 80049f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049fa:	fb03 6711 	mls	r7, r3, r1, r6
 80049fe:	5dc7      	ldrb	r7, [r0, r7]
 8004a00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a04:	4637      	mov	r7, r6
 8004a06:	42bb      	cmp	r3, r7
 8004a08:	460e      	mov	r6, r1
 8004a0a:	d9f4      	bls.n	80049f6 <_printf_i+0x116>
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d10b      	bne.n	8004a28 <_printf_i+0x148>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	07de      	lsls	r6, r3, #31
 8004a14:	d508      	bpl.n	8004a28 <_printf_i+0x148>
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	6861      	ldr	r1, [r4, #4]
 8004a1a:	4299      	cmp	r1, r3
 8004a1c:	bfde      	ittt	le
 8004a1e:	2330      	movle	r3, #48	; 0x30
 8004a20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a28:	1b52      	subs	r2, r2, r5
 8004a2a:	6122      	str	r2, [r4, #16]
 8004a2c:	f8cd a000 	str.w	sl, [sp]
 8004a30:	464b      	mov	r3, r9
 8004a32:	aa03      	add	r2, sp, #12
 8004a34:	4621      	mov	r1, r4
 8004a36:	4640      	mov	r0, r8
 8004a38:	f7ff fee4 	bl	8004804 <_printf_common>
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d14a      	bne.n	8004ad6 <_printf_i+0x1f6>
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a44:	b004      	add	sp, #16
 8004a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	f043 0320 	orr.w	r3, r3, #32
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	4833      	ldr	r0, [pc, #204]	; (8004b20 <_printf_i+0x240>)
 8004a54:	2778      	movs	r7, #120	; 0x78
 8004a56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	6829      	ldr	r1, [r5, #0]
 8004a5e:	061f      	lsls	r7, r3, #24
 8004a60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a64:	d402      	bmi.n	8004a6c <_printf_i+0x18c>
 8004a66:	065f      	lsls	r7, r3, #25
 8004a68:	bf48      	it	mi
 8004a6a:	b2b6      	uxthmi	r6, r6
 8004a6c:	07df      	lsls	r7, r3, #31
 8004a6e:	bf48      	it	mi
 8004a70:	f043 0320 	orrmi.w	r3, r3, #32
 8004a74:	6029      	str	r1, [r5, #0]
 8004a76:	bf48      	it	mi
 8004a78:	6023      	strmi	r3, [r4, #0]
 8004a7a:	b91e      	cbnz	r6, 8004a84 <_printf_i+0x1a4>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	f023 0320 	bic.w	r3, r3, #32
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	2310      	movs	r3, #16
 8004a86:	e7a7      	b.n	80049d8 <_printf_i+0xf8>
 8004a88:	4824      	ldr	r0, [pc, #144]	; (8004b1c <_printf_i+0x23c>)
 8004a8a:	e7e4      	b.n	8004a56 <_printf_i+0x176>
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	e7bd      	b.n	8004a0c <_printf_i+0x12c>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	6826      	ldr	r6, [r4, #0]
 8004a94:	6961      	ldr	r1, [r4, #20]
 8004a96:	1d18      	adds	r0, r3, #4
 8004a98:	6028      	str	r0, [r5, #0]
 8004a9a:	0635      	lsls	r5, r6, #24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	d501      	bpl.n	8004aa4 <_printf_i+0x1c4>
 8004aa0:	6019      	str	r1, [r3, #0]
 8004aa2:	e002      	b.n	8004aaa <_printf_i+0x1ca>
 8004aa4:	0670      	lsls	r0, r6, #25
 8004aa6:	d5fb      	bpl.n	8004aa0 <_printf_i+0x1c0>
 8004aa8:	8019      	strh	r1, [r3, #0]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6123      	str	r3, [r4, #16]
 8004aae:	4615      	mov	r5, r2
 8004ab0:	e7bc      	b.n	8004a2c <_printf_i+0x14c>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	1d1a      	adds	r2, r3, #4
 8004ab6:	602a      	str	r2, [r5, #0]
 8004ab8:	681d      	ldr	r5, [r3, #0]
 8004aba:	6862      	ldr	r2, [r4, #4]
 8004abc:	2100      	movs	r1, #0
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f7fb fb96 	bl	80001f0 <memchr>
 8004ac4:	b108      	cbz	r0, 8004aca <_printf_i+0x1ea>
 8004ac6:	1b40      	subs	r0, r0, r5
 8004ac8:	6060      	str	r0, [r4, #4]
 8004aca:	6863      	ldr	r3, [r4, #4]
 8004acc:	6123      	str	r3, [r4, #16]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad4:	e7aa      	b.n	8004a2c <_printf_i+0x14c>
 8004ad6:	6923      	ldr	r3, [r4, #16]
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4649      	mov	r1, r9
 8004adc:	4640      	mov	r0, r8
 8004ade:	47d0      	blx	sl
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d0ad      	beq.n	8004a40 <_printf_i+0x160>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	079b      	lsls	r3, r3, #30
 8004ae8:	d413      	bmi.n	8004b12 <_printf_i+0x232>
 8004aea:	68e0      	ldr	r0, [r4, #12]
 8004aec:	9b03      	ldr	r3, [sp, #12]
 8004aee:	4298      	cmp	r0, r3
 8004af0:	bfb8      	it	lt
 8004af2:	4618      	movlt	r0, r3
 8004af4:	e7a6      	b.n	8004a44 <_printf_i+0x164>
 8004af6:	2301      	movs	r3, #1
 8004af8:	4632      	mov	r2, r6
 8004afa:	4649      	mov	r1, r9
 8004afc:	4640      	mov	r0, r8
 8004afe:	47d0      	blx	sl
 8004b00:	3001      	adds	r0, #1
 8004b02:	d09d      	beq.n	8004a40 <_printf_i+0x160>
 8004b04:	3501      	adds	r5, #1
 8004b06:	68e3      	ldr	r3, [r4, #12]
 8004b08:	9903      	ldr	r1, [sp, #12]
 8004b0a:	1a5b      	subs	r3, r3, r1
 8004b0c:	42ab      	cmp	r3, r5
 8004b0e:	dcf2      	bgt.n	8004af6 <_printf_i+0x216>
 8004b10:	e7eb      	b.n	8004aea <_printf_i+0x20a>
 8004b12:	2500      	movs	r5, #0
 8004b14:	f104 0619 	add.w	r6, r4, #25
 8004b18:	e7f5      	b.n	8004b06 <_printf_i+0x226>
 8004b1a:	bf00      	nop
 8004b1c:	0800513d 	.word	0x0800513d
 8004b20:	0800514e 	.word	0x0800514e

08004b24 <__sflush_r>:
 8004b24:	898a      	ldrh	r2, [r1, #12]
 8004b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	0710      	lsls	r0, r2, #28
 8004b2e:	460c      	mov	r4, r1
 8004b30:	d458      	bmi.n	8004be4 <__sflush_r+0xc0>
 8004b32:	684b      	ldr	r3, [r1, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	dc05      	bgt.n	8004b44 <__sflush_r+0x20>
 8004b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	dc02      	bgt.n	8004b44 <__sflush_r+0x20>
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b46:	2e00      	cmp	r6, #0
 8004b48:	d0f9      	beq.n	8004b3e <__sflush_r+0x1a>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b50:	682f      	ldr	r7, [r5, #0]
 8004b52:	6a21      	ldr	r1, [r4, #32]
 8004b54:	602b      	str	r3, [r5, #0]
 8004b56:	d032      	beq.n	8004bbe <__sflush_r+0x9a>
 8004b58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	075a      	lsls	r2, r3, #29
 8004b5e:	d505      	bpl.n	8004b6c <__sflush_r+0x48>
 8004b60:	6863      	ldr	r3, [r4, #4]
 8004b62:	1ac0      	subs	r0, r0, r3
 8004b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b66:	b10b      	cbz	r3, 8004b6c <__sflush_r+0x48>
 8004b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b6a:	1ac0      	subs	r0, r0, r3
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4602      	mov	r2, r0
 8004b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b72:	6a21      	ldr	r1, [r4, #32]
 8004b74:	4628      	mov	r0, r5
 8004b76:	47b0      	blx	r6
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	d106      	bne.n	8004b8c <__sflush_r+0x68>
 8004b7e:	6829      	ldr	r1, [r5, #0]
 8004b80:	291d      	cmp	r1, #29
 8004b82:	d82b      	bhi.n	8004bdc <__sflush_r+0xb8>
 8004b84:	4a29      	ldr	r2, [pc, #164]	; (8004c2c <__sflush_r+0x108>)
 8004b86:	410a      	asrs	r2, r1
 8004b88:	07d6      	lsls	r6, r2, #31
 8004b8a:	d427      	bmi.n	8004bdc <__sflush_r+0xb8>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	6062      	str	r2, [r4, #4]
 8004b90:	04d9      	lsls	r1, r3, #19
 8004b92:	6922      	ldr	r2, [r4, #16]
 8004b94:	6022      	str	r2, [r4, #0]
 8004b96:	d504      	bpl.n	8004ba2 <__sflush_r+0x7e>
 8004b98:	1c42      	adds	r2, r0, #1
 8004b9a:	d101      	bne.n	8004ba0 <__sflush_r+0x7c>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	b903      	cbnz	r3, 8004ba2 <__sflush_r+0x7e>
 8004ba0:	6560      	str	r0, [r4, #84]	; 0x54
 8004ba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ba4:	602f      	str	r7, [r5, #0]
 8004ba6:	2900      	cmp	r1, #0
 8004ba8:	d0c9      	beq.n	8004b3e <__sflush_r+0x1a>
 8004baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bae:	4299      	cmp	r1, r3
 8004bb0:	d002      	beq.n	8004bb8 <__sflush_r+0x94>
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f7ff fb3e 	bl	8004234 <_free_r>
 8004bb8:	2000      	movs	r0, #0
 8004bba:	6360      	str	r0, [r4, #52]	; 0x34
 8004bbc:	e7c0      	b.n	8004b40 <__sflush_r+0x1c>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b0      	blx	r6
 8004bc4:	1c41      	adds	r1, r0, #1
 8004bc6:	d1c8      	bne.n	8004b5a <__sflush_r+0x36>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0c5      	beq.n	8004b5a <__sflush_r+0x36>
 8004bce:	2b1d      	cmp	r3, #29
 8004bd0:	d001      	beq.n	8004bd6 <__sflush_r+0xb2>
 8004bd2:	2b16      	cmp	r3, #22
 8004bd4:	d101      	bne.n	8004bda <__sflush_r+0xb6>
 8004bd6:	602f      	str	r7, [r5, #0]
 8004bd8:	e7b1      	b.n	8004b3e <__sflush_r+0x1a>
 8004bda:	89a3      	ldrh	r3, [r4, #12]
 8004bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	e7ad      	b.n	8004b40 <__sflush_r+0x1c>
 8004be4:	690f      	ldr	r7, [r1, #16]
 8004be6:	2f00      	cmp	r7, #0
 8004be8:	d0a9      	beq.n	8004b3e <__sflush_r+0x1a>
 8004bea:	0793      	lsls	r3, r2, #30
 8004bec:	680e      	ldr	r6, [r1, #0]
 8004bee:	bf08      	it	eq
 8004bf0:	694b      	ldreq	r3, [r1, #20]
 8004bf2:	600f      	str	r7, [r1, #0]
 8004bf4:	bf18      	it	ne
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	eba6 0807 	sub.w	r8, r6, r7
 8004bfc:	608b      	str	r3, [r1, #8]
 8004bfe:	f1b8 0f00 	cmp.w	r8, #0
 8004c02:	dd9c      	ble.n	8004b3e <__sflush_r+0x1a>
 8004c04:	6a21      	ldr	r1, [r4, #32]
 8004c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c08:	4643      	mov	r3, r8
 8004c0a:	463a      	mov	r2, r7
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b0      	blx	r6
 8004c10:	2800      	cmp	r0, #0
 8004c12:	dc06      	bgt.n	8004c22 <__sflush_r+0xfe>
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c20:	e78e      	b.n	8004b40 <__sflush_r+0x1c>
 8004c22:	4407      	add	r7, r0
 8004c24:	eba8 0800 	sub.w	r8, r8, r0
 8004c28:	e7e9      	b.n	8004bfe <__sflush_r+0xda>
 8004c2a:	bf00      	nop
 8004c2c:	dfbffffe 	.word	0xdfbffffe

08004c30 <_fflush_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	690b      	ldr	r3, [r1, #16]
 8004c34:	4605      	mov	r5, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	b913      	cbnz	r3, 8004c40 <_fflush_r+0x10>
 8004c3a:	2500      	movs	r5, #0
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	b118      	cbz	r0, 8004c4a <_fflush_r+0x1a>
 8004c42:	6a03      	ldr	r3, [r0, #32]
 8004c44:	b90b      	cbnz	r3, 8004c4a <_fflush_r+0x1a>
 8004c46:	f7ff fa0b 	bl	8004060 <__sinit>
 8004c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f3      	beq.n	8004c3a <_fflush_r+0xa>
 8004c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c54:	07d0      	lsls	r0, r2, #31
 8004c56:	d404      	bmi.n	8004c62 <_fflush_r+0x32>
 8004c58:	0599      	lsls	r1, r3, #22
 8004c5a:	d402      	bmi.n	8004c62 <_fflush_r+0x32>
 8004c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c5e:	f7ff fae6 	bl	800422e <__retarget_lock_acquire_recursive>
 8004c62:	4628      	mov	r0, r5
 8004c64:	4621      	mov	r1, r4
 8004c66:	f7ff ff5d 	bl	8004b24 <__sflush_r>
 8004c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c6c:	07da      	lsls	r2, r3, #31
 8004c6e:	4605      	mov	r5, r0
 8004c70:	d4e4      	bmi.n	8004c3c <_fflush_r+0xc>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	059b      	lsls	r3, r3, #22
 8004c76:	d4e1      	bmi.n	8004c3c <_fflush_r+0xc>
 8004c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c7a:	f7ff fad9 	bl	8004230 <__retarget_lock_release_recursive>
 8004c7e:	e7dd      	b.n	8004c3c <_fflush_r+0xc>

08004c80 <__sread>:
 8004c80:	b510      	push	{r4, lr}
 8004c82:	460c      	mov	r4, r1
 8004c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c88:	f000 f9c2 	bl	8005010 <_read_r>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	bfab      	itete	ge
 8004c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c92:	89a3      	ldrhlt	r3, [r4, #12]
 8004c94:	181b      	addge	r3, r3, r0
 8004c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c9a:	bfac      	ite	ge
 8004c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c9e:	81a3      	strhlt	r3, [r4, #12]
 8004ca0:	bd10      	pop	{r4, pc}

08004ca2 <__swrite>:
 8004ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca6:	461f      	mov	r7, r3
 8004ca8:	898b      	ldrh	r3, [r1, #12]
 8004caa:	05db      	lsls	r3, r3, #23
 8004cac:	4605      	mov	r5, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	4616      	mov	r6, r2
 8004cb2:	d505      	bpl.n	8004cc0 <__swrite+0x1e>
 8004cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb8:	2302      	movs	r3, #2
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f000 f996 	bl	8004fec <_lseek_r>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	4632      	mov	r2, r6
 8004cce:	463b      	mov	r3, r7
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd6:	f000 b9ad 	b.w	8005034 <_write_r>

08004cda <__sseek>:
 8004cda:	b510      	push	{r4, lr}
 8004cdc:	460c      	mov	r4, r1
 8004cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce2:	f000 f983 	bl	8004fec <_lseek_r>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	bf15      	itete	ne
 8004cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cf6:	81a3      	strheq	r3, [r4, #12]
 8004cf8:	bf18      	it	ne
 8004cfa:	81a3      	strhne	r3, [r4, #12]
 8004cfc:	bd10      	pop	{r4, pc}

08004cfe <__sclose>:
 8004cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d02:	f000 b941 	b.w	8004f88 <_close_r>

08004d06 <_realloc_r>:
 8004d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	460e      	mov	r6, r1
 8004d10:	b921      	cbnz	r1, 8004d1c <_realloc_r+0x16>
 8004d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d16:	4611      	mov	r1, r2
 8004d18:	f7ff b86a 	b.w	8003df0 <_malloc_r>
 8004d1c:	b92a      	cbnz	r2, 8004d2a <_realloc_r+0x24>
 8004d1e:	f7ff fa89 	bl	8004234 <_free_r>
 8004d22:	4625      	mov	r5, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d2a:	f000 f9a3 	bl	8005074 <_malloc_usable_size_r>
 8004d2e:	4284      	cmp	r4, r0
 8004d30:	4607      	mov	r7, r0
 8004d32:	d802      	bhi.n	8004d3a <_realloc_r+0x34>
 8004d34:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d38:	d812      	bhi.n	8004d60 <_realloc_r+0x5a>
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	f7ff f857 	bl	8003df0 <_malloc_r>
 8004d42:	4605      	mov	r5, r0
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d0ed      	beq.n	8004d24 <_realloc_r+0x1e>
 8004d48:	42bc      	cmp	r4, r7
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	4631      	mov	r1, r6
 8004d4e:	bf28      	it	cs
 8004d50:	463a      	movcs	r2, r7
 8004d52:	f000 f981 	bl	8005058 <memcpy>
 8004d56:	4631      	mov	r1, r6
 8004d58:	4640      	mov	r0, r8
 8004d5a:	f7ff fa6b 	bl	8004234 <_free_r>
 8004d5e:	e7e1      	b.n	8004d24 <_realloc_r+0x1e>
 8004d60:	4635      	mov	r5, r6
 8004d62:	e7df      	b.n	8004d24 <_realloc_r+0x1e>

08004d64 <__swbuf_r>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	460e      	mov	r6, r1
 8004d68:	4614      	mov	r4, r2
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	b118      	cbz	r0, 8004d76 <__swbuf_r+0x12>
 8004d6e:	6a03      	ldr	r3, [r0, #32]
 8004d70:	b90b      	cbnz	r3, 8004d76 <__swbuf_r+0x12>
 8004d72:	f7ff f975 	bl	8004060 <__sinit>
 8004d76:	69a3      	ldr	r3, [r4, #24]
 8004d78:	60a3      	str	r3, [r4, #8]
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	071a      	lsls	r2, r3, #28
 8004d7e:	d525      	bpl.n	8004dcc <__swbuf_r+0x68>
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	b31b      	cbz	r3, 8004dcc <__swbuf_r+0x68>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	6922      	ldr	r2, [r4, #16]
 8004d88:	1a98      	subs	r0, r3, r2
 8004d8a:	6963      	ldr	r3, [r4, #20]
 8004d8c:	b2f6      	uxtb	r6, r6
 8004d8e:	4283      	cmp	r3, r0
 8004d90:	4637      	mov	r7, r6
 8004d92:	dc04      	bgt.n	8004d9e <__swbuf_r+0x3a>
 8004d94:	4621      	mov	r1, r4
 8004d96:	4628      	mov	r0, r5
 8004d98:	f7ff ff4a 	bl	8004c30 <_fflush_r>
 8004d9c:	b9e0      	cbnz	r0, 8004dd8 <__swbuf_r+0x74>
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	60a3      	str	r3, [r4, #8]
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	6022      	str	r2, [r4, #0]
 8004daa:	701e      	strb	r6, [r3, #0]
 8004dac:	6962      	ldr	r2, [r4, #20]
 8004dae:	1c43      	adds	r3, r0, #1
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d004      	beq.n	8004dbe <__swbuf_r+0x5a>
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	07db      	lsls	r3, r3, #31
 8004db8:	d506      	bpl.n	8004dc8 <__swbuf_r+0x64>
 8004dba:	2e0a      	cmp	r6, #10
 8004dbc:	d104      	bne.n	8004dc8 <__swbuf_r+0x64>
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f7ff ff35 	bl	8004c30 <_fflush_r>
 8004dc6:	b938      	cbnz	r0, 8004dd8 <__swbuf_r+0x74>
 8004dc8:	4638      	mov	r0, r7
 8004dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 f806 	bl	8004de0 <__swsetup_r>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d0d5      	beq.n	8004d84 <__swbuf_r+0x20>
 8004dd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ddc:	e7f4      	b.n	8004dc8 <__swbuf_r+0x64>
	...

08004de0 <__swsetup_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <__swsetup_r+0xac>)
 8004de4:	4605      	mov	r5, r0
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	460c      	mov	r4, r1
 8004dea:	b118      	cbz	r0, 8004df4 <__swsetup_r+0x14>
 8004dec:	6a03      	ldr	r3, [r0, #32]
 8004dee:	b90b      	cbnz	r3, 8004df4 <__swsetup_r+0x14>
 8004df0:	f7ff f936 	bl	8004060 <__sinit>
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dfa:	0718      	lsls	r0, r3, #28
 8004dfc:	d422      	bmi.n	8004e44 <__swsetup_r+0x64>
 8004dfe:	06d9      	lsls	r1, r3, #27
 8004e00:	d407      	bmi.n	8004e12 <__swsetup_r+0x32>
 8004e02:	2309      	movs	r3, #9
 8004e04:	602b      	str	r3, [r5, #0]
 8004e06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e0a:	81a3      	strh	r3, [r4, #12]
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e10:	e034      	b.n	8004e7c <__swsetup_r+0x9c>
 8004e12:	0758      	lsls	r0, r3, #29
 8004e14:	d512      	bpl.n	8004e3c <__swsetup_r+0x5c>
 8004e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e18:	b141      	cbz	r1, 8004e2c <__swsetup_r+0x4c>
 8004e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	d002      	beq.n	8004e28 <__swsetup_r+0x48>
 8004e22:	4628      	mov	r0, r5
 8004e24:	f7ff fa06 	bl	8004234 <_free_r>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6363      	str	r3, [r4, #52]	; 0x34
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	2300      	movs	r3, #0
 8004e36:	6063      	str	r3, [r4, #4]
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	f043 0308 	orr.w	r3, r3, #8
 8004e42:	81a3      	strh	r3, [r4, #12]
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	b94b      	cbnz	r3, 8004e5c <__swsetup_r+0x7c>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e52:	d003      	beq.n	8004e5c <__swsetup_r+0x7c>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 f840 	bl	8004edc <__smakebuf_r>
 8004e5c:	89a0      	ldrh	r0, [r4, #12]
 8004e5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e62:	f010 0301 	ands.w	r3, r0, #1
 8004e66:	d00a      	beq.n	8004e7e <__swsetup_r+0x9e>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60a3      	str	r3, [r4, #8]
 8004e6c:	6963      	ldr	r3, [r4, #20]
 8004e6e:	425b      	negs	r3, r3
 8004e70:	61a3      	str	r3, [r4, #24]
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	b943      	cbnz	r3, 8004e88 <__swsetup_r+0xa8>
 8004e76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e7a:	d1c4      	bne.n	8004e06 <__swsetup_r+0x26>
 8004e7c:	bd38      	pop	{r3, r4, r5, pc}
 8004e7e:	0781      	lsls	r1, r0, #30
 8004e80:	bf58      	it	pl
 8004e82:	6963      	ldrpl	r3, [r4, #20]
 8004e84:	60a3      	str	r3, [r4, #8]
 8004e86:	e7f4      	b.n	8004e72 <__swsetup_r+0x92>
 8004e88:	2000      	movs	r0, #0
 8004e8a:	e7f7      	b.n	8004e7c <__swsetup_r+0x9c>
 8004e8c:	20000064 	.word	0x20000064

08004e90 <__swhatbuf_r>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	460c      	mov	r4, r1
 8004e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	b096      	sub	sp, #88	; 0x58
 8004e9c:	4615      	mov	r5, r2
 8004e9e:	461e      	mov	r6, r3
 8004ea0:	da0d      	bge.n	8004ebe <__swhatbuf_r+0x2e>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	bf0c      	ite	eq
 8004eae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004eb2:	2340      	movne	r3, #64	; 0x40
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	6031      	str	r1, [r6, #0]
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	b016      	add	sp, #88	; 0x58
 8004ebc:	bd70      	pop	{r4, r5, r6, pc}
 8004ebe:	466a      	mov	r2, sp
 8004ec0:	f000 f872 	bl	8004fa8 <_fstat_r>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	dbec      	blt.n	8004ea2 <__swhatbuf_r+0x12>
 8004ec8:	9901      	ldr	r1, [sp, #4]
 8004eca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004ece:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004ed2:	4259      	negs	r1, r3
 8004ed4:	4159      	adcs	r1, r3
 8004ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eda:	e7eb      	b.n	8004eb4 <__swhatbuf_r+0x24>

08004edc <__smakebuf_r>:
 8004edc:	898b      	ldrh	r3, [r1, #12]
 8004ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ee0:	079d      	lsls	r5, r3, #30
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	d507      	bpl.n	8004ef8 <__smakebuf_r+0x1c>
 8004ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	6163      	str	r3, [r4, #20]
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	ab01      	add	r3, sp, #4
 8004efa:	466a      	mov	r2, sp
 8004efc:	f7ff ffc8 	bl	8004e90 <__swhatbuf_r>
 8004f00:	9900      	ldr	r1, [sp, #0]
 8004f02:	4605      	mov	r5, r0
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7fe ff73 	bl	8003df0 <_malloc_r>
 8004f0a:	b948      	cbnz	r0, 8004f20 <__smakebuf_r+0x44>
 8004f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f10:	059a      	lsls	r2, r3, #22
 8004f12:	d4ef      	bmi.n	8004ef4 <__smakebuf_r+0x18>
 8004f14:	f023 0303 	bic.w	r3, r3, #3
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	81a3      	strh	r3, [r4, #12]
 8004f1e:	e7e3      	b.n	8004ee8 <__smakebuf_r+0xc>
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	6020      	str	r0, [r4, #0]
 8004f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f28:	81a3      	strh	r3, [r4, #12]
 8004f2a:	9b00      	ldr	r3, [sp, #0]
 8004f2c:	6163      	str	r3, [r4, #20]
 8004f2e:	9b01      	ldr	r3, [sp, #4]
 8004f30:	6120      	str	r0, [r4, #16]
 8004f32:	b15b      	cbz	r3, 8004f4c <__smakebuf_r+0x70>
 8004f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f000 f847 	bl	8004fcc <_isatty_r>
 8004f3e:	b128      	cbz	r0, 8004f4c <__smakebuf_r+0x70>
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	81a3      	strh	r3, [r4, #12]
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	431d      	orrs	r5, r3
 8004f50:	81a5      	strh	r5, [r4, #12]
 8004f52:	e7cf      	b.n	8004ef4 <__smakebuf_r+0x18>

08004f54 <memmove>:
 8004f54:	4288      	cmp	r0, r1
 8004f56:	b510      	push	{r4, lr}
 8004f58:	eb01 0402 	add.w	r4, r1, r2
 8004f5c:	d902      	bls.n	8004f64 <memmove+0x10>
 8004f5e:	4284      	cmp	r4, r0
 8004f60:	4623      	mov	r3, r4
 8004f62:	d807      	bhi.n	8004f74 <memmove+0x20>
 8004f64:	1e43      	subs	r3, r0, #1
 8004f66:	42a1      	cmp	r1, r4
 8004f68:	d008      	beq.n	8004f7c <memmove+0x28>
 8004f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f72:	e7f8      	b.n	8004f66 <memmove+0x12>
 8004f74:	4402      	add	r2, r0
 8004f76:	4601      	mov	r1, r0
 8004f78:	428a      	cmp	r2, r1
 8004f7a:	d100      	bne.n	8004f7e <memmove+0x2a>
 8004f7c:	bd10      	pop	{r4, pc}
 8004f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f86:	e7f7      	b.n	8004f78 <memmove+0x24>

08004f88 <_close_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4d06      	ldr	r5, [pc, #24]	; (8004fa4 <_close_r+0x1c>)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	4604      	mov	r4, r0
 8004f90:	4608      	mov	r0, r1
 8004f92:	602b      	str	r3, [r5, #0]
 8004f94:	f7fc fa4f 	bl	8001436 <_close>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_close_r+0x1a>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_close_r+0x1a>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	20000308 	.word	0x20000308

08004fa8 <_fstat_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d07      	ldr	r5, [pc, #28]	; (8004fc8 <_fstat_r+0x20>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	602b      	str	r3, [r5, #0]
 8004fb6:	f7fc fa4a 	bl	800144e <_fstat>
 8004fba:	1c43      	adds	r3, r0, #1
 8004fbc:	d102      	bne.n	8004fc4 <_fstat_r+0x1c>
 8004fbe:	682b      	ldr	r3, [r5, #0]
 8004fc0:	b103      	cbz	r3, 8004fc4 <_fstat_r+0x1c>
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	bd38      	pop	{r3, r4, r5, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000308 	.word	0x20000308

08004fcc <_isatty_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4d06      	ldr	r5, [pc, #24]	; (8004fe8 <_isatty_r+0x1c>)
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	f7fc fa49 	bl	800146e <_isatty>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_isatty_r+0x1a>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_isatty_r+0x1a>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	20000308 	.word	0x20000308

08004fec <_lseek_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4d07      	ldr	r5, [pc, #28]	; (800500c <_lseek_r+0x20>)
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	4608      	mov	r0, r1
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	602a      	str	r2, [r5, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f7fc fa42 	bl	8001484 <_lseek>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_lseek_r+0x1e>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	b103      	cbz	r3, 800500a <_lseek_r+0x1e>
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	20000308 	.word	0x20000308

08005010 <_read_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	4d07      	ldr	r5, [pc, #28]	; (8005030 <_read_r+0x20>)
 8005014:	4604      	mov	r4, r0
 8005016:	4608      	mov	r0, r1
 8005018:	4611      	mov	r1, r2
 800501a:	2200      	movs	r2, #0
 800501c:	602a      	str	r2, [r5, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	f7fc f9ec 	bl	80013fc <_read>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_read_r+0x1e>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_read_r+0x1e>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	20000308 	.word	0x20000308

08005034 <_write_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d07      	ldr	r5, [pc, #28]	; (8005054 <_write_r+0x20>)
 8005038:	4604      	mov	r4, r0
 800503a:	4608      	mov	r0, r1
 800503c:	4611      	mov	r1, r2
 800503e:	2200      	movs	r2, #0
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f7fc f876 	bl	8001134 <_write>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_write_r+0x1e>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_write_r+0x1e>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	20000308 	.word	0x20000308

08005058 <memcpy>:
 8005058:	440a      	add	r2, r1
 800505a:	4291      	cmp	r1, r2
 800505c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005060:	d100      	bne.n	8005064 <memcpy+0xc>
 8005062:	4770      	bx	lr
 8005064:	b510      	push	{r4, lr}
 8005066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800506a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800506e:	4291      	cmp	r1, r2
 8005070:	d1f9      	bne.n	8005066 <memcpy+0xe>
 8005072:	bd10      	pop	{r4, pc}

08005074 <_malloc_usable_size_r>:
 8005074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005078:	1f18      	subs	r0, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	bfbc      	itt	lt
 800507e:	580b      	ldrlt	r3, [r1, r0]
 8005080:	18c0      	addlt	r0, r0, r3
 8005082:	4770      	bx	lr

08005084 <_init>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr

08005090 <_fini>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	bf00      	nop
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr
